exports.ids = [2];
exports.modules = {

/***/ "./md/blog/2018-04_versioning-features-in-an-angular-app.md":
/*!******************************************************************!*\
  !*** ./md/blog/2018-04_versioning-features-in-an-angular-app.md ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Versioning features in an angular app\\\"\\nexcerpt: \\\"Versioning components and instantiating the appropriate version dynamically is not only possible but also has some use cases. Check this post where I explain how to accomplish that using a ComponentFactoryResolver and structural directives.\\\"\\npublished: true\\ndatePublished: 1524553200000\\ndate: \\\"2018-04-24T09:00:00.000Z\\\"\\nauthor: Juangui Jordán\\ntags:\\n  - Dan Abramov\\nauthorPhoto: /img/authors/jguix.jpeg\\nbannerPhoto: \\\"/img/blog/2018-04_versioning-features-in-an-angular-app/versioning-features-in-an-angular-app.png\\\"\\nthumbnailPhoto: \\\"/img/blog/2018-04_versioning-features-in-an-angular-app/versioning-features-in-an-angular-app.png\\\"\\ncanonicalUrl: https://juanguijordan.com/blog/2018-04_versioning-features-in-an-angular-app\\n---\\n\\nImagine a scenario where your app needs to show different versions of a component or services to different groups of users.\\nIf it sounds a bit farfetched, take the following scenario that was proposed to our development team in some real project:\\n\\n- The app is downloaded from **Google Play/App Store**, and will be deployed in different countries, using the same app ID.\\n- Different countries have different regulations as to whether the app can display user photographies, specific fields, and so on.\\n  Also, some features should be totally disabled in some countries.\\n- The app will keep growing in functionality, but not necessarily at the same time for all countries:\\n  some countries may decide not to upgrade some feature, or upgrade it later;\\n  some countries may take more time to review if some particular new feature follows their privacy regulations…\\n\\nThe naive approach of having ngIf directives all over the place can work for the simpler cases\\nbut it would be hard to maintain and would also clutter our beautiful templates.\\nAlso, components using different services when switching from one version to another would be very difficult to maintain.\\n\\nSo we came up to the following approach, to cope with all those situations:\\n\\n- Create a directive to show/hide parts of a template depending on the country and version.\\n  That would be like an extension of _ngIf_ with our _country_ and _version_ parameters,\\n  and would give an answer to simple problems like hiding a whole feature in some countries,\\n  or hiding a particular field for some countries/versions.\\n- Create a directive that returns a dynamic component, depending on the _country_ and _version_ parameters.\\n  This directive would be used for more general cases,\\n  where a component version can provide very different functionality from another version.\\n\\nTo illustrate this post, we created an app. Our app proudly shows some country data,\\nlike a country flag, area and population.\\nWe made contact with governments all over the world and kindly asked them to join our non-profit revolutionary app,\\nproviding some basic data:\\n\\n- Country name\\n- Area\\n- Population\\n\\nSome of these countries have really severe regulations and wanted to join the app,\\nbut without revealing their area and population initially,\\nuntil their lawyers would determine if this data could be displayed.\\nSo we designed the first version of the app with a single screen,\\nwhere the user would select the country from a select combo box,\\nand a component with two subcomponents displaying the country data:\\n\\n- A header component for the country name\\n- A content component for the data\\n\\nThe content component should be optional, and will display depending on the country’s regulations.\\n\\n![Design of the first version of the components](/img/blog/2018-04_versioning-features-in-an-angular-app/features_v1.png)\\n\\nThese are some screenshots of the app at this point:\\n\\n![Screenshots of the first version of the app](/img/blog/2018-04_versioning-features-in-an-angular-app/features_v1_screenshots.png)\\n\\nAfter the kick off, some users were so excited that started to ask for some new features:\\n\\n- They wanted to get the country flag displayed in the header\\n- Some more data like country capital and wait for it… the national anthem, of course\\n\\nThe development team agreed that, given that some countries still had not provided their area and population,\\nit was reasonable to think that some of them would not provide instantly their flag, capital and anthem.\\nSo we decided to version the header and content components, so we could give them a smooth path to upgrade their data,\\nwhile still looking good in the app, showing the old components instead of new components with empty fields.\\n\\n![Design of the final version of the components](/img/blog/2018-04_versioning-features-in-an-angular-app/features_v2.png)\\n\\nThese are some screenshots of the final version of the app:\\n\\n![Screenshots of the final version of the app](/img/blog/2018-04_versioning-features-in-an-angular-app/features_v2_screenshots.png)\\n\\nOur app builds on two directives, as we said.\\nThe first one will show/hide an element depending on the feature availability for a certain country,\\nwhere the features will be _COUNTRY_HEADER_ and _COUNTRY_CONTENT_.\\nThis directive will get the feature availability from a service, the so called _CountryConfigService_.\\n\\n```typescript\\nimport {\\n  CountryConfigDictionary,\\n  DEFAULT_COUNTRY_CONFIG,\\n  FeatureVersionDictionary,\\n} from \\\"./country-config.model\\\";\\n\\n@Injectable()\\nexport class CountryConfigService {\\n  private config: CountryConfigDictionary = DEFAULT_COUNTRY_CONFIG;\\n  getCountryFeatures(countryCode: string): FeatureVersionDictionary {\\n    return this.config[countryCode].features;\\n  }\\n\\n  isFeatureEnabled(feature: string, countryCode: string): boolean {\\n    const countryFeatures = this.getCountryFeatures(countryCode);\\n    return countryFeatures.hasOwnProperty(feature);\\n  }\\n\\n  getFeatureVersion(feature: string, countryCode: string): number {\\n    const countryFeatures = this.getCountryFeatures(countryCode);\\n    return countryFeatures[feature];\\n  }\\n}\\n```\\n\\nThe _config_ is an object following a _CountryConfigDictionary_ model\\nthat lets us define which version of the _COUNTRY_HEADER_ and _COUNTRY_CONTENT_ components,\\nif any, is using each country:\\n\\n```typescript\\nexport const DEFAULT_COUNTRY_CONFIG: CountryConfigDictionary = {\\n  es: {\\n    features: {\\n      COUNTRY_HEADER: 2,\\n      COUNTRY_CONTENT: 2,\\n    },\\n  },\\n  fr: {\\n    features: {\\n      COUNTRY_HEADER: 2,\\n      COUNTRY_CONTENT: 2,\\n    },\\n  },\\n  it: {\\n    features: {\\n      COUNTRY_HEADER: 2,\\n      COUNTRY_CONTENT: 1,\\n    },\\n  },\\n  pt: {\\n    features: {\\n      COUNTRY_HEADER: 1,\\n      COUNTRY_CONTENT: 1,\\n    },\\n  },\\n  uk: {\\n    features: {\\n      COUNTRY_HEADER: 1,\\n    },\\n  },\\n};\\n```\\n\\n## The FeatureIf directive\\n\\nWith that in mind, let’s see the _FeatureIf_ directive.\\nIt will display an element if the feature is enabled for the country.\\nOptionally, we can define the minimum version implemented by the country,\\nmeaning that if the country uses a lower version, the element will be hidden.\\nI will skip the standard imports to save space in the listing:\\n\\n```typescript\\nimport { CountryConfigService } from \\\"../../services/country-config/country-config.service\\\";\\n\\n@Directive({\\n  selector: \\\"[appFeatureIf]\\\",\\n})\\nexport class FeatureIfDirective implements OnChanges {\\n  private _featureName: string;\\n  private _countryCode: string;\\n  private _minVersion = 0;\\n  private _else = false;\\n  private _hasView: boolean;\\n\\n  @Input() set appFeatureIf(featureName: string) {\\n    this._featureName = featureName;\\n  }\\n\\n  @Input() set appFeatureIfCountryCode(value: string) {\\n    this._countryCode = value;\\n  }\\n\\n  @Input() set appFeatureIfVersion(value: number) {\\n    this._minVersion = value;\\n  }\\n\\n  @Input() set appFeatureIfElse(value: boolean) {\\n    this._else = value;\\n  }\\n\\n  constructor(\\n    private templateRef: TemplateRef<any>,\\n    private viewContainerRef: ViewContainerRef,\\n    private countryConfigService: CountryConfigService\\n  ) {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes) {\\n      this.applyChanges();\\n    }\\n  }\\n\\n  private applyChanges(): void {\\n    const featureEnabled = this.countryConfigService.isFeatureEnabled(\\n      this._featureName,\\n      this._countryCode\\n    );\\n    const featureVersion =\\n      this.countryConfigService.getFeatureVersion(\\n        this._featureName,\\n        this._countryCode\\n      ) || 0;\\n    const enabled: boolean =\\n      featureEnabled && featureVersion >= this._minVersion;\\n    const displayed: boolean =\\n      (enabled && !this._else) || (!enabled && this._else);\\n    this.embedTemplate(displayed);\\n  }\\n\\n  private embedTemplate(enabled): void {\\n    if (enabled && !this._hasView) {\\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\\n      this._hasView = true;\\n    } else if (!enabled && this._hasView) {\\n      this.viewContainerRef.clear();\\n      this._hasView = false;\\n    }\\n  }\\n}\\n```\\n\\nThis structural directive makes use of 4 parameters: _featureName_, _countryCode_, _featureVersion_ and _else_.\\nPay attention on how we define input properties in a structural directive:\\n\\n- The first input takes the name of the very same directive: _appFeatureIf_.\\n  We use a setter to internally save it as _\\\\_featureName_.\\n- The rest of the inputs take the name of the directive plus the name of the parameter.\\n  For instance, the input _appFeatureIfCountryCode_ references the directive parameter _countryCode_.\\n  We also use here a setter to map the input to the private variable _\\\\_countryCode_.\\n\\nPlease remark below how the directive is used in a template.\\nThe first parameter doesn’t need a key, while the rest is passed with _“key: value”_ tuples, separated by a semicolon (;).\\n\\n```html\\n<div *appFeatureIf=\\\"'COUNTRY_HEADER';countryCode:code;version:2\\\">\\n  Show only for countries implementing the COUNTRY_HEADER feature with version\\n  >= 2\\n</div>\\n\\n<div *appFeatureIf=\\\"'COUNTRY_HEADER';countryCode:code;version:2; else:'true'\\\">\\n  Show otherwise\\n</div>\\n```\\n\\nWhat the directive basically does is:\\n\\n- Registers for changes in any of the inputs.\\n- When the directive is instantiated or any of the input changes, executes _applyChanges()_.\\n- Computes if the feature is enabled according to feature _name_, _country code_ and _version_.\\n- Computes if the element has to be displayed.\\n  If the _else_ parameter is defined and true, then it will be displayed if the feature is disabled.\\n- Executes _embedTemplate()_, which creates the embedded view into the view container if the element should be displayed,\\n  or clears the view container otherwise.\\n\\nWe use this directive in two cases in our app.\\nIn the header, we use it to hide the flag for countries implementing _COUNTRY_HEADER_ version 1.\\n\\n```html\\n<div\\n  *appFeatureIf=\\\"'COUNTRY_HEADER';countryCode:country.code;\\n  version:2\\\"\\n  class=\\\"flag {{country.code}}\\\"\\n></div>\\n```\\n\\nIn the parent component, we use the directive with the _else_ parameter set to _true_,\\nto display an informative text when the content component is not available.\\n\\n```html\\n<div\\n  class=\\\"no-feature\\\"\\n  *appFeatureIf=\\\"'COUNTRY_CONTENT';\\n  countryCode:country.code;else:'true'\\\"\\n>\\n  This feature is not yet available in {{country.name}}.\\n</div>\\n```\\n\\n## The FeatureVersion directive\\n\\nOur second directive will allow us to dynamically inject a component or another, depending on some parameters.\\n\\n```typescript\\nimport { CountryConfigService } from \\\"../../services/country-config/country-config.service\\\";\\nimport { DynamicComponentService } from \\\"../../services/dynamic-component/dynamic-component.service\\\";\\nimport { DynamicComponent } from \\\"../../services/dynamic-component/dynamic-component.model\\\";\\n\\n@Directive({\\n  selector: \\\"[appFeatureVersion]\\\",\\n})\\nexport class FeatureVersionDirective implements OnChanges {\\n  private _featureName: string;\\n  private _countryCode: string;\\n  private _data: any;\\n  private componentRef: ComponentRef<DynamicComponent>;\\n\\n  @Input() set appFeatureVersion(featureName: string) {\\n    this._featureName = featureName;\\n  }\\n\\n  @Input()\\n  set appFeatureVersionCountryCode(value: string) {\\n    this._countryCode = value;\\n  }\\n\\n  @Input()\\n  set appFeatureVersionData(value: any) {\\n    this._data = value;\\n  }\\n\\n  constructor(\\n    private viewContainerRef: ViewContainerRef,\\n    private countryConfigService: CountryConfigService,\\n    private dynamicComponentService: DynamicComponentService,\\n    private componentFactoryResolver: ComponentFactoryResolver\\n  ) {}\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes) {\\n      this.applyChanges();\\n    }\\n  }\\n\\n  private applyChanges(): void {\\n    const featureEnabled = this.countryConfigService.isFeatureEnabled(\\n      this._featureName,\\n      this._countryCode\\n    );\\n    const featureVersion =\\n      this.countryConfigService.getFeatureVersion(\\n        this._featureName,\\n        this._countryCode\\n      ) || 0;\\n    const dynamicComponent = this.dynamicComponentService.getComponent(\\n      this._featureName,\\n      featureVersion\\n    );\\n    this.clearViewContainer();\\n    if (featureEnabled && dynamicComponent) {\\n      this.embedComponent(dynamicComponent);\\n      this.injectComponentData();\\n    }\\n  }\\n\\n  private clearViewContainer(): void {\\n    this.viewContainerRef.clear();\\n  }\\n\\n  private embedComponent(component: Type<DynamicComponent>): void {\\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(\\n      component\\n    );\\n    this.componentRef = this.viewContainerRef.createComponent(componentFactory);\\n  }\\n\\n  private injectComponentData(): void {\\n    this.componentRef.instance.data = this._data;\\n  }\\n}\\n```\\n\\nThis time, the directive takes three parameters: _featureName_, _countryCode_ and _data_.\\nThe _data_ parameter will be used to pass data to our dynamic component.\\nSince different components may have different inputs,\\nwe took the approach of receiving any external data through this _data_ object.\\nDynamic components may also receive external data through services, as we will see later.\\n\\nSo basically, what this directive does is:\\n\\n- Registers for changes in any of the inputs.\\n- When the directive is instantiated or any of the input changes, executes _applyChanges()_.\\n- Computes if the feature is enabled according to feature name and country code.\\n- Gets the dynamic component type for the feature name and version from the _DynamicComponentService_.\\n- Clears the view container.\\n- If a dynamic component type was retrieved successfully, executes _embedTemplate()_,\\n  which resolves a factory for this type of component and creates the embedded view into the view container.\\n- Finally, it injects the data object into the dynamically instantiated component.\\n\\nLet’s see the code for those _DynamicComponent_ and _DynamicComponentService_ classes.\\n\\nThe _DynamicComponent_ is just a class with a public _data_ property.\\nWe will also create a dictionary interface and a constant with the current dynamic component classes\\n(country content version 1 and 2) that will be used by the service.\\n\\n```typescript\\nimport { CountryContentV1Component } from \\\"../../../country/components/country-content/v1/country-content.v1.component\\\";\\nimport { CountryContentV2Component } from \\\"../../../country/components/country-content/v2/country-content.v2.component\\\";\\n\\nexport class DynamicComponent {\\n  data: any;\\n}\\n\\nexport interface DynamicComponentDictionary {\\n  [key: string]: {\\n    [key: number]: Type<DynamicComponent>;\\n  };\\n}\\n\\nexport const DEFAULT_DYNAMIC_COMPONENT_DICTIONARY: DynamicComponentDictionary = {\\n  COUNTRY_CONTENT: {\\n    1: CountryContentV1Component,\\n    2: CountryContentV2Component,\\n  },\\n};\\n```\\n\\nThe _DynamicComponentService_ simply returns the appropriate component class,\\ndepending on the _featureName_ and _version_ parameters.\\n\\n```typescript\\nimport {\\n  DEFAULT_DYNAMIC_COMPONENT_DICTIONARY,\\n  DynamicComponent,\\n  DynamicComponentDictionary,\\n} from \\\"./dynamic-component.model\\\";\\n\\n@Injectable()\\nexport class DynamicComponentService {\\n  private componentDictionary: DynamicComponentDictionary = DEFAULT_DYNAMIC_COMPONENT_DICTIONARY;\\n\\n  getComponent(featureName: string, version: number): Type<DynamicComponent> {\\n    const selectedComponent = this.componentDictionary[featureName]\\n      ? this.componentDictionary[featureName][version]\\n      : undefined;\\n    return selectedComponent;\\n  }\\n}\\n```\\n\\nLet’s see how this directive is used in the parent component.\\n\\n```html\\n<ng-template\\n  *appFeatureVersion=\\\"'COUNTRY_CONTENT';\\n  countryCode:country.code;data:{country: country}\\\"\\n>\\n</ng-template>\\n```\\n\\nThis is the code for the _CountryContentV1Component_ class.\\n\\n```typescript\\nimport { DynamicComponent } from \\\"../../../../shared/services/dynamic-component/dynamic-component.model\\\";\\nimport { Country } from \\\"../../../services/country.model\\\";\\n\\n@Component({\\n  selector: \\\"app-country-content-v1\\\",\\n  templateUrl: \\\"./country-content.v1.component.html\\\",\\n  styleUrls: [\\\"./country-content.v1.component.scss\\\"],\\n})\\nexport class CountryContentV1Component implements DynamicComponent {\\n  data: { country: Country };\\n}\\n```\\n\\nAnd this is how the template uses the _data_ property to display the country data.\\n\\n```html\\n<div class=\\\"country-content\\\">\\n  <div class=\\\"data-row\\\">\\n    <span class=\\\"data-label\\\"> Area: </span>\\n    <span class=\\\"data-value\\\"> {{data.country.area | number}} </span>\\n  </div>\\n  <div class=\\\"data-row\\\">\\n    <span class=\\\"data-label\\\"> Population: </span>\\n    <span class=\\\"data-value\\\"> {{data.country.population | number}} </span>\\n  </div>\\n</div>\\n```\\n\\nYou can see a demo of the application here:\\n\\nhttps://stackblitz.com/edit/component-version-demo\\n\\n## Versioned services\\n\\nThe situation can get a bit more complicated if services are also versioned.\\nLet’s imagine that the first version of the service providing country data just included the country name,\\narea and population, and that a new version should be created to include the new data,\\nwhile still providing the old version for backward compatibility.\\n\\nIn this case we can inject the corresponding service version in the versioned components.\\nWe won’t be using the _data_ property from _DynamicComponent_, but will get the data from the service instead.\\nWe could also use injection tokens to dynamically inject the versioned service depending on certain conditions.\\n\\nThe following demo is a simple approach using versioned services.\\n\\nhttps://stackblitz.com/edit/component-version-demo-services\\n\\n## Final considerations\\n\\nThe demo app is probably too simple for that kind of solution.\\nWe could still smartly use some _ngIf_ and _ngTemplate_ stuff to get to the same solution.\\nBut think of a case where the user doesn’t select the country from a combo box,\\nbut the country gets auto detected from your device settings,\\nand think of a more complicated UI with a dashboard with several widgets that should be displayed or hidden,\\nor have different content according to the country, and then this approach will make much more sense.\\n\\nThis post is long enough to get into more details.\\nIf you have suggestions to enhance it, please include them in your comments :)\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./md/blog/2018-04_versioning-features-in-an-angular-app.md\n");

/***/ })

};;