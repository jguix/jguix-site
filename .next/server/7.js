exports.ids = [7];
exports.modules = {

/***/ "./md/blog/2021-01_redux-normalized-store-part-2.md":
/*!**********************************************************!*\
  !*** ./md/blog/2021-01_redux-normalized-store-part-2.md ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"---\\ntitle: \\\"Using redux with relational data (2/3)\\\"\\nexcerpt: \\\"In this post, I will show you how to create a simple Chrome extension, using just JavaScript, HTML and CSS. I will also summarize all what a Chrome extension can do, and I will introduce how to create more complex extensions based on modern JavaScript frameworks like React, Angular or Vue.\\\"\\npublished: true\\ndatePublished: 1611648000000\\ndate: \\\"2021-01-26T09:00:00.000Z\\\"\\nauthor: Juangui JordÃ¡n\\ntags:\\n  - Dan Abramov\\nauthorPhoto: /img/authors/jguix.jpeg\\nbannerPhoto: \\\"/img/blog/2021-01_redux-normalized-store-part-2/redux-normalized-store-part-2.jpg\\\"\\nthumbnailPhoto: \\\"/img/blog/2021-01_redux-normalized-store-part-2/redux-normalized-store-part-2.jpg\\\"\\ncanonicalUrl: https://juanguijordan.com/blog/2021-01_redux-normalized-store-part-2\\n---\\n\\nIn this series of posts we will create an application using **react** and **redux**, in which we will handle relational data. In this second part we will be implementing the store.\\n\\nWe ended up the last part of this series modelling the store. Check part 1 if you need more context on that: [Using redux with relational data (1/3)](https://blog.mimacom.com/redux-normalized-store-part-1/).\\n\\nOur store will have two main reducers, the `entities` store and the `ui` store.\\n\\nLet's start by creating the `entities` store. It will hold 3 types of data, or entities, namely:\\n\\n- user\\n- comment\\n- post\\n\\nEach entity will have associated types, actions and reducers. For the sake of easy comprehension, I'll show the types and actions in the first place.\\n\\nUser types:\\n\\n```javascript\\n// user.types.ts\\nexport type User = {\\n  avatar: string,\\n  email: string,\\n  id: number,\\n  name: string,\\n};\\n```\\n\\nThe user actions will include an action to load all users into the store, and an action to load a single user. The first one will be potentially called from the `My Friends` page, the second one from `My Wall` or `Friend Wall` page, where posts and comments will display the associated user next to them.\\n\\n```javascript\\n// user.actions.ts\\nimport { User } from './user.types';\\n\\nexport enum UserActionTypes {\\n  LOAD_USER = 'USER:LOAD_USER',\\n  LOAD_USERS = 'USER:LOAD_USERS',\\n}\\n\\nexport type LoadUserPayload = {\\n  user: User;\\n};\\n\\nexport type LoadUserAction = {\\n  type: UserActionTypes.LOAD_USER;\\n  payload: LoadUserPayload;\\n};\\n\\nconst loadUserAction = (payload: LoadUserPayload): LoadUserAction => {\\n  return {\\n    payload,\\n    type: UserActionTypes.LOAD_USER,\\n  };\\n};\\n\\nexport type LoadUsersPayload = {\\n  users: User[];\\n};\\n\\nexport type LoadUsersAction = {\\n  type: UserActionTypes.LOAD_USERS;\\n  payload: LoadUsersPayload;\\n};\\n\\nconst loadUsersAction = (payload: LoadUsersPayload): LoadUsersAction => {\\n  return {\\n    payload,\\n    type: UserActionTypes.LOAD_USERS,\\n  };\\n};\\n\\nexport const userActions = {\\n  loadUserAction,\\n  loadUsersAction,\\n};\\n```\\n\\nSimilarly we will have `post` types, where each post has a `userId`, which is the way that our database will manage the one-to-many relation (but remember that we will make this data more easily searchable by creating a `postIdsById` reducer inside the `users` reducer):\\n\\n```javascript\\n// post.types.ts\\nexport type Post = {\\n  body: string,\\n  date: Date,\\n  id: number,\\n  userId: number,\\n};\\n```\\n\\nThe `post` actions only include an action to load posts by user, with the `userId` being an optional parameter. We will dispatch this action with the `userId` param informed from the `Friend Wall` page to get all his posts. We will dispatch this action with the `userId` param `undefined` from `My Wall` to get all posts from all users (to simplify, let's say that all users are friends of mine).\\n\\n```javascript\\n// post.actions.ts\\nimport { Post } from './post.types';\\n\\nexport enum PostActionTypes {\\n  LOAD_POSTS = 'POST:LOAD_POSTS',\\n}\\n\\nexport type LoadPostsPayload = {\\n  posts: Post[];\\n  userId?: number;\\n};\\n\\nexport type LoadPostsAction = {\\n  type: PostActionTypes.LOAD_POSTS;\\n  payload: LoadPostsPayload;\\n};\\n\\nconst loadPostsAction = (payload: LoadPostsPayload): LoadPostsAction => {\\n  return {\\n    payload,\\n    type: PostActionTypes.LOAD_POSTS,\\n  };\\n};\\n\\nexport const postActions = {\\n  loadPostsAction,\\n};\\n```\\n\\nAs for the `comment` types, they will hold indexes pointing to the related `post` and `user`:\\n\\n```javascript\\n// comment.types.ts\\nexport type Comment = {\\n  body: string,\\n  date: Date,\\n  id: number,\\n  postId: number,\\n  userId: number,\\n};\\n```\\n\\nThe `comment` actions also include just one action to load comments by post:\\n\\n```javascript\\n// comments.actions\\nimport { Comment } from './comment.types';\\n\\nexport enum CommentActionTypes {\\n  LOAD_COMMENTS = 'COMMENT:LOAD_COMMENTS',\\n}\\n\\nexport type LoadCommentsPayload = {\\n  comments: Comment[];\\n  postId?: number;\\n};\\n\\nexport type LoadCommentsAction = {\\n  type: CommentActionTypes.LOAD_COMMENTS;\\n  payload: LoadCommentsPayload;\\n};\\n\\nconst loadCommentsAction = (payload: LoadCommentsPayload): LoadCommentsAction => {\\n  return {\\n    payload,\\n    type: CommentActionTypes.LOAD_COMMENTS,\\n  };\\n};\\n\\nexport const commentActions = {\\n  loadCommentsAction,\\n};\\n```\\n\\nNow, let's address the reducers. Regarding the `user` reducer, it will be created by combining two reducers. The first one will take the `LoadUsersAction` action and store a map of users by `id`. It will also process the `LoadUserAction` and store the user in the map. The second one will take the `LoadPostsAction` and store a map of `postIds` related to a user.\\n\\n```javascript\\n// user.reducer.ts\\nimport { User } from './user.types';\\nimport { UserActionTypes, LoadUsersAction, LoadUserAction } from './user.actions';\\nimport { NumberIndexed } from '../shared/shared.types';\\nimport { AnyAction, combineReducers, Reducer } from 'redux';\\nimport { LoadPostsAction, PostActionTypes } from '../post/post.actions';\\n\\nexport type UserState = {\\n  byId: NumberIndexed<User>;\\n  postIdsById: NumberIndexed<number[]>; // one-to-many relation\\n};\\n\\nexport type UserStore = {\\n  users: UserState;\\n};\\n\\nexport const userByIdReducer = (state: NumberIndexed<User> = {}, action: AnyAction) => {\\n  switch (action.type) {\\n    case UserActionTypes.LOAD_USERS:\\n      const { payload } = action as LoadUsersAction;\\n      const { users } = payload;\\n      const loadedUsersMap = users.reduce((map, user) => ({ ...map, [user.id]: user }), {});\\n\\n      return {\\n        ...state,\\n        ...loadedUsersMap,\\n      };\\n\\n    case UserActionTypes.LOAD_USER:\\n      const { payload: userPayload } = action as LoadUserAction;\\n      const { user } = userPayload;\\n\\n      return {\\n        ...state,\\n        [user.id]: user,\\n      };\\n  }\\n\\n  return state;\\n};\\n\\nexport const postIdsByIdReducer = (state: NumberIndexed<number[]> = {}, action: AnyAction) => {\\n  switch (action.type) {\\n    case PostActionTypes.LOAD_POSTS:\\n      const { payload } = action as LoadPostsAction;\\n      const { posts, userId } = payload;\\n      let loadedPostIdsByUserIdMap = posts.reduce(\\n        (postIdsByUserIdMap, post) => ({\\n          ...postIdsByUserIdMap,\\n          [post.userId]: postIdsByUserIdMap[post.userId] ? [...postIdsByUserIdMap[post.userId], post.id] : [post.id],\\n        }),\\n        {} as NumberIndexed<number[]>\\n      );\\n      if (posts.length === 0) {\\n        loadedPostIdsByUserIdMap = { [userId as number]: [] };\\n      }\\n\\n      return {\\n        ...state,\\n        ...loadedPostIdsByUserIdMap,\\n      };\\n  }\\n\\n  return state;\\n};\\n\\nexport const userReducer: Reducer<UserState> = combineReducers({\\n  byId: userByIdReducer,\\n  postIdsById: postIdsByIdReducer,\\n});\\n```\\n\\nThe `NumberIndexed` custom type is defined as follows, in a shared file where we also define the types for the filters. This type allows us to type maps with numbers as index used by the reducers above.\\n\\n```javascript\\n// shared.types.ts\\nexport type NumberIndexed<T> = { [index: number]: T };\\nexport type StringIndexed<T> = { [index: string]: T };\\nexport type OrderType = \\\"asc\\\" | \\\"desc\\\";\\n```\\n\\nSimilarly, the `post` reducer has a reducer related to the `LoadPost` action ans a reducer taking care of the `LoadCommentsAction`.\\n\\n```javascript\\n// post.reducer.ts\\nimport { Post } from './post.types';\\nimport { PostActionTypes, LoadPostsAction } from './post.actions';\\nimport { NumberIndexed } from '../shared/shared.types';\\nimport { AnyAction, combineReducers, Reducer } from 'redux';\\nimport { CommentActionTypes, LoadCommentsAction } from '../comment/comment.actions';\\n\\nexport type PostState = {\\n  byId: NumberIndexed<Post>;\\n  commentIdsById: NumberIndexed<number[]>; // one-to-many relation\\n};\\n\\nexport type PostStore = {\\n  posts: PostState;\\n};\\n\\nexport const postByIdReducer = (state: NumberIndexed<Post> = {}, action: AnyAction) => {\\n  switch (action.type) {\\n    case PostActionTypes.LOAD_POSTS:\\n      const { payload } = action as LoadPostsAction;\\n      const { posts } = payload;\\n      const loadedPostsMap = posts.reduce((map, post) => ({ ...map, [post.id]: post }), {});\\n\\n      return {\\n        ...state,\\n        ...loadedPostsMap,\\n      };\\n  }\\n\\n  return state;\\n};\\n\\nexport const commentIdsByIdReducer = (state: NumberIndexed<number[]> = {}, action: AnyAction) => {\\n  switch (action.type) {\\n    case CommentActionTypes.LOAD_COMMENTS:\\n      const { payload } = action as LoadCommentsAction;\\n      const { comments, postId } = payload;\\n      let loadedCommentIdsByPostIdMap = comments.reduce(\\n        (commentIdsByPostIdMap, comment) => ({\\n          ...commentIdsByPostIdMap,\\n          [comment.postId]: commentIdsByPostIdMap[comment.postId]\\n            ? [...commentIdsByPostIdMap[comment.postId], comment.id]\\n            : [comment.id],\\n        }),\\n        {} as NumberIndexed<number[]>\\n      );\\n      if (comments.length === 0) {\\n        loadedCommentIdsByPostIdMap = { [postId as number]: [] };\\n      }\\n\\n      return {\\n        ...state,\\n        ...loadedCommentIdsByPostIdMap,\\n      };\\n  }\\n\\n  return state;\\n};\\n\\nexport const postReducer: Reducer<PostState> = combineReducers({\\n  byId: postByIdReducer,\\n  commentIdsById: commentIdsByIdReducer,\\n});\\n```\\n\\nThe `comment` reducer is more simple, taking care just of the `LoadComments` action.\\n\\n```javascript\\n// comment.reducer.ts\\nimport { Comment } from './comment.types';\\nimport { CommentActionTypes, LoadCommentsAction } from './comment.actions';\\nimport { NumberIndexed } from '../shared/shared.types';\\nimport { AnyAction, combineReducers, Reducer } from 'redux';\\n\\nexport type CommentState = {\\n  byId: NumberIndexed<Comment>;\\n};\\n\\nexport type CommentStore = {\\n  comments: CommentState;\\n};\\n\\nexport const commentByIdReducer = (state: NumberIndexed<Comment> = {}, action: AnyAction) => {\\n  switch (action.type) {\\n    case CommentActionTypes.LOAD_COMMENTS:\\n      const { payload } = action as LoadCommentsAction;\\n      const { comments } = payload;\\n      const loadedCommentsMap = comments.reduce((map, comment) => ({ ...map, [comment.id]: comment }), {});\\n\\n      return {\\n        ...state,\\n        ...loadedCommentsMap,\\n      };\\n  }\\n\\n  return state;\\n};\\n\\nexport const commentReducer: Reducer<CommentState> = combineReducers({\\n  byId: commentByIdReducer,\\n});\\n```\\n\\nNext, we will implement the `ui` store. It will hold data for `My Wall`, `Friend Wall` and `Friends` page.\\n\\n`My wall` will not hold custom types, just indexes to the `post` entities belonging to the user that will be displayed in the page. The actions will include an action to load wall posts.\\n\\n```javascript\\n// wall.actions.ts\\nexport enum WallActionTypes {\\n  LOAD_POSTS = 'WALL:LOAD_POSTS',\\n}\\n\\nexport type LoadWallPostsPayload = {\\n  postIds: number[];\\n};\\n\\nexport type LoadWallPostsAction = {\\n  type: WallActionTypes.LOAD_POSTS;\\n  payload: LoadWallPostsPayload;\\n};\\n\\nconst loadWallPostsAction = (payload: LoadWallPostsPayload): LoadWallPostsAction => {\\n  return {\\n    payload,\\n    type: WallActionTypes.LOAD_POSTS,\\n  };\\n};\\n\\nexport const wallActions = {\\n  loadWallPostsAction,\\n};\\n```\\n\\nThe reducer will be simple, just taking care of that action.\\n\\n```javascript\\n// wall.reducer.ts\\nimport { AnyAction, combineReducers, Reducer } from 'redux';\\nimport { LoadWallPostsAction, WallActionTypes } from './wall.actions';\\n\\nexport type WallState = {\\n  postIds: number[];\\n};\\n\\nexport type WallStore = {\\n  wall: WallState;\\n};\\n\\nexport const postIdsReducer = (state: number[] = [], action: AnyAction) => {\\n  switch (action.type) {\\n    case WallActionTypes.LOAD_POSTS:\\n      const { payload } = action as LoadWallPostsAction;\\n      const { postIds } = payload;\\n      return [...state, ...postIds];\\n  }\\n\\n  return state;\\n};\\n\\nexport const wallReducer: Reducer<WallState> = combineReducers({\\n  postIds: postIdsReducer,\\n});\\n```\\n\\nWe will ommit the code for the actions and reducers associated to the `Friend Wall`, which are very similar to the ones for `My Wall`. You can check the [git repository branch](https://github.com/jguix/redux-normalized-example/tree/blogpost-part2) for this post if you want all the source code.\\n\\nThe `Friends` actions will include loading friends and setting the friends list order (ascending or descending).\\n\\n```javascript\\n// friends.actions.ts\\nimport { OrderType } from '../shared/shared.types';\\n\\nexport enum FriendsActionTypes {\\n  LOAD_FRIENDS = 'FRIENDS:LOAD_FRIENDS',\\n  SET_FRIENDS_ORDER = 'FRIENDS:SET_FRIENDS_ORDER',\\n}\\n\\nexport type LoadFriendsPayload = {\\n  userIds: number[];\\n};\\n\\nexport type LoadFriendsAction = {\\n  type: FriendsActionTypes.LOAD_FRIENDS;\\n  payload: LoadFriendsPayload;\\n};\\n\\nconst loadFriendsAction = (payload: LoadFriendsPayload): LoadFriendsAction => {\\n  return {\\n    payload,\\n    type: FriendsActionTypes.LOAD_FRIENDS,\\n  };\\n};\\n\\nexport type SetFriendsOrderPayload = {\\n  order: OrderType;\\n};\\n\\nexport type SetFriendsOrderAction = {\\n  type: FriendsActionTypes.SET_FRIENDS_ORDER;\\n  payload: SetFriendsOrderPayload;\\n};\\n\\nconst setFriendsOrderAction = (payload: SetFriendsOrderPayload): SetFriendsOrderAction => {\\n  return {\\n    payload,\\n    type: FriendsActionTypes.SET_FRIENDS_ORDER,\\n  };\\n};\\n\\nexport const friendsActions = {\\n  loadFriendsAction,\\n  setFriendsOrderAction,\\n};\\n```\\n\\nThe `friends` reducer will have reducers that just point to `user` entities. We will have one for the ascending order list and one for the descending order list, because we will implement a pagination strategy with the backend (we will talk about that on the next post of the series). Another reducer will store the state of the filter.\\n\\n```javascript\\n// friends.reducer.ts\\nimport { AnyAction, combineReducers, Reducer } from 'redux';\\nimport { FriendsActionTypes, LoadFriendsAction, SetFriendsOrderAction } from './friends.actions';\\n\\nexport type FriendsState = {\\n  orderFilter: 'asc' | 'desc';\\n  userIds: number[];\\n};\\n\\nexport type FriendsStore = {\\n  friends: FriendsState;\\n};\\n\\nexport const orderFilterReducer = (state: 'asc' | 'desc' = 'asc', action: AnyAction) => {\\n  switch (action.type) {\\n    case FriendsActionTypes.SET_FRIENDS_ORDER:\\n      const { payload } = action as SetFriendsOrderAction;\\n      const { order } = payload;\\n      return order;\\n  }\\n\\n  return state;\\n};\\n\\nexport const userIdsReducer = (state: number[] = [], action: AnyAction) => {\\n  switch (action.type) {\\n    case FriendsActionTypes.LOAD_FRIENDS:\\n      const { payload } = action as LoadFriendsAction;\\n      const { userIds } = payload;\\n      return [...state, ...userIds];\\n\\n    case FriendsActionTypes.SET_FRIENDS_ORDER:\\n      return [];\\n  }\\n\\n  return state;\\n};\\n\\nexport const friendsReducer: Reducer<FriendsState> = combineReducers({\\n  orderFilter: orderFilterReducer,\\n  userIds: userIdsReducer,\\n});\\n```\\n\\nTo create the store, we will first install the [redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension). With this tools we will be able to debug the dispatching of actions and the changes in the state of the store.\\n\\n```\\nyarn add redux-devtools-extension\\n```\\n\\nThe `root` store is composed of the `entities` store and `ui` store as follows:\\n\\n```javascript\\n// store.ts\\nimport { combineReducers, createStore, Reducer } from \\\"redux\\\";\\nimport { userReducer, UserStore } from \\\"../modules/user/user.reducer\\\";\\nimport {\\n  commentReducer,\\n  CommentStore,\\n} from \\\"../modules/comment/comment.reducer\\\";\\nimport { postReducer, PostStore } from \\\"../modules/post/post.reducer\\\";\\nimport {\\n  friendsReducer,\\n  FriendsStore,\\n} from \\\"../modules/friends/friends.reducer\\\";\\nimport {\\n  FriendWallStore,\\n  friendWallReducer,\\n} from \\\"../modules/friend-wall/friend-wall.reducer\\\";\\nimport { wallReducer, WallStore } from \\\"../modules/wall/wall.reducer\\\";\\nimport { composeWithDevTools } from \\\"redux-devtools-extension\\\";\\n\\nexport type EntitiesStore = CommentStore & PostStore & UserStore;\\n\\nexport type UIStore = FriendsStore & FriendWallStore & WallStore;\\n\\nexport type ApplicationStore = {\\n  entities: EntitiesStore,\\n  ui: UIStore,\\n};\\n\\nexport const entitiesReducer = combineReducers({\\n  comments: commentReducer,\\n  posts: postReducer,\\n  users: userReducer,\\n});\\n\\nexport const uiReducer = combineReducers({\\n  friends: friendsReducer,\\n  friendWall: friendWallReducer,\\n  wall: wallReducer,\\n});\\n\\nexport const rootReducer: Reducer<ApplicationStore> = combineReducers({\\n  entities: entitiesReducer,\\n  ui: uiReducer,\\n});\\n\\nexport const store = createStore(rootReducer, composeWithDevTools());\\n```\\n\\nFinally, let's throw some data into this store, dispatch some actions and see the results. We will use some mocked data and will display the results using some `console.log` messages and printing the contents of the store in the main page. Alternatively, you can debug these actions with a Chrome plugin like [Redux DevTools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd).\\n\\n```javascript\\n// App.tsx\\nimport React from \\\"react\\\";\\nimport \\\"./App.css\\\";\\nimport { store } from \\\"./store/store\\\";\\nimport { userActions } from \\\"./modules/user/user.actions\\\";\\nimport { User } from \\\"./modules/user/user.types\\\";\\nimport { Post } from \\\"./modules/post/post.types\\\";\\nimport { postActions } from \\\"./modules/post/post.actions\\\";\\nimport { Comment } from \\\"./modules/comment/comment.types\\\";\\nimport { commentActions } from \\\"./modules/comment/comment.actions\\\";\\nimport { friendsActions } from \\\"./modules/friends/friends.actions\\\";\\nimport { wallActions } from \\\"./modules/wall/wall.actions\\\";\\nimport { friendWallActions } from \\\"./modules/friend-wall/friend-wall.actions\\\";\\n\\nconst users: User[] = [\\n  {\\n    id: 1,\\n    name: \\\"Josh Martin\\\",\\n    email: \\\"josh.martin@gmail.com\\\",\\n    avatar: \\\"http://placekitten.com/g/500/400\\\",\\n  },\\n  {\\n    id: 2,\\n    name: \\\"Emily Matthews\\\",\\n    email: \\\"emily.matthews@gmail.com\\\",\\n    avatar: \\\"http://placekitten.com/g/400/400\\\",\\n  },\\n  {\\n    id: 3,\\n    name: \\\"Sonia Lee\\\",\\n    email: \\\"sonia.lee@gmail.com\\\",\\n    avatar: \\\"http://placekitten.com/g/400/500\\\",\\n  },\\n];\\nconst posts: Post[] = [\\n  { id: 1, body: \\\"Blah\\\", date: new Date(), userId: 1 },\\n  { id: 2, body: \\\"Bleh\\\", date: new Date(), userId: 1 },\\n  { id: 3, body: \\\"Blih\\\", date: new Date(), userId: 2 },\\n  { id: 4, body: \\\"Bloh\\\", date: new Date(), userId: 2 },\\n  { id: 5, body: \\\"Bluh\\\", date: new Date(), userId: 3 },\\n];\\nconst comments: Comment[] = [\\n  { id: 1, body: \\\"No\\\", date: new Date(), postId: 1, userId: 2 },\\n  { id: 2, body: \\\"Yes\\\", date: new Date(), postId: 1, userId: 3 },\\n  { id: 3, body: \\\"Yes!\\\", date: new Date(), postId: 1, userId: 1 },\\n  { id: 4, body: \\\"No!\\\", date: new Date(), postId: 2, userId: 3 },\\n];\\n\\nconst App = () => {\\n  store.subscribe(() => {\\n    console.log(\\\"New state\\\", store.getState());\\n  });\\n\\n  console.log(\\\"Loading users\\\");\\n  store.dispatch(\\n    userActions.loadUsersAction({\\n      users,\\n    })\\n  );\\n  console.log(\\\"Loading posts\\\");\\n  store.dispatch(\\n    postActions.loadPostsAction({\\n      posts,\\n    })\\n  );\\n  console.log(\\\"Loading comments\\\");\\n  store.dispatch(\\n    commentActions.loadCommentsAction({\\n      comments,\\n    })\\n  );\\n  console.log(\\\"Loading friends\\\");\\n  store.dispatch(\\n    friendsActions.loadFriendsAction({\\n      userIds: [2, 3],\\n    })\\n  );\\n  console.log(\\\"Loading wall posts\\\");\\n  store.dispatch(\\n    wallActions.loadWallPostsAction({\\n      postIds: [1, 2, 3, 4, 5],\\n    })\\n  );\\n  console.log(\\\"Loading Emily's posts\\\");\\n  store.dispatch(\\n    friendWallActions.loadFriendWallPostsAction({\\n      postIds: [3, 4],\\n      userId: 2,\\n    })\\n  );\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <div>Store contents</div>\\n      <div>\\n        <pre>{JSON.stringify(store.getState(), null, 2)}</pre>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n```\\n\\nIf we run the app we can follow in the console log how the store dispatches actions and the result in the output page. We can also follow the steps, the partial updates and the result in the React DevTools extension.\\n\\n![Redux DevTools Extension](/img/blog/2021-01_redux-normalized-store-part-2/redux-dev-tools.png)\\n\\nIf you wan to dig more into the code, remember that you can check the whole source code in this branch:\\n\\n[https://github.com/jguix/redux-normalized-example/tree/blogpost-part2](https://github.com/jguix/redux-normalized-example/tree/blogpost-part2)\\n\\nIn the next post we will implement the pages and components and a mocked backend with pagination. We will also implement caching methods to avoid asking for the same data again and again.\\n\\n## Credits\\n\\nPhoto by [Sigmund](https://unsplash.com/@sigmund) on [Unsplash](https://unsplash.com/).\\n\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tZC9ibG9nLzIwMjEtMDFfcmVkdXgtbm9ybWFsaXplZC1zdG9yZS1wYXJ0LTIubWQ/NDA2MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLG9yREFBcW5ELHlFQUF5RSx3V0FBd1csT0FBTyxxQkFBcUIsaUNBQWlDLHVFQUF1RSxtQ0FBbUMsZUFBZSxJQUFJLGtDQUFrQyxvQ0FBb0MsNkJBQTZCLElBQUksMEVBQTBFLFlBQVksMERBQTBELElBQUksb0NBQW9DLGtCQUFrQixJQUFJLG1DQUFtQyxxQ0FBcUMsOEJBQThCLElBQUksNkVBQTZFLFlBQVksMkRBQTJELElBQUksZ0NBQWdDLDJDQUEyQyxnVkFBZ1Ysc0VBQXNFLG9jQUFvYyxPQUFPLHFCQUFxQixpQ0FBaUMsc0NBQXNDLG9DQUFvQyxrQkFBa0Isb0JBQW9CLElBQUksbUNBQW1DLHFDQUFxQyw4QkFBOEIsSUFBSSw2RUFBNkUsWUFBWSwyREFBMkQsSUFBSSxnQ0FBZ0Msd0JBQXdCLHFLQUFxSyx5RkFBeUYscUlBQXFJLFVBQVUsd0JBQXdCLG9DQUFvQywrQ0FBK0MsdUNBQXVDLHdCQUF3QixvQkFBb0IsSUFBSSxzQ0FBc0MsMkNBQTJDLGlDQUFpQyxJQUFJLHNGQUFzRixZQUFZLGlFQUFpRSxJQUFJLG1DQUFtQywyQkFBMkIsbWFBQW1hLE9BQU8scUJBQXFCLFVBQVUsbURBQW1ELHVCQUF1QixVQUFVLGdCQUFnQiwrQkFBK0IsVUFBVSxzQ0FBc0MsY0FBYyxVQUFVLG1DQUFtQyw2QkFBNkIsNkJBQTZCLDhCQUE4Qix5Q0FBeUMsNEJBQTRCLDZCQUE2QixxQkFBcUIsSUFBSSxtRUFBbUUseUJBQXlCLDBCQUEwQixxREFBcUQsVUFBVSw2QkFBNkIsZUFBZSxRQUFRLFdBQVcsNkRBQTZELDBCQUEwQixLQUFLLEVBQUUsa0JBQWtCLHlEQUF5RCxzREFBc0QsdUJBQXVCLDRCQUE0QixlQUFlLE9BQU8sZUFBZSxrQkFBa0IsdURBQXVELEtBQUssbUJBQW1CLElBQUks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QkFBdUIsVUFBVSxRQUFRLHdCQUF3QixVQUFVLGNBQWMsc0NBQXNDLFVBQVUsT0FBTyxvQ0FBb0MsVUFBVSxPQUFPLG9DQUFvQyxVQUFVLGNBQWMsc0NBQXNDLFVBQVUsVUFBVSwwQ0FBMEMsVUFBVSxpQkFBaUIsNENBQTRDLFVBQVUsaUJBQWlCLDRDQUE0QyxVQUFVLGNBQWMsc0NBQXNDLFVBQVUsb0JBQW9CLG9EQUFvRCxnQ0FBZ0MsdUlBQXVJLE1BQU0sNklBQTZJLE1BQU0sbUlBQW1JLEtBQUssOEJBQThCLHFEQUFxRCxNQUFNLHFEQUFxRCxNQUFNLHFEQUFxRCxNQUFNLHFEQUFxRCxNQUFNLHFEQUFxRCxLQUFLLG9DQUFvQyw4REFBOEQsTUFBTSwrREFBK0QsTUFBTSxnRUFBZ0UsTUFBTSwrREFBK0QsS0FBSyx1QkFBdUIsMkJBQTJCLG1EQUFtRCxLQUFLLEVBQUUscUNBQXFDLHNEQUFzRCxxQkFBcUIsT0FBTyxtQ0FBbUMsc0RBQXNELHFCQUFxQixPQUFPLHNDQUFzQyw0REFBNEQsd0JBQXdCLE9BQU8scUNBQXFDLDJEQUEyRCwrQkFBK0IsT0FBTyx3Q0FBd0MsMERBQTBELHdDQUF3QyxPQUFPLDJDQUEyQyxzRUFBc0UsaURBQWlELE9BQU8seUdBQXlHLDBDQUEwQyxzQ0FBc0MsSUFBSSx1QkFBdUIsNjJCQUE2MkIiLCJmaWxlIjoiLi9tZC9ibG9nLzIwMjEtMDFfcmVkdXgtbm9ybWFsaXplZC1zdG9yZS1wYXJ0LTIubWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIi0tLVxcbnRpdGxlOiBcXFwiVXNpbmcgcmVkdXggd2l0aCByZWxhdGlvbmFsIGRhdGEgKDIvMylcXFwiXFxuZXhjZXJwdDogXFxcIkluIHRoaXMgcG9zdCwgSSB3aWxsIHNob3cgeW91IGhvdyB0byBjcmVhdGUgYSBzaW1wbGUgQ2hyb21lIGV4dGVuc2lvbiwgdXNpbmcganVzdCBKYXZhU2NyaXB0LCBIVE1MIGFuZCBDU1MuIEkgd2lsbCBhbHNvIHN1bW1hcml6ZSBhbGwgd2hhdCBhIENocm9tZSBleHRlbnNpb24gY2FuIGRvLCBhbmQgSSB3aWxsIGludHJvZHVjZSBob3cgdG8gY3JlYXRlIG1vcmUgY29tcGxleCBleHRlbnNpb25zIGJhc2VkIG9uIG1vZGVybiBKYXZhU2NyaXB0IGZyYW1ld29ya3MgbGlrZSBSZWFjdCwgQW5ndWxhciBvciBWdWUuXFxcIlxcbnB1Ymxpc2hlZDogdHJ1ZVxcbmRhdGVQdWJsaXNoZWQ6IDE2MTE2NDgwMDAwMDBcXG5kYXRlOiBcXFwiMjAyMS0wMS0yNlQwOTowMDowMC4wMDBaXFxcIlxcbmF1dGhvcjogSnVhbmd1aSBKb3Jkw6FuXFxudGFnczpcXG4gIC0gRGFuIEFicmFtb3ZcXG5hdXRob3JQaG90bzogL2ltZy9hdXRob3JzL2pndWl4LmpwZWdcXG5iYW5uZXJQaG90bzogXFxcIi9pbWcvYmxvZy8yMDIxLTAxX3JlZHV4LW5vcm1hbGl6ZWQtc3RvcmUtcGFydC0yL3JlZHV4LW5vcm1hbGl6ZWQtc3RvcmUtcGFydC0yLmpwZ1xcXCJcXG50aHVtYm5haWxQaG90bzogXFxcIi9pbWcvYmxvZy8yMDIxLTAxX3JlZHV4LW5vcm1hbGl6ZWQtc3RvcmUtcGFydC0yL3JlZHV4LW5vcm1hbGl6ZWQtc3RvcmUtcGFydC0yLmpwZ1xcXCJcXG5jYW5vbmljYWxVcmw6IGh0dHBzOi8vanVhbmd1aWpvcmRhbi5jb20vYmxvZy8yMDIxLTAxX3JlZHV4LW5vcm1hbGl6ZWQtc3RvcmUtcGFydC0yXFxuLS0tXFxuXFxuSW4gdGhpcyBzZXJpZXMgb2YgcG9zdHMgd2Ugd2lsbCBjcmVhdGUgYW4gYXBwbGljYXRpb24gdXNpbmcgKipyZWFjdCoqIGFuZCAqKnJlZHV4KiosIGluIHdoaWNoIHdlIHdpbGwgaGFuZGxlIHJlbGF0aW9uYWwgZGF0YS4gSW4gdGhpcyBzZWNvbmQgcGFydCB3ZSB3aWxsIGJlIGltcGxlbWVudGluZyB0aGUgc3RvcmUuXFxuXFxuV2UgZW5kZWQgdXAgdGhlIGxhc3QgcGFydCBvZiB0aGlzIHNlcmllcyBtb2RlbGxpbmcgdGhlIHN0b3JlLiBDaGVjayBwYXJ0IDEgaWYgeW91IG5lZWQgbW9yZSBjb250ZXh0IG9uIHRoYXQ6IFtVc2luZyByZWR1eCB3aXRoIHJlbGF0aW9uYWwgZGF0YSAoMS8zKV0oaHR0cHM6Ly9ibG9nLm1pbWFjb20uY29tL3JlZHV4LW5vcm1hbGl6ZWQtc3RvcmUtcGFydC0xLykuXFxuXFxuT3VyIHN0b3JlIHdpbGwgaGF2ZSB0d28gbWFpbiByZWR1Y2VycywgdGhlIGBlbnRpdGllc2Agc3RvcmUgYW5kIHRoZSBgdWlgIHN0b3JlLlxcblxcbkxldCdzIHN0YXJ0IGJ5IGNyZWF0aW5nIHRoZSBgZW50aXRpZXNgIHN0b3JlLiBJdCB3aWxsIGhvbGQgMyB0eXBlcyBvZiBkYXRhLCBvciBlbnRpdGllcywgbmFtZWx5Olxcblxcbi0gdXNlclxcbi0gY29tbWVudFxcbi0gcG9zdFxcblxcbkVhY2ggZW50aXR5IHdpbGwgaGF2ZSBhc3NvY2lhdGVkIHR5cGVzLCBhY3Rpb25zIGFuZCByZWR1Y2Vycy4gRm9yIHRoZSBzYWtlIG9mIGVhc3kgY29tcHJlaGVuc2lvbiwgSSdsbCBzaG93IHRoZSB0eXBlcyBhbmQgYWN0aW9ucyBpbiB0aGUgZmlyc3QgcGxhY2UuXFxuXFxuVXNlciB0eXBlczpcXG5cXG5gYGBqYXZhc2NyaXB0XFxuLy8gdXNlci50eXBlcy50c1xcbmV4cG9ydCB0eXBlIFVzZXIgPSB7XFxuICBhdmF0YXI6IHN0cmluZyxcXG4gIGVtYWlsOiBzdHJpbmcsXFxuICBpZDogbnVtYmVyLFxcbiAgbmFtZTogc3RyaW5nLFxcbn07XFxuYGBgXFxuXFxuVGhlIHVzZXIgYWN0aW9ucyB3aWxsIGluY2x1ZGUgYW4gYWN0aW9uIHRvIGxvYWQgYWxsIHVzZXJzIGludG8gdGhlIHN0b3JlLCBhbmQgYW4gYWN0aW9uIHRvIGxvYWQgYSBzaW5nbGUgdXNlci4gVGhlIGZpcnN0IG9uZSB3aWxsIGJlIHBvdGVudGlhbGx5IGNhbGxlZCBmcm9tIHRoZSBgTXkgRnJpZW5kc2AgcGFnZSwgdGhlIHNlY29uZCBvbmUgZnJvbSBgTXkgV2FsbGAgb3IgYEZyaWVuZCBXYWxsYCBwYWdlLCB3aGVyZSBwb3N0cyBhbmQgY29tbWVudHMgd2lsbCBkaXNwbGF5IHRoZSBhc3NvY2lhdGVkIHVzZXIgbmV4dCB0byB0aGVtLlxcblxcbmBgYGphdmFzY3JpcHRcXG4vLyB1c2VyLmFjdGlvbnMudHNcXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyLnR5cGVzJztcXG5cXG5leHBvcnQgZW51bSBVc2VyQWN0aW9uVHlwZXMge1xcbiAgTE9BRF9VU0VSID0gJ1VTRVI6TE9BRF9VU0VSJyxcXG4gIExPQURfVVNFUlMgPSAnVVNFUjpMT0FEX1VTRVJTJyxcXG59XFxuXFxuZXhwb3J0IHR5cGUgTG9hZFVzZXJQYXlsb2FkID0ge1xcbiAgdXNlcjogVXNlcjtcXG59O1xcblxcbmV4cG9ydCB0eXBlIExvYWRVc2VyQWN0aW9uID0ge1xcbiAgdHlwZTogVXNlckFjdGlvblR5cGVzLkxPQURfVVNFUjtcXG4gIHBheWxvYWQ6IExvYWRVc2VyUGF5bG9hZDtcXG59O1xcblxcbmNvbnN0IGxvYWRVc2VyQWN0aW9uID0gKHBheWxvYWQ6IExvYWRVc2VyUGF5bG9hZCk6IExvYWRVc2VyQWN0aW9uID0+IHtcXG4gIHJldHVybiB7XFxuICAgIHBheWxvYWQsXFxuICAgIHR5cGU6IFVzZXJBY3Rpb25UeXBlcy5MT0FEX1VTRVIsXFxuICB9O1xcbn07XFxuXFxuZXhwb3J0IHR5cGUgTG9hZFVzZXJzUGF5bG9hZCA9IHtcXG4gIHVzZXJzOiBVc2VyW107XFxufTtcXG5cXG5leHBvcnQgdHlwZSBMb2FkVXNlcnNBY3Rpb24gPSB7XFxuICB0eXBlOiBVc2VyQWN0aW9uVHlwZXMuTE9BRF9VU0VSUztcXG4gIHBheWxvYWQ6IExvYWRVc2Vyc1BheWxvYWQ7XFxufTtcXG5cXG5jb25zdCBsb2FkVXNlcnNBY3Rpb24gPSAocGF5bG9hZDogTG9hZFVzZXJzUGF5bG9hZCk6IExvYWRVc2Vyc0FjdGlvbiA9PiB7XFxuICByZXR1cm4ge1xcbiAgICBwYXlsb2FkLFxcbiAgICB0eXBlOiBVc2VyQWN0aW9uVHlwZXMuTE9BRF9VU0VSUyxcXG4gIH07XFxufTtcXG5cXG5leHBvcnQgY29uc3QgdXNlckFjdGlvbnMgPSB7XFxuICBsb2FkVXNlckFjdGlvbixcXG4gIGxvYWRVc2Vyc0FjdGlvbixcXG59O1xcbmBgYFxcblxcblNpbWlsYXJseSB3ZSB3aWxsIGhhdmUgYHBvc3RgIHR5cGVzLCB3aGVyZSBlYWNoIHBvc3QgaGFzIGEgYHVzZXJJZGAsIHdoaWNoIGlzIHRoZSB3YXkgdGhhdCBvdXIgZGF0YWJhc2Ugd2lsbCBtYW5hZ2UgdGhlIG9uZS10by1tYW55IHJlbGF0aW9uIChidXQgcmVtZW1iZXIgdGhhdCB3ZSB3aWxsIG1ha2UgdGhpcyBkYXRhIG1vcmUgZWFzaWx5IHNlYXJjaGFibGUgYnkgY3JlYXRpbmcgYSBgcG9zdElkc0J5SWRgIHJlZHVjZXIgaW5zaWRlIHRoZSBgdXNlcnNgIHJlZHVjZXIpOlxcblxcbmBgYGphdmFzY3JpcHRcXG4vLyBwb3N0LnR5cGVzLnRzXFxuZXhwb3J0IHR5cGUgUG9zdCA9IHtcXG4gIGJvZHk6IHN0cmluZyxcXG4gIGRhdGU6IERhdGUsXFxuICBpZDogbnVtYmVyLFxcbiAgdXNlcklkOiBudW1iZXIsXFxufTtcXG5gYGBcXG5cXG5UaGUgYHBvc3RgIGFjdGlvbnMgb25seSBpbmNsdWRlIGFuIGFjdGlvbiB0byBsb2FkIHBvc3RzIGJ5IHVzZXIsIHdpdGggdGhlIGB1c2VySWRgIGJlaW5nIGFuIG9wdGlvbmFsIHBhcmFtZXRlci4gV2Ugd2lsbCBkaXNwYXRjaCB0aGlzIGFjdGlvbiB3aXRoIHRoZSBgdXNlcklkYCBwYXJhbSBpbmZvcm1lZCBmcm9tIHRoZSBgRnJpZW5kIFdhbGxgIHBhZ2UgdG8gZ2V0IGFsbCBoaXMgcG9zdHMuIFdlIHdpbGwgZGlzcGF0Y2ggdGhpcyBhY3Rpb24gd2l0aCB0aGUgYHVzZXJJZGAgcGFyYW0gYHVuZGVmaW5lZGAgZnJvbSBgTXkgV2FsbGAgdG8gZ2V0IGFsbCBwb3N0cyBmcm9tIGFsbCB1c2VycyAodG8gc2ltcGxpZnksIGxldCdzIHNheSB0aGF0IGFsbCB1c2VycyBhcmUgZnJpZW5kcyBvZiBtaW5lKS5cXG5cXG5gYGBqYXZhc2NyaXB0XFxuLy8gcG9zdC5hY3Rpb25zLnRzXFxuaW1wb3J0IHsgUG9zdCB9IGZyb20gJy4vcG9zdC50eXBlcyc7XFxuXFxuZXhwb3J0IGVudW0gUG9zdEFjdGlvblR5cGVzIHtcXG4gIExPQURfUE9TVFMgPSAnUE9TVDpMT0FEX1BPU1RTJyxcXG59XFxuXFxuZXhwb3J0IHR5cGUgTG9hZFBvc3RzUGF5bG9hZCA9IHtcXG4gIHBvc3RzOiBQb3N0W107XFxuICB1c2VySWQ/OiBudW1iZXI7XFxufTtcXG5cXG5leHBvcnQgdHlwZSBMb2FkUG9zdHNBY3Rpb24gPSB7XFxuICB0eXBlOiBQb3N0QWN0aW9uVHlwZXMuTE9BRF9QT1NUUztcXG4gIHBheWxvYWQ6IExvYWRQb3N0c1BheWxvYWQ7XFxufTtcXG5cXG5jb25zdCBsb2FkUG9zdHNBY3Rpb24gPSAocGF5bG9hZDogTG9hZFBvc3RzUGF5bG9hZCk6IExvYWRQb3N0c0FjdGlvbiA9PiB7XFxuICByZXR1cm4ge1xcbiAgICBwYXlsb2FkLFxcbiAgICB0eXBlOiBQb3N0QWN0aW9uVHlwZXMuTE9BRF9QT1NUUyxcXG4gIH07XFxufTtcXG5cXG5leHBvcnQgY29uc3QgcG9zdEFjdGlvbnMgPSB7XFxuICBsb2FkUG9zdHNBY3Rpb24sXFxufTtcXG5gYGBcXG5cXG5BcyBmb3IgdGhlIGBjb21tZW50YCB0eXBlcywgdGhleSB3aWxsIGhvbGQgaW5kZXhlcyBwb2ludGluZyB0byB0aGUgcmVsYXRlZCBgcG9zdGAgYW5kIGB1c2VyYDpcXG5cXG5gYGBqYXZhc2NyaXB0XFxuLy8gY29tbWVudC50eXBlcy50c1xcbmV4cG9ydCB0eXBlIENvbW1lbnQgPSB7XFxuICBib2R5OiBzdHJpbmcsXFxuICBkYXRlOiBEYXRlLFxcbiAgaWQ6IG51bWJlcixcXG4gIHBvc3RJZDogbnVtYmVyLFxcbiAgdXNlcklkOiBudW1iZXIsXFxufTtcXG5gYGBcXG5cXG5UaGUgYGNvbW1lbnRgIGFjdGlvbnMgYWxzbyBpbmNsdWRlIGp1c3Qgb25lIGFjdGlvbiB0byBsb2FkIGNvbW1lbnRzIGJ5IHBvc3Q6XFxuXFxuYGBgamF2YXNjcmlwdFxcbi8vIGNvbW1lbnRzLmFjdGlvbnNcXG5pbXBvcnQgeyBDb21tZW50IH0gZnJvbSAnLi9jb21tZW50LnR5cGVzJztcXG5cXG5leHBvcnQgZW51bSBDb21tZW50QWN0aW9uVHlwZXMge1xcbiAgTE9BRF9DT01NRU5UUyA9ICdDT01NRU5UOkxPQURfQ09NTUVOVFMnLFxcbn1cXG5cXG5leHBvcnQgdHlwZSBMb2FkQ29tbWVudHNQYXlsb2FkID0ge1xcbiAgY29tbWVudHM6IENvbW1lbnRbXTtcXG4gIHBvc3RJZD86IG51bWJlcjtcXG59O1xcblxcbmV4cG9ydCB0eXBlIExvYWRDb21tZW50c0FjdGlvbiA9IHtcXG4gIHR5cGU6IENvbW1lbnRBY3Rpb25UeXBlcy5MT0FEX0NPTU1FTlRTO1xcbiAgcGF5bG9hZDogTG9hZENvbW1lbnRzUGF5bG9hZDtcXG59O1xcblxcbmNvbnN0IGxvYWRDb21tZW50c0FjdGlvbiA9IChwYXlsb2FkOiBMb2FkQ29tbWVudHNQYXlsb2FkKTogTG9hZENvbW1lbnRzQWN0aW9uID0+IHtcXG4gIHJldHVybiB7XFxuICAgIHBheWxvYWQsXFxuICAgIHR5cGU6IENvbW1lbnRBY3Rpb25UeXBlcy5MT0FEX0NPTU1FTlRTLFxcbiAgfTtcXG59O1xcblxcbmV4cG9ydCBjb25zdCBjb21tZW50QWN0aW9ucyA9IHtcXG4gIGxvYWRDb21tZW50c0FjdGlvbixcXG59O1xcbmBgYFxcblxcbk5vdywgbGV0J3MgYWRkcmVzcyB0aGUgcmVkdWNlcnMuIFJlZ2FyZGluZyB0aGUgYHVzZXJgIHJlZHVjZXIsIGl0IHdpbGwgYmUgY3JlYXRlZCBieSBjb21iaW5pbmcgdHdvIHJlZHVjZXJzLiBUaGUgZmlyc3Qgb25lIHdpbGwgdGFrZSB0aGUgYExvYWRVc2Vyc0FjdGlvbmAgYWN0aW9uIGFuZCBzdG9yZSBhIG1hcCBvZiB1c2VycyBieSBgaWRgLiBJdCB3aWxsIGFsc28gcHJvY2VzcyB0aGUgYExvYWRVc2VyQWN0aW9uYCBhbmQgc3RvcmUgdGhlIHVzZXIgaW4gdGhlIG1hcC4gVGhlIHNlY29uZCBvbmUgd2lsbCB0YWtlIHRoZSBgTG9hZFBvc3RzQWN0aW9uYCBhbmQgc3RvcmUgYSBtYXAgb2YgYHBvc3RJZHNgIHJlbGF0ZWQgdG8gYSB1c2VyLlxcblxcbmBgYGphdmFzY3JpcHRcXG4vLyB1c2VyLnJlZHVjZXIudHNcXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi91c2VyLnR5cGVzJztcXG5pbXBvcnQgeyBVc2VyQWN0aW9uVHlwZXMsIExvYWRVc2Vyc0FjdGlvbiwgTG9hZFVzZXJBY3Rpb24gfSBmcm9tICcuL3VzZXIuYWN0aW9ucyc7XFxuaW1wb3J0IHsgTnVtYmVySW5kZXhlZCB9IGZyb20gJy4uL3NoYXJlZC9zaGFyZWQudHlwZXMnO1xcbmltcG9ydCB7IEFueUFjdGlvbiwgY29tYmluZVJlZHVjZXJzLCBSZWR1Y2VyIH0gZnJvbSAncmVkdXgnO1xcbmltcG9ydCB7IExvYWRQb3N0c0FjdGlvbiwgUG9zdEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vcG9zdC9wb3N0LmFjdGlvbnMnO1xcblxcbmV4cG9ydCB0eXBlIFVzZXJTdGF0ZSA9IHtcXG4gIGJ5SWQ6IE51bWJlckluZGV4ZWQ8VXNlcj47XFxuICBwb3N0SWRzQnlJZDogTnVtYmVySW5kZXhlZDxudW1iZXJbXT47IC8vIG9uZS10by1tYW55IHJlbGF0aW9uXFxufTtcXG5cXG5leHBvcnQgdHlwZSBVc2VyU3RvcmUgPSB7XFxuICB1c2VyczogVXNlclN0YXRlO1xcbn07XFxuXFxuZXhwb3J0IGNvbnN0IHVzZXJCeUlkUmVkdWNlciA9IChzdGF0ZTogTnVtYmVySW5kZXhlZDxVc2VyPiA9IHt9LCBhY3Rpb246IEFueUFjdGlvbikgPT4ge1xcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xcbiAgICBjYXNlIFVzZXJBY3Rpb25UeXBlcy5MT0FEX1VTRVJTOlxcbiAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gYWN0aW9uIGFzIExvYWRVc2Vyc0FjdGlvbjtcXG4gICAgICBjb25zdCB7IHVzZXJzIH0gPSBwYXlsb2FkO1xcbiAgICAgIGNvbnN0IGxvYWRlZFVzZXJzTWFwID0gdXNlcnMucmVkdWNlKChtYXAsIHVzZXIpID0+ICh7IC4uLm1hcCwgW3VzZXIuaWRdOiB1c2VyIH0pLCB7fSk7XFxuXFxuICAgICAgcmV0dXJuIHtcXG4gICAgICAgIC4uLnN0YXRlLFxcbiAgICAgICAgLi4ubG9hZGVkVXNlcnNNYXAsXFxuICAgICAgfTtcXG5cXG4gICAgY2FzZSBVc2VyQWN0aW9uVHlwZXMuTE9BRF9VU0VSOlxcbiAgICAgIGNvbnN0IHsgcGF5bG9hZDogdXNlclBheWxvYWQgfSA9IGFjdGlvbiBhcyBMb2FkVXNlckFjdGlvbjtcXG4gICAgICBjb25zdCB7IHVzZXIgfSA9IHVzZXJQYXlsb2FkO1xcblxcbiAgICAgIHJldHVybiB7XFxuICAgICAgICAuLi5zdGF0ZSxcXG4gICAgICAgIFt1c2VyLmlkXTogdXNlcixcXG4gICAgICB9O1xcbiAgfVxcblxcbiAgcmV0dXJuIHN0YXRlO1xcbn07XFxuXFxuZXhwb3J0IGNvbnN0IHBvc3RJZHNCeUlkUmVkdWNlciA9IChzdGF0ZTogTnVtYmVySW5kZXhlZDxudW1iZXJbXT4gPSB7fSwgYWN0aW9uOiBBbnlBY3Rpb24pID0+IHtcXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcXG4gICAgY2FzZSBQb3N0QWN0aW9uVHlwZXMuTE9BRF9QT1NUUzpcXG4gICAgICBjb25zdCB7IHBheWxvYWQgfSA9IGFjdGlvbiBhcyBMb2FkUG9zdHNBY3Rpb247XFxuICAgICAgY29uc3QgeyBwb3N0cywgdXNlcklkIH0gPSBwYXlsb2FkO1xcbiAgICAgIGxldCBsb2FkZWRQb3N0SWRzQnlVc2VySWRNYXAgPSBwb3N0cy5yZWR1Y2UoXFxuICAgICAgICAocG9zdElkc0J5VXNlcklkTWFwLCBwb3N0KSA9PiAoe1xcbiAgICAgICAgICAuLi5wb3N0SWRzQnlVc2VySWRNYXAsXFxuICAgICAgICAgIFtwb3N0LnVzZXJJZF06IHBvc3RJZHNCeVVzZXJJZE1hcFtwb3N0LnVzZXJJZF0gPyBbLi4ucG9zdElkc0J5VXNlcklkTWFwW3Bvc3QudXNlcklkXSwgcG9zdC5pZF0gOiBbcG9zdC5pZF0sXFxuICAgICAgICB9KSxcXG4gICAgICAgIHt9IGFzIE51bWJlckluZGV4ZWQ8bnVtYmVyW10+XFxuICAgICAgKTtcXG4gICAgICBpZiAocG9zdHMubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICBsb2FkZWRQb3N0SWRzQnlVc2VySWRNYXAgPSB7IFt1c2VySWQgYXMgbnVtYmVyXTogW10gfTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHtcXG4gICAgICAgIC4uLnN0YXRlLFxcbiAgICAgICAgLi4ubG9hZGVkUG9zdElkc0J5VXNlcklkTWFwLFxcbiAgICAgIH07XFxuICB9XFxuXFxuICByZXR1cm4gc3RhdGU7XFxufTtcXG5cXG5leHBvcnQgY29uc3QgdXNlclJlZHVjZXI6IFJlZHVjZXI8VXNlclN0YXRlPiA9IGNvbWJpbmVSZWR1Y2Vycyh7XFxuICBieUlkOiB1c2VyQnlJZFJlZHVjZXIsXFxuICBwb3N0SWRzQnlJZDogcG9zdElkc0J5SWRSZWR1Y2VyLFxcbn0pO1xcbmBgYFxcblxcblRoZSBgTnVtYmVySW5kZXhlZGAgY3VzdG9tIHR5cGUgaXMgZGVmaW5lZCBhcyBmb2xsb3dzLCBpbiBhIHNoYXJlZCBmaWxlIHdoZXJlIHdlIGFsc28gZGVmaW5lIHRoZSB0eXBlcyBmb3IgdGhlIGZpbHRlcnMuIFRoaXMgdHlwZSBhbGxvd3MgdXMgdG8gdHlwZSBtYXBzIHdpdGggbnVtYmVycyBhcyBpbmRleCB1c2VkIGJ5IHRoZSByZWR1Y2VycyBhYm92ZS5cXG5cXG5gYGBqYXZhc2NyaXB0XFxuLy8gc2hhcmVkLnR5cGVzLnRzXFxuZXhwb3J0IHR5cGUgTnVtYmVySW5kZXhlZDxUPiA9IHsgW2luZGV4OiBudW1iZXJdOiBUIH07XFxuZXhwb3J0IHR5cGUgU3RyaW5nSW5kZXhlZDxUPiA9IHsgW2luZGV4OiBzdHJpbmddOiBUIH07XFxuZXhwb3J0IHR5cGUgT3JkZXJUeXBlID0gXFxcImFzY1xcXCIgfCBcXFwiZGVzY1xcXCI7XFxuYGBgXFxuXFxuU2ltaWxhcmx5LCB0aGUgYHBvc3RgIHJlZHVjZXIgaGFzIGEgcmVkdWNlciByZWxhdGVkIHRvIHRoZSBgTG9hZFBvc3RgIGFjdGlvbiBhbnMgYSByZWR1Y2VyIHRha2luZyBjYXJlIG9mIHRoZSBgTG9hZENvbW1lbnRzQWN0aW9uYC5cXG5cXG5gYGBqYXZhc2NyaXB0XFxuLy8gcG9zdC5yZWR1Y2VyLnRzXFxuaW1wb3J0IHsgUG9zdCB9IGZyb20gJy4vcG9zdC50eXBlcyc7XFxuaW1wb3J0IHsgUG9zdEFjdGlvblR5cGVzLCBMb2FkUG9zdHNBY3Rpb24gfSBmcm9tICcuL3Bvc3QuYWN0aW9ucyc7XFxuaW1wb3J0IHsgTnVtYmVySW5kZXhlZCB9IGZyb20gJy4uL3NoYXJlZC9zaGFyZWQudHlwZXMnO1xcbmltcG9ydCB7IEFueUFjdGlvbiwgY29tYmluZVJlZHVjZXJzLCBSZWR1Y2VyIH0gZnJvbSAncmVkdXgnO1xcbmltcG9ydCB7IENvbW1lbnRBY3Rpb25UeXBlcywgTG9hZENvbW1lbnRzQWN0aW9uIH0gZnJvbSAnLi4vY29tbWVudC9jb21tZW50LmFjdGlvbnMnO1xcblxcbmV4cG9ydCB0eXBlIFBvc3RTdGF0ZSA9IHtcXG4gIGJ5SWQ6IE51bWJlckluZGV4ZWQ8UG9zdD47XFxuICBjb21tZW50SWRzQnlJZDogTnVtYmVySW5kZXhlZDxudW1iZXJbXT47IC8vIG9uZS10by1tYW55IHJlbGF0aW9uXFxufTtcXG5cXG5leHBvcnQgdHlwZSBQb3N0U3RvcmUgPSB7XFxuICBwb3N0czogUG9zdFN0YXRlO1xcbn07XFxuXFxuZXhwb3J0IGNvbnN0IHBvc3RCeUlkUmVkdWNlciA9IChzdGF0ZTogTnVtYmVySW5kZXhlZDxQb3N0PiA9IHt9LCBhY3Rpb246IEFueUFjdGlvbikgPT4ge1xcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xcbiAgICBjYXNlIFBvc3RBY3Rpb25UeXBlcy5MT0FEX1BPU1RTOlxcbiAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gYWN0aW9uIGFzIExvYWRQb3N0c0FjdGlvbjtcXG4gICAgICBjb25zdCB7IHBvc3RzIH0gPSBwYXlsb2FkO1xcbiAgICAgIGNvbnN0IGxvYWRlZFBvc3RzTWFwID0gcG9zdHMucmVkdWNlKChtYXAsIHBvc3QpID0+ICh7IC4uLm1hcCwgW3Bvc3QuaWRdOiBwb3N0IH0pLCB7fSk7XFxuXFxuICAgICAgcmV0dXJuIHtcXG4gICAgICAgIC4uLnN0YXRlLFxcbiAgICAgICAgLi4ubG9hZGVkUG9zdHNNYXAsXFxuICAgICAgfTtcXG4gIH1cXG5cXG4gIHJldHVybiBzdGF0ZTtcXG59O1xcblxcbmV4cG9ydCBjb25zdCBjb21tZW50SWRzQnlJZFJlZHVjZXIgPSAoc3RhdGU6IE51bWJlckluZGV4ZWQ8bnVtYmVyW10+ID0ge30sIGFjdGlvbjogQW55QWN0aW9uKSA9PiB7XFxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XFxuICAgIGNhc2UgQ29tbWVudEFjdGlvblR5cGVzLkxPQURfQ09NTUVOVFM6XFxuICAgICAgY29uc3QgeyBwYXlsb2FkIH0gPSBhY3Rpb24gYXMgTG9hZENvbW1lbnRzQWN0aW9uO1xcbiAgICAgIGNvbnN0IHsgY29tbWVudHMsIHBvc3RJZCB9ID0gcGF5bG9hZDtcXG4gICAgICBsZXQgbG9hZGVkQ29tbWVudElkc0J5UG9zdElkTWFwID0gY29tbWVudHMucmVkdWNlKFxcbiAgICAgICAgKGNvbW1lbnRJZHNCeVBvc3RJZE1hcCwgY29tbWVudCkgPT4gKHtcXG4gICAgICAgICAgLi4uY29tbWVudElkc0J5UG9zdElkTWFwLFxcbiAgICAgICAgICBbY29tbWVudC5wb3N0SWRdOiBjb21tZW50SWRzQnlQb3N0SWRNYXBbY29tbWVudC5wb3N0SWRdXFxuICAgICAgICAgICAgPyBbLi4uY29tbWVudElkc0J5UG9zdElkTWFwW2NvbW1lbnQucG9zdElkXSwgY29tbWVudC5pZF1cXG4gICAgICAgICAgICA6IFtjb21tZW50LmlkXSxcXG4gICAgICAgIH0pLFxcbiAgICAgICAge30gYXMgTnVtYmVySW5kZXhlZDxudW1iZXJbXT5cXG4gICAgICApO1xcbiAgICAgIGlmIChjb21tZW50cy5sZW5ndGggPT09IDApIHtcXG4gICAgICAgIGxvYWRlZENvbW1lbnRJZHNCeVBvc3RJZE1hcCA9IHsgW3Bvc3RJZCBhcyBudW1iZXJdOiBbXSB9O1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4ge1xcbiAgICAgICAgLi4uc3RhdGUsXFxuICAgICAgICAuLi5sb2FkZWRDb21tZW50SWRzQnlQb3N0SWRNYXAsXFxuICAgICAgfTtcXG4gIH1cXG5cXG4gIHJldHVybiBzdGF0ZTtcXG59O1xcblxcbmV4cG9ydCBjb25zdCBwb3N0UmVkdWNlcjogUmVkdWNlcjxQb3N0U3RhdGU+ID0gY29tYmluZVJlZHVjZXJzKHtcXG4gIGJ5SWQ6IHBvc3RCeUlkUmVkdWNlcixcXG4gIGNvbW1lbnRJZHNCeUlkOiBjb21tZW50SWRzQnlJZFJlZHVjZXIsXFxufSk7XFxuYGBgXFxuXFxuVGhlIGBjb21tZW50YCByZWR1Y2VyIGlzIG1vcmUgc2ltcGxlLCB0YWtpbmcgY2FyZSBqdXN0IG9mIHRoZSBgTG9hZENvbW1lbnRzYCBhY3Rpb24uXFxuXFxuYGBgamF2YXNjcmlwdFxcbi8vIGNvbW1lbnQucmVkdWNlci50c1xcbmltcG9ydCB7IENvbW1lbnQgfSBmcm9tICcuL2NvbW1lbnQudHlwZXMnO1xcbmltcG9ydCB7IENvbW1lbnRBY3Rpb25UeXBlcywgTG9hZENvbW1lbnRzQWN0aW9uIH0gZnJvbSAnLi9jb21tZW50LmFjdGlvbnMnO1xcbmltcG9ydCB7IE51bWJlckluZGV4ZWQgfSBmcm9tICcuLi9zaGFyZWQvc2hhcmVkLnR5cGVzJztcXG5pbXBvcnQgeyBBbnlBY3Rpb24sIGNvbWJpbmVSZWR1Y2VycywgUmVkdWNlciB9IGZyb20gJ3JlZHV4JztcXG5cXG5leHBvcnQgdHlwZSBDb21tZW50U3RhdGUgPSB7XFxuICBieUlkOiBOdW1iZXJJbmRleGVkPENvbW1lbnQ+O1xcbn07XFxuXFxuZXhwb3J0IHR5cGUgQ29tbWVudFN0b3JlID0ge1xcbiAgY29tbWVudHM6IENvbW1lbnRTdGF0ZTtcXG59O1xcblxcbmV4cG9ydCBjb25zdCBjb21tZW50QnlJZFJlZHVjZXIgPSAoc3RhdGU6IE51bWJlckluZGV4ZWQ8Q29tbWVudD4gPSB7fSwgYWN0aW9uOiBBbnlBY3Rpb24pID0+IHtcXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcXG4gICAgY2FzZSBDb21tZW50QWN0aW9uVHlwZXMuTE9BRF9DT01NRU5UUzpcXG4gICAgICBjb25zdCB7IHBheWxvYWQgfSA9IGFjdGlvbiBhcyBMb2FkQ29tbWVudHNBY3Rpb247XFxuICAgICAgY29uc3QgeyBjb21tZW50cyB9ID0gcGF5bG9hZDtcXG4gICAgICBjb25zdCBsb2FkZWRDb21tZW50c01hcCA9IGNvbW1lbnRzLnJlZHVjZSgobWFwLCBjb21tZW50KSA9PiAoeyAuLi5tYXAsIFtjb21tZW50LmlkXTogY29tbWVudCB9KSwge30pO1xcblxcbiAgICAgIHJldHVybiB7XFxuICAgICAgICAuLi5zdGF0ZSxcXG4gICAgICAgIC4uLmxvYWRlZENvbW1lbnRzTWFwLFxcbiAgICAgIH07XFxuICB9XFxuXFxuICByZXR1cm4gc3RhdGU7XFxufTtcXG5cXG5leHBvcnQgY29uc3QgY29tbWVudFJlZHVjZXI6IFJlZHVjZXI8Q29tbWVudFN0YXRlPiA9IGNvbWJpbmVSZWR1Y2Vycyh7XFxuICBieUlkOiBjb21tZW50QnlJZFJlZHVjZXIsXFxufSk7XFxuYGBgXFxuXFxuTmV4dCwgd2Ugd2lsbCBpbXBsZW1lbnQgdGhlIGB1aWAgc3RvcmUuIEl0IHdpbGwgaG9sZCBkYXRhIGZvciBgTXkgV2FsbGAsIGBGcmllbmQgV2FsbGAgYW5kIGBGcmllbmRzYCBwYWdlLlxcblxcbmBNeSB3YWxsYCB3aWxsIG5vdCBob2xkIGN1c3RvbSB0eXBlcywganVzdCBpbmRleGVzIHRvIHRoZSBgcG9zdGAgZW50aXRpZXMgYmVsb25naW5nIHRvIHRoZSB1c2VyIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIHBhZ2UuIFRoZSBhY3Rpb25zIHdpbGwgaW5jbHVkZSBhbiBhY3Rpb24gdG8gbG9hZCB3YWxsIHBvc3RzLlxcblxcbmBgYGphdmFzY3JpcHRcXG4vLyB3YWxsLmFjdGlvbnMudHNcXG5leHBvcnQgZW51bSBXYWxsQWN0aW9uVHlwZXMge1xcbiAgTE9BRF9QT1NUUyA9ICdXQUxMOkxPQURfUE9TVFMnLFxcbn1cXG5cXG5leHBvcnQgdHlwZSBMb2FkV2FsbFBvc3RzUGF5bG9hZCA9IHtcXG4gIHBvc3RJZHM6IG51bWJlcltdO1xcbn07XFxuXFxuZXhwb3J0IHR5cGUgTG9hZFdhbGxQb3N0c0FjdGlvbiA9IHtcXG4gIHR5cGU6IFdhbGxBY3Rpb25UeXBlcy5MT0FEX1BPU1RTO1xcbiAgcGF5bG9hZDogTG9hZFdhbGxQb3N0c1BheWxvYWQ7XFxufTtcXG5cXG5jb25zdCBsb2FkV2FsbFBvc3RzQWN0aW9uID0gKHBheWxvYWQ6IExvYWRXYWxsUG9zdHNQYXlsb2FkKTogTG9hZFdhbGxQb3N0c0FjdGlvbiA9PiB7XFxuICByZXR1cm4ge1xcbiAgICBwYXlsb2FkLFxcbiAgICB0eXBlOiBXYWxsQWN0aW9uVHlwZXMuTE9BRF9QT1NUUyxcXG4gIH07XFxufTtcXG5cXG5leHBvcnQgY29uc3Qgd2FsbEFjdGlvbnMgPSB7XFxuICBsb2FkV2FsbFBvc3RzQWN0aW9uLFxcbn07XFxuYGBgXFxuXFxuVGhlIHJlZHVjZXIgd2lsbCBiZSBzaW1wbGUsIGp1c3QgdGFraW5nIGNhcmUgb2YgdGhhdCBhY3Rpb24uXFxuXFxuYGBgamF2YXNjcmlwdFxcbi8vIHdhbGwucmVkdWNlci50c1xcbmltcG9ydCB7IEFueUFjdGlvbiwgY29tYmluZVJlZHVjZXJzLCBSZWR1Y2VyIH0gZnJvbSAncmVkdXgnO1xcbmltcG9ydCB7IExvYWRXYWxsUG9zdHNBY3Rpb24sIFdhbGxBY3Rpb25UeXBlcyB9IGZyb20gJy4vd2FsbC5hY3Rpb25zJztcXG5cXG5leHBvcnQgdHlwZSBXYWxsU3RhdGUgPSB7XFxuICBwb3N0SWRzOiBudW1iZXJbXTtcXG59O1xcblxcbmV4cG9ydCB0eXBlIFdhbGxTdG9yZSA9IHtcXG4gIHdhbGw6IFdhbGxTdGF0ZTtcXG59O1xcblxcbmV4cG9ydCBjb25zdCBwb3N0SWRzUmVkdWNlciA9IChzdGF0ZTogbnVtYmVyW10gPSBbXSwgYWN0aW9uOiBBbnlBY3Rpb24pID0+IHtcXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcXG4gICAgY2FzZSBXYWxsQWN0aW9uVHlwZXMuTE9BRF9QT1NUUzpcXG4gICAgICBjb25zdCB7IHBheWxvYWQgfSA9IGFjdGlvbiBhcyBMb2FkV2FsbFBvc3RzQWN0aW9uO1xcbiAgICAgIGNvbnN0IHsgcG9zdElkcyB9ID0gcGF5bG9hZDtcXG4gICAgICByZXR1cm4gWy4uLnN0YXRlLCAuLi5wb3N0SWRzXTtcXG4gIH1cXG5cXG4gIHJldHVybiBzdGF0ZTtcXG59O1xcblxcbmV4cG9ydCBjb25zdCB3YWxsUmVkdWNlcjogUmVkdWNlcjxXYWxsU3RhdGU+ID0gY29tYmluZVJlZHVjZXJzKHtcXG4gIHBvc3RJZHM6IHBvc3RJZHNSZWR1Y2VyLFxcbn0pO1xcbmBgYFxcblxcbldlIHdpbGwgb21taXQgdGhlIGNvZGUgZm9yIHRoZSBhY3Rpb25zIGFuZCByZWR1Y2VycyBhc3NvY2lhdGVkIHRvIHRoZSBgRnJpZW5kIFdhbGxgLCB3aGljaCBhcmUgdmVyeSBzaW1pbGFyIHRvIHRoZSBvbmVzIGZvciBgTXkgV2FsbGAuIFlvdSBjYW4gY2hlY2sgdGhlIFtnaXQgcmVwb3NpdG9yeSBicmFuY2hdKGh0dHBzOi8vZ2l0aHViLmNvbS9qZ3VpeC9yZWR1eC1ub3JtYWxpemVkLWV4YW1wbGUvdHJlZS9ibG9ncG9zdC1wYXJ0MikgZm9yIHRoaXMgcG9zdCBpZiB5b3Ugd2FudCBhbGwgdGhlIHNvdXJjZSBjb2RlLlxcblxcblRoZSBgRnJpZW5kc2AgYWN0aW9ucyB3aWxsIGluY2x1ZGUgbG9hZGluZyBmcmllbmRzIGFuZCBzZXR0aW5nIHRoZSBmcmllbmRzIGxpc3Qgb3JkZXIgKGFzY2VuZGluZyBvciBkZXNjZW5kaW5nKS5cXG5cXG5gYGBqYXZhc2NyaXB0XFxuLy8gZnJpZW5kcy5hY3Rpb25zLnRzXFxuaW1wb3J0IHsgT3JkZXJUeXBlIH0gZnJvbSAnLi4vc2hhcmVkL3NoYXJlZC50eXBlcyc7XFxuXFxuZXhwb3J0IGVudW0gRnJpZW5kc0FjdGlvblR5cGVzIHtcXG4gIExPQURfRlJJRU5EUyA9ICdGUklFTkRTOkxPQURfRlJJRU5EUycsXFxuICBTRVRfRlJJRU5EU19PUkRFUiA9ICdGUklFTkRTOlNFVF9GUklFTkRTX09SREVSJyxcXG59XFxuXFxuZXhwb3J0IHR5cGUgTG9hZEZyaWVuZHNQYXlsb2FkID0ge1xcbiAgdXNlcklkczogbnVtYmVyW107XFxufTtcXG5cXG5leHBvcnQgdHlwZSBMb2FkRnJpZW5kc0FjdGlvbiA9IHtcXG4gIHR5cGU6IEZyaWVuZHNBY3Rpb25UeXBlcy5MT0FEX0ZSSUVORFM7XFxuICBwYXlsb2FkOiBMb2FkRnJpZW5kc1BheWxvYWQ7XFxufTtcXG5cXG5jb25zdCBsb2FkRnJpZW5kc0FjdGlvbiA9IChwYXlsb2FkOiBMb2FkRnJpZW5kc1BheWxvYWQpOiBMb2FkRnJpZW5kc0FjdGlvbiA9PiB7XFxuICByZXR1cm4ge1xcbiAgICBwYXlsb2FkLFxcbiAgICB0eXBlOiBGcmllbmRzQWN0aW9uVHlwZXMuTE9BRF9GUklFTkRTLFxcbiAgfTtcXG59O1xcblxcbmV4cG9ydCB0eXBlIFNldEZyaWVuZHNPcmRlclBheWxvYWQgPSB7XFxuICBvcmRlcjogT3JkZXJUeXBlO1xcbn07XFxuXFxuZXhwb3J0IHR5cGUgU2V0RnJpZW5kc09yZGVyQWN0aW9uID0ge1xcbiAgdHlwZTogRnJpZW5kc0FjdGlvblR5cGVzLlNFVF9GUklFTkRTX09SREVSO1xcbiAgcGF5bG9hZDogU2V0RnJpZW5kc09yZGVyUGF5bG9hZDtcXG59O1xcblxcbmNvbnN0IHNldEZyaWVuZHNPcmRlckFjdGlvbiA9IChwYXlsb2FkOiBTZXRGcmllbmRzT3JkZXJQYXlsb2FkKTogU2V0RnJpZW5kc09yZGVyQWN0aW9uID0+IHtcXG4gIHJldHVybiB7XFxuICAgIHBheWxvYWQsXFxuICAgIHR5cGU6IEZyaWVuZHNBY3Rpb25UeXBlcy5TRVRfRlJJRU5EU19PUkRFUixcXG4gIH07XFxufTtcXG5cXG5leHBvcnQgY29uc3QgZnJpZW5kc0FjdGlvbnMgPSB7XFxuICBsb2FkRnJpZW5kc0FjdGlvbixcXG4gIHNldEZyaWVuZHNPcmRlckFjdGlvbixcXG59O1xcbmBgYFxcblxcblRoZSBgZnJpZW5kc2AgcmVkdWNlciB3aWxsIGhhdmUgcmVkdWNlcnMgdGhhdCBqdXN0IHBvaW50IHRvIGB1c2VyYCBlbnRpdGllcy4gV2Ugd2lsbCBoYXZlIG9uZSBmb3IgdGhlIGFzY2VuZGluZyBvcmRlciBsaXN0IGFuZCBvbmUgZm9yIHRoZSBkZXNjZW5kaW5nIG9yZGVyIGxpc3QsIGJlY2F1c2Ugd2Ugd2lsbCBpbXBsZW1lbnQgYSBwYWdpbmF0aW9uIHN0cmF0ZWd5IHdpdGggdGhlIGJhY2tlbmQgKHdlIHdpbGwgdGFsayBhYm91dCB0aGF0IG9uIHRoZSBuZXh0IHBvc3Qgb2YgdGhlIHNlcmllcykuIEFub3RoZXIgcmVkdWNlciB3aWxsIHN0b3JlIHRoZSBzdGF0ZSBvZiB0aGUgZmlsdGVyLlxcblxcbmBgYGphdmFzY3JpcHRcXG4vLyBmcmllbmRzLnJlZHVjZXIudHNcXG5pbXBvcnQgeyBBbnlBY3Rpb24sIGNvbWJpbmVSZWR1Y2VycywgUmVkdWNlciB9IGZyb20gJ3JlZHV4JztcXG5pbXBvcnQgeyBGcmllbmRzQWN0aW9uVHlwZXMsIExvYWRGcmllbmRzQWN0aW9uLCBTZXRGcmllbmRzT3JkZXJBY3Rpb24gfSBmcm9tICcuL2ZyaWVuZHMuYWN0aW9ucyc7XFxuXFxuZXhwb3J0IHR5cGUgRnJpZW5kc1N0YXRlID0ge1xcbiAgb3JkZXJGaWx0ZXI6ICdhc2MnIHwgJ2Rlc2MnO1xcbiAgdXNlcklkczogbnVtYmVyW107XFxufTtcXG5cXG5leHBvcnQgdHlwZSBGcmllbmRzU3RvcmUgPSB7XFxuICBmcmllbmRzOiBGcmllbmRzU3RhdGU7XFxufTtcXG5cXG5leHBvcnQgY29uc3Qgb3JkZXJGaWx0ZXJSZWR1Y2VyID0gKHN0YXRlOiAnYXNjJyB8ICdkZXNjJyA9ICdhc2MnLCBhY3Rpb246IEFueUFjdGlvbikgPT4ge1xcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xcbiAgICBjYXNlIEZyaWVuZHNBY3Rpb25UeXBlcy5TRVRfRlJJRU5EU19PUkRFUjpcXG4gICAgICBjb25zdCB7IHBheWxvYWQgfSA9IGFjdGlvbiBhcyBTZXRGcmllbmRzT3JkZXJBY3Rpb247XFxuICAgICAgY29uc3QgeyBvcmRlciB9ID0gcGF5bG9hZDtcXG4gICAgICByZXR1cm4gb3JkZXI7XFxuICB9XFxuXFxuICByZXR1cm4gc3RhdGU7XFxufTtcXG5cXG5leHBvcnQgY29uc3QgdXNlcklkc1JlZHVjZXIgPSAoc3RhdGU6IG51bWJlcltdID0gW10sIGFjdGlvbjogQW55QWN0aW9uKSA9PiB7XFxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XFxuICAgIGNhc2UgRnJpZW5kc0FjdGlvblR5cGVzLkxPQURfRlJJRU5EUzpcXG4gICAgICBjb25zdCB7IHBheWxvYWQgfSA9IGFjdGlvbiBhcyBMb2FkRnJpZW5kc0FjdGlvbjtcXG4gICAgICBjb25zdCB7IHVzZXJJZHMgfSA9IHBheWxvYWQ7XFxuICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgLi4udXNlcklkc107XFxuXFxuICAgIGNhc2UgRnJpZW5kc0FjdGlvblR5cGVzLlNFVF9GUklFTkRTX09SREVSOlxcbiAgICAgIHJldHVybiBbXTtcXG4gIH1cXG5cXG4gIHJldHVybiBzdGF0ZTtcXG59O1xcblxcbmV4cG9ydCBjb25zdCBmcmllbmRzUmVkdWNlcjogUmVkdWNlcjxGcmllbmRzU3RhdGU+ID0gY29tYmluZVJlZHVjZXJzKHtcXG4gIG9yZGVyRmlsdGVyOiBvcmRlckZpbHRlclJlZHVjZXIsXFxuICB1c2VySWRzOiB1c2VySWRzUmVkdWNlcixcXG59KTtcXG5gYGBcXG5cXG5UbyBjcmVhdGUgdGhlIHN0b3JlLCB3ZSB3aWxsIGZpcnN0IGluc3RhbGwgdGhlIFtyZWR1eC1kZXZ0b29scy1leHRlbnNpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS96YWxtb3hpc3VzL3JlZHV4LWRldnRvb2xzLWV4dGVuc2lvbikuIFdpdGggdGhpcyB0b29scyB3ZSB3aWxsIGJlIGFibGUgdG8gZGVidWcgdGhlIGRpc3BhdGNoaW5nIG9mIGFjdGlvbnMgYW5kIHRoZSBjaGFuZ2VzIGluIHRoZSBzdGF0ZSBvZiB0aGUgc3RvcmUuXFxuXFxuYGBgXFxueWFybiBhZGQgcmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uXFxuYGBgXFxuXFxuVGhlIGByb290YCBzdG9yZSBpcyBjb21wb3NlZCBvZiB0aGUgYGVudGl0aWVzYCBzdG9yZSBhbmQgYHVpYCBzdG9yZSBhcyBmb2xsb3dzOlxcblxcbmBgYGphdmFzY3JpcHRcXG4vLyBzdG9yZS50c1xcbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycywgY3JlYXRlU3RvcmUsIFJlZHVjZXIgfSBmcm9tIFxcXCJyZWR1eFxcXCI7XFxuaW1wb3J0IHsgdXNlclJlZHVjZXIsIFVzZXJTdG9yZSB9IGZyb20gXFxcIi4uL21vZHVsZXMvdXNlci91c2VyLnJlZHVjZXJcXFwiO1xcbmltcG9ydCB7XFxuICBjb21tZW50UmVkdWNlcixcXG4gIENvbW1lbnRTdG9yZSxcXG59IGZyb20gXFxcIi4uL21vZHVsZXMvY29tbWVudC9jb21tZW50LnJlZHVjZXJcXFwiO1xcbmltcG9ydCB7IHBvc3RSZWR1Y2VyLCBQb3N0U3RvcmUgfSBmcm9tIFxcXCIuLi9tb2R1bGVzL3Bvc3QvcG9zdC5yZWR1Y2VyXFxcIjtcXG5pbXBvcnQge1xcbiAgZnJpZW5kc1JlZHVjZXIsXFxuICBGcmllbmRzU3RvcmUsXFxufSBmcm9tIFxcXCIuLi9tb2R1bGVzL2ZyaWVuZHMvZnJpZW5kcy5yZWR1Y2VyXFxcIjtcXG5pbXBvcnQge1xcbiAgRnJpZW5kV2FsbFN0b3JlLFxcbiAgZnJpZW5kV2FsbFJlZHVjZXIsXFxufSBmcm9tIFxcXCIuLi9tb2R1bGVzL2ZyaWVuZC13YWxsL2ZyaWVuZC13YWxsLnJlZHVjZXJcXFwiO1xcbmltcG9ydCB7IHdhbGxSZWR1Y2VyLCBXYWxsU3RvcmUgfSBmcm9tIFxcXCIuLi9tb2R1bGVzL3dhbGwvd2FsbC5yZWR1Y2VyXFxcIjtcXG5pbXBvcnQgeyBjb21wb3NlV2l0aERldlRvb2xzIH0gZnJvbSBcXFwicmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uXFxcIjtcXG5cXG5leHBvcnQgdHlwZSBFbnRpdGllc1N0b3JlID0gQ29tbWVudFN0b3JlICYgUG9zdFN0b3JlICYgVXNlclN0b3JlO1xcblxcbmV4cG9ydCB0eXBlIFVJU3RvcmUgPSBGcmllbmRzU3RvcmUgJiBGcmllbmRXYWxsU3RvcmUgJiBXYWxsU3RvcmU7XFxuXFxuZXhwb3J0IHR5cGUgQXBwbGljYXRpb25TdG9yZSA9IHtcXG4gIGVudGl0aWVzOiBFbnRpdGllc1N0b3JlLFxcbiAgdWk6IFVJU3RvcmUsXFxufTtcXG5cXG5leHBvcnQgY29uc3QgZW50aXRpZXNSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcXG4gIGNvbW1lbnRzOiBjb21tZW50UmVkdWNlcixcXG4gIHBvc3RzOiBwb3N0UmVkdWNlcixcXG4gIHVzZXJzOiB1c2VyUmVkdWNlcixcXG59KTtcXG5cXG5leHBvcnQgY29uc3QgdWlSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHtcXG4gIGZyaWVuZHM6IGZyaWVuZHNSZWR1Y2VyLFxcbiAgZnJpZW5kV2FsbDogZnJpZW5kV2FsbFJlZHVjZXIsXFxuICB3YWxsOiB3YWxsUmVkdWNlcixcXG59KTtcXG5cXG5leHBvcnQgY29uc3Qgcm9vdFJlZHVjZXI6IFJlZHVjZXI8QXBwbGljYXRpb25TdG9yZT4gPSBjb21iaW5lUmVkdWNlcnMoe1xcbiAgZW50aXRpZXM6IGVudGl0aWVzUmVkdWNlcixcXG4gIHVpOiB1aVJlZHVjZXIsXFxufSk7XFxuXFxuZXhwb3J0IGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIGNvbXBvc2VXaXRoRGV2VG9vbHMoKSk7XFxuYGBgXFxuXFxuRmluYWxseSwgbGV0J3MgdGhyb3cgc29tZSBkYXRhIGludG8gdGhpcyBzdG9yZSwgZGlzcGF0Y2ggc29tZSBhY3Rpb25zIGFuZCBzZWUgdGhlIHJlc3VsdHMuIFdlIHdpbGwgdXNlIHNvbWUgbW9ja2VkIGRhdGEgYW5kIHdpbGwgZGlzcGxheSB0aGUgcmVzdWx0cyB1c2luZyBzb21lIGBjb25zb2xlLmxvZ2AgbWVzc2FnZXMgYW5kIHByaW50aW5nIHRoZSBjb250ZW50cyBvZiB0aGUgc3RvcmUgaW4gdGhlIG1haW4gcGFnZS4gQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBkZWJ1ZyB0aGVzZSBhY3Rpb25zIHdpdGggYSBDaHJvbWUgcGx1Z2luIGxpa2UgW1JlZHV4IERldlRvb2xzXShodHRwczovL2Nocm9tZS5nb29nbGUuY29tL3dlYnN0b3JlL2RldGFpbC9yZWR1eC1kZXZ0b29scy9sbWhrcG1iZWtjcG1rbmtsaW9laWJma3BtbWZpYmxqZCkuXFxuXFxuYGBgamF2YXNjcmlwdFxcbi8vIEFwcC50c3hcXG5pbXBvcnQgUmVhY3QgZnJvbSBcXFwicmVhY3RcXFwiO1xcbmltcG9ydCBcXFwiLi9BcHAuY3NzXFxcIjtcXG5pbXBvcnQgeyBzdG9yZSB9IGZyb20gXFxcIi4vc3RvcmUvc3RvcmVcXFwiO1xcbmltcG9ydCB7IHVzZXJBY3Rpb25zIH0gZnJvbSBcXFwiLi9tb2R1bGVzL3VzZXIvdXNlci5hY3Rpb25zXFxcIjtcXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcXFwiLi9tb2R1bGVzL3VzZXIvdXNlci50eXBlc1xcXCI7XFxuaW1wb3J0IHsgUG9zdCB9IGZyb20gXFxcIi4vbW9kdWxlcy9wb3N0L3Bvc3QudHlwZXNcXFwiO1xcbmltcG9ydCB7IHBvc3RBY3Rpb25zIH0gZnJvbSBcXFwiLi9tb2R1bGVzL3Bvc3QvcG9zdC5hY3Rpb25zXFxcIjtcXG5pbXBvcnQgeyBDb21tZW50IH0gZnJvbSBcXFwiLi9tb2R1bGVzL2NvbW1lbnQvY29tbWVudC50eXBlc1xcXCI7XFxuaW1wb3J0IHsgY29tbWVudEFjdGlvbnMgfSBmcm9tIFxcXCIuL21vZHVsZXMvY29tbWVudC9jb21tZW50LmFjdGlvbnNcXFwiO1xcbmltcG9ydCB7IGZyaWVuZHNBY3Rpb25zIH0gZnJvbSBcXFwiLi9tb2R1bGVzL2ZyaWVuZHMvZnJpZW5kcy5hY3Rpb25zXFxcIjtcXG5pbXBvcnQgeyB3YWxsQWN0aW9ucyB9IGZyb20gXFxcIi4vbW9kdWxlcy93YWxsL3dhbGwuYWN0aW9uc1xcXCI7XFxuaW1wb3J0IHsgZnJpZW5kV2FsbEFjdGlvbnMgfSBmcm9tIFxcXCIuL21vZHVsZXMvZnJpZW5kLXdhbGwvZnJpZW5kLXdhbGwuYWN0aW9uc1xcXCI7XFxuXFxuY29uc3QgdXNlcnM6IFVzZXJbXSA9IFtcXG4gIHtcXG4gICAgaWQ6IDEsXFxuICAgIG5hbWU6IFxcXCJKb3NoIE1hcnRpblxcXCIsXFxuICAgIGVtYWlsOiBcXFwiam9zaC5tYXJ0aW5AZ21haWwuY29tXFxcIixcXG4gICAgYXZhdGFyOiBcXFwiaHR0cDovL3BsYWNla2l0dGVuLmNvbS9nLzUwMC80MDBcXFwiLFxcbiAgfSxcXG4gIHtcXG4gICAgaWQ6IDIsXFxuICAgIG5hbWU6IFxcXCJFbWlseSBNYXR0aGV3c1xcXCIsXFxuICAgIGVtYWlsOiBcXFwiZW1pbHkubWF0dGhld3NAZ21haWwuY29tXFxcIixcXG4gICAgYXZhdGFyOiBcXFwiaHR0cDovL3BsYWNla2l0dGVuLmNvbS9nLzQwMC80MDBcXFwiLFxcbiAgfSxcXG4gIHtcXG4gICAgaWQ6IDMsXFxuICAgIG5hbWU6IFxcXCJTb25pYSBMZWVcXFwiLFxcbiAgICBlbWFpbDogXFxcInNvbmlhLmxlZUBnbWFpbC5jb21cXFwiLFxcbiAgICBhdmF0YXI6IFxcXCJodHRwOi8vcGxhY2VraXR0ZW4uY29tL2cvNDAwLzUwMFxcXCIsXFxuICB9LFxcbl07XFxuY29uc3QgcG9zdHM6IFBvc3RbXSA9IFtcXG4gIHsgaWQ6IDEsIGJvZHk6IFxcXCJCbGFoXFxcIiwgZGF0ZTogbmV3IERhdGUoKSwgdXNlcklkOiAxIH0sXFxuICB7IGlkOiAyLCBib2R5OiBcXFwiQmxlaFxcXCIsIGRhdGU6IG5ldyBEYXRlKCksIHVzZXJJZDogMSB9LFxcbiAgeyBpZDogMywgYm9keTogXFxcIkJsaWhcXFwiLCBkYXRlOiBuZXcgRGF0ZSgpLCB1c2VySWQ6IDIgfSxcXG4gIHsgaWQ6IDQsIGJvZHk6IFxcXCJCbG9oXFxcIiwgZGF0ZTogbmV3IERhdGUoKSwgdXNlcklkOiAyIH0sXFxuICB7IGlkOiA1LCBib2R5OiBcXFwiQmx1aFxcXCIsIGRhdGU6IG5ldyBEYXRlKCksIHVzZXJJZDogMyB9LFxcbl07XFxuY29uc3QgY29tbWVudHM6IENvbW1lbnRbXSA9IFtcXG4gIHsgaWQ6IDEsIGJvZHk6IFxcXCJOb1xcXCIsIGRhdGU6IG5ldyBEYXRlKCksIHBvc3RJZDogMSwgdXNlcklkOiAyIH0sXFxuICB7IGlkOiAyLCBib2R5OiBcXFwiWWVzXFxcIiwgZGF0ZTogbmV3IERhdGUoKSwgcG9zdElkOiAxLCB1c2VySWQ6IDMgfSxcXG4gIHsgaWQ6IDMsIGJvZHk6IFxcXCJZZXMhXFxcIiwgZGF0ZTogbmV3IERhdGUoKSwgcG9zdElkOiAxLCB1c2VySWQ6IDEgfSxcXG4gIHsgaWQ6IDQsIGJvZHk6IFxcXCJObyFcXFwiLCBkYXRlOiBuZXcgRGF0ZSgpLCBwb3N0SWQ6IDIsIHVzZXJJZDogMyB9LFxcbl07XFxuXFxuY29uc3QgQXBwID0gKCkgPT4ge1xcbiAgc3RvcmUuc3Vic2NyaWJlKCgpID0+IHtcXG4gICAgY29uc29sZS5sb2coXFxcIk5ldyBzdGF0ZVxcXCIsIHN0b3JlLmdldFN0YXRlKCkpO1xcbiAgfSk7XFxuXFxuICBjb25zb2xlLmxvZyhcXFwiTG9hZGluZyB1c2Vyc1xcXCIpO1xcbiAgc3RvcmUuZGlzcGF0Y2goXFxuICAgIHVzZXJBY3Rpb25zLmxvYWRVc2Vyc0FjdGlvbih7XFxuICAgICAgdXNlcnMsXFxuICAgIH0pXFxuICApO1xcbiAgY29uc29sZS5sb2coXFxcIkxvYWRpbmcgcG9zdHNcXFwiKTtcXG4gIHN0b3JlLmRpc3BhdGNoKFxcbiAgICBwb3N0QWN0aW9ucy5sb2FkUG9zdHNBY3Rpb24oe1xcbiAgICAgIHBvc3RzLFxcbiAgICB9KVxcbiAgKTtcXG4gIGNvbnNvbGUubG9nKFxcXCJMb2FkaW5nIGNvbW1lbnRzXFxcIik7XFxuICBzdG9yZS5kaXNwYXRjaChcXG4gICAgY29tbWVudEFjdGlvbnMubG9hZENvbW1lbnRzQWN0aW9uKHtcXG4gICAgICBjb21tZW50cyxcXG4gICAgfSlcXG4gICk7XFxuICBjb25zb2xlLmxvZyhcXFwiTG9hZGluZyBmcmllbmRzXFxcIik7XFxuICBzdG9yZS5kaXNwYXRjaChcXG4gICAgZnJpZW5kc0FjdGlvbnMubG9hZEZyaWVuZHNBY3Rpb24oe1xcbiAgICAgIHVzZXJJZHM6IFsyLCAzXSxcXG4gICAgfSlcXG4gICk7XFxuICBjb25zb2xlLmxvZyhcXFwiTG9hZGluZyB3YWxsIHBvc3RzXFxcIik7XFxuICBzdG9yZS5kaXNwYXRjaChcXG4gICAgd2FsbEFjdGlvbnMubG9hZFdhbGxQb3N0c0FjdGlvbih7XFxuICAgICAgcG9zdElkczogWzEsIDIsIDMsIDQsIDVdLFxcbiAgICB9KVxcbiAgKTtcXG4gIGNvbnNvbGUubG9nKFxcXCJMb2FkaW5nIEVtaWx5J3MgcG9zdHNcXFwiKTtcXG4gIHN0b3JlLmRpc3BhdGNoKFxcbiAgICBmcmllbmRXYWxsQWN0aW9ucy5sb2FkRnJpZW5kV2FsbFBvc3RzQWN0aW9uKHtcXG4gICAgICBwb3N0SWRzOiBbMywgNF0sXFxuICAgICAgdXNlcklkOiAyLFxcbiAgICB9KVxcbiAgKTtcXG5cXG4gIHJldHVybiAoXFxuICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJBcHBcXFwiPlxcbiAgICAgIDxkaXY+U3RvcmUgY29udGVudHM8L2Rpdj5cXG4gICAgICA8ZGl2PlxcbiAgICAgICAgPHByZT57SlNPTi5zdHJpbmdpZnkoc3RvcmUuZ2V0U3RhdGUoKSwgbnVsbCwgMil9PC9wcmU+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgKTtcXG59O1xcblxcbmV4cG9ydCBkZWZhdWx0IEFwcDtcXG5gYGBcXG5cXG5JZiB3ZSBydW4gdGhlIGFwcCB3ZSBjYW4gZm9sbG93IGluIHRoZSBjb25zb2xlIGxvZyBob3cgdGhlIHN0b3JlIGRpc3BhdGNoZXMgYWN0aW9ucyBhbmQgdGhlIHJlc3VsdCBpbiB0aGUgb3V0cHV0IHBhZ2UuIFdlIGNhbiBhbHNvIGZvbGxvdyB0aGUgc3RlcHMsIHRoZSBwYXJ0aWFsIHVwZGF0ZXMgYW5kIHRoZSByZXN1bHQgaW4gdGhlIFJlYWN0IERldlRvb2xzIGV4dGVuc2lvbi5cXG5cXG4hW1JlZHV4IERldlRvb2xzIEV4dGVuc2lvbl0oL2ltZy9ibG9nLzIwMjEtMDFfcmVkdXgtbm9ybWFsaXplZC1zdG9yZS1wYXJ0LTIvcmVkdXgtZGV2LXRvb2xzLnBuZylcXG5cXG5JZiB5b3Ugd2FuIHRvIGRpZyBtb3JlIGludG8gdGhlIGNvZGUsIHJlbWVtYmVyIHRoYXQgeW91IGNhbiBjaGVjayB0aGUgd2hvbGUgc291cmNlIGNvZGUgaW4gdGhpcyBicmFuY2g6XFxuXFxuW2h0dHBzOi8vZ2l0aHViLmNvbS9qZ3VpeC9yZWR1eC1ub3JtYWxpemVkLWV4YW1wbGUvdHJlZS9ibG9ncG9zdC1wYXJ0Ml0oaHR0cHM6Ly9naXRodWIuY29tL2pndWl4L3JlZHV4LW5vcm1hbGl6ZWQtZXhhbXBsZS90cmVlL2Jsb2dwb3N0LXBhcnQyKVxcblxcbkluIHRoZSBuZXh0IHBvc3Qgd2Ugd2lsbCBpbXBsZW1lbnQgdGhlIHBhZ2VzIGFuZCBjb21wb25lbnRzIGFuZCBhIG1vY2tlZCBiYWNrZW5kIHdpdGggcGFnaW5hdGlvbi4gV2Ugd2lsbCBhbHNvIGltcGxlbWVudCBjYWNoaW5nIG1ldGhvZHMgdG8gYXZvaWQgYXNraW5nIGZvciB0aGUgc2FtZSBkYXRhIGFnYWluIGFuZCBhZ2Fpbi5cXG5cXG4jIyBDcmVkaXRzXFxuXFxuUGhvdG8gYnkgW1NpZ211bmRdKGh0dHBzOi8vdW5zcGxhc2guY29tL0BzaWdtdW5kKSBvbiBbVW5zcGxhc2hdKGh0dHBzOi8vdW5zcGxhc2guY29tLykuXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./md/blog/2021-01_redux-normalized-store-part-2.md\n");

/***/ })

};;