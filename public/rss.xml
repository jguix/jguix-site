<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Juangui Jord√°n]]></title><description><![CDATA[This is my site where I gather my blog posts and some other random stuff]]></description><link>https://juanguijordan.com</link><image><url>https://juanguijordan.com/icon.png</url><title>Juangui Jord√°n</title><link>https://juanguijordan.com</link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 25 Oct 2021 14:53:05 GMT</lastBuildDate><atom:link href="https://juanguijordan.com/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 17 Feb 2021 08:00:00 GMT</pubDate><copyright><![CDATA[2021 Juangui Jord√°n]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[juangui@gmail.com]]></managingEditor><webMaster><![CDATA[juangui@gmail.com]]></webMaster><ttl>60</ttl><item><title><![CDATA[Inicio del proyecto "No M√°s Colas"]]></title><description><![CDATA[<h1 id="iniciodelproyectonomscolas">Inicio del proyecto 'No M√°s Colas'</h1>
<p>Hoy comienzo un nuevo proyecto. Lo llamar√© por ahora <em>"No M√°s Colas"</em> pero podr√≠a tener dudas sobre eso una vez que haga una investigaci√≥n de UX.</p>
<p>El objetivo del proyecto es <strong>poner en pr√°ctica lo que aprend√≠</strong> en algunos tutoriales de Udemy que complet√© recientemente, o estoy a punto de terminar, dedicados a NextJS y Flutter. Tambi√©n estoy tratando de <strong>encontrar una soluci√≥n para el prototipado r√°pido de aplicaciones</strong>, creando MVP que sean simples pero todav√≠a escalables. Y finalmente, creo que puedo <strong>ayudar a otros en el proceso</strong>. Quiz√°s las personas que ya son competentes en JavaScript puedan seguir mis pasos para crear una aplicaci√≥n diferente, o incluso ayudarme cuando me atasque en algo.</p>
<p>Escribir√© en el blog sobre el proceso para ayudarme a reflexionar sobre las cosas que aprend√≠. Creo que <strong>la pr√°ctica es completamente necesaria para aprender realmente</strong>. As√≠, generalmente no me quedo satisfecho con ver los videos, sino que tambi√©n sigo los pasos por m√≠ mismo. Considero que esto es el <em>"nivel b√°sico de pr√°ctica"</em>, por as√≠ decirlo. El siguiente nivel llega cuando <strong>pruebas algo diferente aplicando lo que has aprendido</strong>. Y si eres capaz de <strong>resumir, sintetizar, escribir sobre el tema o ense√±ar a otras personas</strong>, entonces podr√°s aprenderlo m√°s a fondo.</p>
<p>A alguien le habr√° chirriado escuchar que la pila t√©cnica para este proyecto ser√° NextJS + Flutter. Si vas a usar React, ¬øpor qu√© no usar React Native para dispositivos m√≥viles? o ¬øpor qu√© no crear una PWA? O al rev√©s, ¬øpor qu√© no crear todo en Flutter + Flutter web?</p>
<p>La verdad es que ya he sufrido suficientes problemas con React Native y quiero probar algo nuevo. Con suerte, Flutter proporcionar√° una mejor experiencia de desarrollador -durante el tiempo que lo he estado probando, lo hace- y me dar√° lo suficiente para crear un proyecto simple. No quiero usar PWA porque quiero que mi aplicaci√≥n est√© en las tiendas de aplicaciones. Por otro lado, no conf√≠o mucho en Flutter web por ahora. No conozco sitios de producci√≥n donde lo usen y no recomendar√≠a a mis clientes que lo hagan, as√≠ que por ahora lo dejar√© fuera de la ecuaci√≥n.</p>
<p>Ese es el <em>por qu√©</em>, pero falta el <em>qu√©</em>. <strong>Voy a crear un sitio web y una aplicaci√≥n m√≥vil para administrar colas</strong>, no colas de mensajes o colas de eventos, sino <strong>colas en la vida real con personas en una fila</strong>. B√°sicamente, la aplicaci√≥n permitir√° que alguien ponga en marcha un sistema de colas, donde el usuario podr√° obtener informaci√≥n a trav√©s de la aplicaci√≥n sobre cu√°ntas personas hay delante de √©l, el tiempo de espera estimado y notificaciones cuando se acerque su turno.</p>
<p>Creo que esto puede resolver un problema que ha existido durante mucho tiempo, pero que incluso ha empeorado despu√©s del COVID. <strong>Nunca nos gust√≥ esperar mucho tiempo en una fila</strong>. Ahora, con el COVID, <strong>ni siquiera es seguro hacerlo</strong>. Tener un grupo de personas en un espacio cerrado durante mucho tiempo ya no es deseable, y podr√≠a haber restricciones o cuotas para en relaci√≥n a ello. Con esta aplicaci√≥n, un usuario puede elegir su turno -algo que incluso podr√≠a hacerse de forma remota- y luego, si el tiempo estimado es largo, puede simplemente irse de compras un rato, esperar en casa o tomar un caf√© en alg√∫n lugar, mientras avanza la cola.</p>
<p>El sitio web manejar√° el backoffice para el sistema de colas y un sitio frontend para mostrar en el lugar, donde los usuarios podr√°n ver las siguientes ID de cola que ser√°n atendidas y donde pueden obtener su ID de cola.</p>
<p>La aplicaci√≥n m√≥vil ser√° la encargada de leer este ID e informar al usuario sobre su posici√≥n en la cola y tiempos estimados.</p>
<p><strong>En el pr√≥ximo post crear√© la aplicaci√≥n NextJS con soporte typescript</strong>. Seguid atentos para ver crecer esta aplicaci√≥n.</p>
<h2 id="crditos">Cr√©ditos</h2>
<p>Foto por <a href="https://unsplash.com/@shakusky">Zichao Zhang</a> en <a href="https://unsplash.com">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-10-18_no-mas-colas-kick-off</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-10-18_no-mas-colas-kick-off</guid><category><![CDATA[ux]]></category><category><![CDATA[frontend]]></category><category><![CDATA[javascript]]></category><category><![CDATA[nextjs]]></category><category><![CDATA[flutter]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Mon, 18 Oct 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA[Desplegar una demo con una API JSON en Heroku]]></title><description><![CDATA[<h1 id="desplegarunademoconunaapijsonenheroku">Desplegar una demo con una API JSON en Heroku</h1>
<p>En este post presentar√© algunos trucos que he aprendido al crear demos para publicaciones de blogs y PoC. Aprender√°s a configurar una API usando JSON-server y desplegarlo en el mismo sitio Heroku que la aplicaci√≥n frontend. Tambi√©n aprender√°s a utilizar Faker para generar datos falsos para JSON-server.</p>
<p>A menudo he usado <a href="https://github.com/typicode/json-server">JSON-server</a> para crear r√°pidamente una simple API como backend para una demo o prueba de concepto. No me malinterpretes: no estoy animando a nadie a usar esto como servidor de producci√≥n, sino solo para ese tipo de proyectos peque√±os.</p>
<p><code>JSON server</code> proporciona una API REST completa desde un √∫nico archivo <code>db.json</code>, que incluye rutas <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code> y <code>DELETE</code> para obtener y modificar tus entidades.</p>
<p>En este escenario suelo encontrar dos problemas:</p>
<ol>
<li><p>Tener suficientes datos. Si creas los datos JSON manualmente, te cansar√°s despu√©s de haber creado 10 entidades. Imag√≠nate si necesitas cientos de entidades con diferentes modelos.</p></li>
<li><p>Servir los datos. Si deseas implementar tu demo en Heroku, necesitas un sitio para alojar tu aplicaci√≥n y un segundo para alojar la API.</p></li>
</ol>
<p>Con respecto al primer problema, usaremos <a href="https://github.com/marak/Faker.js">Faker</a> para crear program√°ticamente el archivo <code>db.json</code>. Esto tambi√©n simplificar√° la modificaci√≥n de los modelos, es decir, si el modelo cambia, no es necesario cambiar manualmente varios cientos de entidades.</p>
<p>En cuanto al segundo, usaremos <code>concurrently</code> para lanzar las aplicaciones frontend y backend en diferentes puertos, y agregaremos configuraciones espec√≠ficas para Heroku.</p>
<h2 id="inicializacindelaapp">Inicializaci√≥n de la app</h2>
<p>Para este post vamos a generar una app react de ejemplo. Podr√≠amos hacer configuraciones similares con otros frameworks Javascript.</p>
<p>Creamos una app react con template typescript:</p>
<pre><code class="bash language-bash">npx create-react-app json-server-demo --template typescript
</code></pre>
<p>Vamos a a√±adir <code>json-server</code>, <code>concurrently</code> y <code>axios</code> como dependencias, y <code>faker</code> como dependencia de desarrollo del proyecto:</p>
<pre><code class="bash language-bash">yarn
yarn add json-server concurrently axios
yarn add --dev faker
</code></pre>
<p>Probamos nuestra app de ejemplo:</p>
<pre><code class="bash language-bash">yarn start
</code></pre>
<p>Abre el navegador en <a href="http://localhost:3000/">http://localhost:3000/</a> y podr√°s ver la app React de ejemplo.</p>
<h2 id="creandolaapi">Creando la API</h2>
<p>Nuestra app de ejemplo mostrar√° una lista de empleados, con su nombre, email y residencia.</p>
<p>Crearemos un fichero <code>db.json</code> con <code>faker</code> con no menos de 1000 empleados, porque pensamos a lo grande üòè</p>
<p>Crea un fichero en la carpeta <code>src/db/index.json</code> con el siguiente contenido:</p>
<pre><code class="javascript language-javascript">var fs = require('fs');
var faker = require('faker/locale/es');
faker.locale = 'es';

let employees = [];

for (let i = 1; i &lt;= 1000; i++) {
  const firstName = faker.name.firstName();
  const lastName = faker.name.lastName();
  employees.push({
    address: `${faker.address.streetAddress()}, ${faker.address.zipCode()}, ${faker.address.city()}, ${faker.address.country()}`,
    email: faker.internet.email(firstName, lastName),
    id: i,
    name: faker.name.findName(firstName, lastName),
  });
}

const data = {
  employees,
};

fs.writeFile('src/db/db.json', JSON.stringify(data, null, 2), (err) =&gt; {
  if (err) return console.log(err);
  console.log('Created database at src/db/db.json');
});
</code></pre>
<p>El c√≥digo es f√°cilmente legible. Este script crear√° un archivo <code>src/db/db.json</code> con 1000 empleados, generando <code>name</code>, <code>address</code> e <code>email</code> aleatorios para cada empleado. La configuraci√≥n regional utilizada es <code>"es"</code>, esto es, los nombres y correos electr√≥nicos se crear√°n en espa√±ol. Presta atenci√≥n a c√≥mo se crean los campos <code>name</code> e <code>email</code> usando el mismo <code>firstName</code> y <code>lastName</code>, para que sean coherentes.</p>
<p>Ahora a√±adimos el siguiente script a la secci√≥n <code>"scripts"</code> en el <code>package.json</code>:</p>
<pre><code class="json language-json">  "create-db": "node src/db/index.js",
</code></pre>
<p>Para correr el script, simplemente ejecuta:</p>
<pre><code class="bash language-bash">yarn create-db
</code></pre>
<p>Y ya estamos listos para crear la API <code>json-server</code> con nuestra flamante nueva base de datos JSON de empleados.</p>
<p>Podemos probarlo ahora mismo desde la l√≠nea de comandos. Usaremos la opci√≥n <code>--port</code> para configurarlo en el puerto 3001, de modo que no entre en conflicto con nuestra app react que ya se est√° ejecutando en el puerto 3000:</p>
<pre><code class="bash language-bash">json-server src/db/db.json --port 3001
</code></pre>
<p>Si abres <a href="http://localhost:3001/employees">http://localhost:3001/employees</a> en tu navegador podr√°s ver la lista completa de empleados.</p>
<pre><code class="json language-json">[
  {
    "address": "92349 Hurtado Ramal, 88648, Fuengirola Alejandrotown, Gab√≥n",
    "email": "JosEmilio57@gmail.com",
    "id": 21,
    "name": "Jos√© Emilio Pizarro"
  },
  {
    "address": "536 Margarita Ronda, 45257, Las Vegas, Eslovenia",
    "email": "Dorotea_Ocasio72@hotmail.com",
    "id": 22,
    "name": "Dorotea Ocasio"
  },
  {
    "address": "69354 Candelaria Chalet, 17110, Archuletaburgh, Sri Lanka",
    "email": "Benjamn_Menchaca65@yahoo.com",
    "id": 23,
    "name": "Sta. Benjam√≠n Menchaca"
  },
  ...
]
</code></pre>
<p>Puedes tambi√©n probar varias URLs con par√°metros, como paginaci√≥n o b√∫squeda completa de texto:</p>
<p>http://localhost:3001/employees/1</p>
<p>http://localhost:3001/employees?_page=3&amp;_limit=10</p>
<p>http://localhost:3001/employees?q=Pedro</p>
<h2 id="consumiendolaapi">Consumiendo la API</h2>
<p>Crearemos una simple app que presenta un cuadro de b√∫squeda y una lista de resultados. Omitiremos el contenido del archivo CSS, que solo agrega algunos estilos a la aplicaci√≥n. Puedes encontrarlo en el repositorio que se encuentra al final de esta publicaci√≥n.</p>
<pre><code class="typescript language-typescript">import React, { useEffect, useState } from 'react';
import axios from 'axios';
import './App.css';

type Employee = {
  address: string;
  email: string;
  id: number;
  name: string;
};

const App = () =&gt; {
  const [query, setQuery] = useState('');
  const [employees, setEmployees] = useState&lt;Employee[]&gt;([]);

  useEffect(() =&gt; {
    loadEmployees(1, 20);
  }, []);

  useEffect(() =&gt; {
    loadEmployees(1, 20, query.length &gt; 2 ? query : '');
  }, [query]);

  const loadEmployees = async (page: number, limit: number, query = '') =&gt; {
    const url = `http://localhost:3001/employees?_page=${page}&amp;_limit=${limit}&amp;q=${query}`;
    const _employees = await axios
      .get&lt;Employee[]&gt;(url)
      .then(({ data }) =&gt; data);

    setEmployees(_employees);
  };

  return (
    &lt;div className="App"&gt;
      &lt;div className="search_form"&gt;
        &lt;label className="search_form--label"&gt;Search employees&lt;/label&gt;
        &lt;input
          className="search_form--input"
          type="text"
          value={query}
          onChange={(event) =&gt; setQuery(event.target.value)}
        &gt;&lt;/input&gt;
      &lt;/div&gt;
      &lt;div className="employee_list"&gt;
        {employees.map((employee) =&gt; {
          return (
            &lt;div className="employee_list--item"&gt;
              &lt;div className="employee_list--item-name"&gt;{employee.name}&lt;/div&gt;
              &lt;div className="employee_list--item-address"&gt;
                {employee.address}
              &lt;/div&gt;
              &lt;div className="employee_list--item-email"&gt;{employee.email}&lt;/div&gt;
            &lt;/div&gt;
          );
        })}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
<p>As√≠ se ve la aplicaci√≥n.</p>
<p><img src="/img/blog/2021-07_deploy-demo-with-api-heroku/demo_app.png" alt="Demo application" /></p>
<h2 id="mejorandolaconfiguracindedesarrollo">Mejorando la configuraci√≥n de desarrollo</h2>
<p>Hagamos algunos cambios para simplificar el ciclo de desarrollo. Agregaremos la configuraci√≥n de <code>proxy</code> al <code>package.json</code>, para que las llamadas de red se redirijan al puerto 3001.</p>
<pre><code class="json language-json">  "proxy": "http://localhost:3001",
</code></pre>
<p>De este modo podemos simplificar la URL en <code>App.tsx</code>:</p>
<pre><code class="typescript language-typescript">const url = `/employees?_page=${page}&amp;_limit=${limit}&amp;q=${query}`;
</code></pre>
<p>Ahora podemos reiniciar la app y deber√≠a seguir funcionando.</p>
<p>Luego, usaremos <code>concurrently</code> para iniciar tanto el backend como el frontend desde un script de una sola l√≠nea. Reemplaza el script <code>start</code> de <code>package.json</code> por lo siguiente:</p>
<pre><code class="json language-json">    "start": "concurrently \"react-scripts start\" \"json-server --watch src/db/db.json --port 3001\"",
</code></pre>
<p>Ahora puedes parar el proceso del terminal corriendo <code>json-server src/db/db.json --port 3001</code>. Simplemente lanza el desde la ra√≠z del proyecto:</p>
<pre><code class="bash language-bash">yarn start
</code></pre>
<p>Y ya est√° todo listo.</p>
<h2 id="desplegandoenheroku">Desplegando en Heroku</h2>
<p>Hacer que tanto el <code>json-server</code> como la app se ejecuten en la misma instancia de un servicio como Heroku es m√°s complicado. Por lo general, har√≠an falta dos sitios, uno para el frontend y otro para el backend.</p>
<p>Vamos a beneficiarnos del soporte para servir sitios est√°ticos de <code>json-server</code>.</p>
<p>Primero que nada, construyamos nuestra aplicaci√≥n <code>react</code>.</p>
<pre><code class="bash language-bash">yarn build
</code></pre>
<p>Esto generar√° una versi√≥n est√°tica de la aplicaci√≥n en <code>/build</code>. Luego elimina estas l√≠neas de <code>.gitignore</code> para poder subir el sitio est√°tico a nuestro repositorio remoto:</p>
<pre><code class="bash language-bash"># production
/build
</code></pre>
<p>Crea un archivo <code>server.js</code> en la ra√≠z del proyecto con el siguiente contenido:</p>
<pre><code class="javascript language-javascript">const jsonServer = require('json-server');
const server = jsonServer.create();
const router = jsonServer.router('src/db/db.json');
const middlewares = jsonServer.defaults({ static: './build' });
const port = process.env.PORT || 3000;

server.use(middlewares);
server.use(router);

server.listen(port);
</code></pre>
<p>Si detienes el script <code>yarn start</code> y ejecutas este script localmente, la app se ejecutar√° desde los archivos est√°ticos en el directorio <code>/build</code>, servida por <code>json-server</code>.</p>
<pre><code class="bash language-bash">node server.js
</code></pre>
<p>Esto es exactamente lo que Heroku usar√° para servir tu aplicaci√≥n usando un solo sitio.</p>
<p>Ahora, para decirle a Heroku que llame a este <code>node server.js</code> necesitas crear un archivo <code>Procfile</code> en la ra√≠z de tu repositorio con el contenido:</p>
<pre><code>web: node server.js
</code></pre>
<p>Y esa es toda la configuraci√≥n que necesitas.</p>
<p>Omitir√© la parte en la que debes crear una cuenta de Heroku, agregar una nueva aplicaci√≥n y conectarla a tu repositorio de Github. Puedes encontrar muchos tutoriales sobre eso por ah√≠.</p>
<p>Puedes encontrar el c√≥digo de esta demo en el siguiente enlace:</p>
<p><a href="https://github.com/jguix/json-server-demo">https://github.com/jguix/json-server-demo</a></p>
<p>Y la app desplegada en Heroku:</p>
<p><a href="https://json-server-demo1.herokuapp.com">https://json-server-demo1.herokuapp.com</a></p>
<h2 id="netlifyyvercel">Netlify y Vercel</h2>
<p>Desafortunadamente, no podemos hacer lo mismo en Netlify o Vercel. La raz√≥n es que estos servicios no nos permiten ejecutar comandos node, en su lugar deber√≠as crear tu API utilizando funciones serverless. Por supuesto, tambi√©n puedes alojar all√≠ tu aplicaci√≥n y tener la API en otro servicio, pero ese no era el objetivo de este art√≠culo.</p>
<h2 id="conclusin">Conclusi√≥n</h2>
<p>Quer√≠a reunir todos los pasos que he aprendido creando y alojando apps simples con fines de demostraci√≥n, incluyendo una API. Esto podr√≠a ayudarte a dar los primeros pasos de tu pr√≥ximo proyecto, alojar una demo para una publicaci√≥n de blog o impresionar a alguna empresa en una entrevista t√©cnica.</p>
<h2 id="crditos">Cr√©ditos</h2>
<p>Foto por Austin Neill en <a href="https://unsplash.com/@arstyy">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-07_deploy-demo-with-api-heroku</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-07_deploy-demo-with-api-heroku</guid><category><![CDATA[javascript]]></category><category><![CDATA[frontend]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Sat, 31 Jul 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA[A√±adiendo git hooks]]></title><description><![CDATA[<h1 id="aadiendogithooks">A√±adiendo git hooks</h1>
<p>Esta publicaci√≥n muestra c√≥mo usar git hooks, para evitar commit o push bajo ciertas circunstancias, y particularmente c√≥mo versionar esos git hooks.</p>
<p>Git hooks son una colecci√≥n de disparadores que est√°n vinculados a los comandos de git, como checkout, commit o push. Te permiten ejecutar un script antes/despu√©s de que se ejecute realmente el comando git y devuelven un c√≥digo de salida. En el caso de git hooks que se ejecutan antes, si el c√≥digo de salida no es cero, el comando git no se ejecutar√°.</p>
<p>Los git hooks deben usarse en un proyecto versionado con git, ya que no son m√°s que scripts bash que viven en la carpeta <code>.git/hooks</code>. Hay hooks del lado del cliente y del lado del servidor. En esta publicaci√≥n hablaremos sobre los hooks del lado del cliente.</p>
<p>Los git hooks del lado del cliente incluyen:</p>
<ul>
<li><p><strong>Hooks del Workflow de Commit.</strong> Son hooks que tienen que ver con el proceso de commit: <code>pre-commit</code>, <code>prepare-commit-msg</code>, <code>commit-msg</code> y <code>post-commit</code>.</p></li>
<li><p><strong>Hooks del Workflow de Email.</strong> Usados para un workflow basado en email: <code>applypatch-msg</code>, <code>pre-applypatch</code> y <code>post-applypatch</code>.</p></li>
<li><p><strong>Otros Hooks de Cliente.</strong> Incluyen: <code>pre-rebase</code>, <code>post-rewrite</code>, <code>post-checkout</code>, <code>post-merge</code> y <code>pre-push</code></p></li>
</ul>
<p>No entrar√© en detalles sobre cu√°l es el uso de cada hook. Puedes encontrar m√°s informaci√≥n sobre el prop√≥sito de cada hook y el escenario de activaci√≥n en <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Customizing-Git-Hooks</a>.</p>
<p>Solo mencionar√© un ejemplo. Algunos proyectos requieren por convenci√≥n que el mensaje de confirmaci√≥n incluya un nombre de tarea JIRA, de modo que los miembros del equipo puedan rastrear f√°cilmente qu√© commit estaba vinculado a qu√© tareas en JIRA. Si los nombres de tus tareas de JIRA incluyen todos un prefijo como <code>PROJ</code>, eso se puede lograr con un hook <code>pre-commit</code> como este:</p>
<pre><code class="sh language-sh">#!/bin/bash
MSG="$1"

if ! grep -qE "PROJ" "$MSG";then
    cat "$MSG"
    echo "Your commit message must contain the task name starting with 'PROJ'"
    exit 1
fi
</code></pre>
<p>La secuencia de comandos anterior devuelve un <code>1</code> si el mensaje del commit no incluye la palabra <code>PROJ</code>, y eso evitar√° que se ejecute el commit. Si el mensaje del commit lo incluye, como en <code>"PROJ-202 - Estilos CSS refactorizados"</code>, entonces se llevar√° a cabo el commit.</p>
<p>Quiz√°s te est√©s preguntando, <em>"ok, pero c√≥mo puedo almacenar los hooks en mi proyecto versionado con git si se encuentran dentro de la carpeta <code>.git</code>"</em>, y eso es realmente imposible. No puede hacer commit de archivos dentro de ese directorio. Deber√≠as decirle a cada desarrollador de tu proyecto que los copie, o tener un script que copie los hooks, y luego decirle a todos que lo ejecuten. Nada pr√°ctico, ¬øno?</p>
<h2 id="versionadodegithooksenproyectosjavascript">Versionado de git hooks en proyectos Javascript</h2>
<p>En proyectos Javascript con un <code>package.json</code> podemos usar <a href="https://typicode.github.io/husky">Husky</a> para ocuparnos de los git hooks y su control de versiones dentro del proyecto.</p>
<p>En primer lugar, debemos instalar Husky en el proyecto:</p>
<pre><code class="sh language-sh">npx husky-init &amp;&amp; yarn
</code></pre>
<p>Esto agregar√° un par de cosas en <code>package.json</code>:</p>
<ul>
<li>la dependencia de husky a nuestra secci√≥n <code>devDependencies</code></li>
<li>un script <code>prepare</code> en nuestra secci√≥n de <code>scripts</code></li>
</ul>
<p>La parte <code>yarn</code> instalar√° las dependencias y ejecutar√° el script <code>prepare</code>. Despu√©s de eso, se crear√° un directorio <code>.husky</code> en la ra√≠z del proyecto que contiene un ejemplo de hook <code>pre-commit</code>, un archivo <code>.gitignore</code> y una carpeta <code>_</code> con el script <code>husky.sh</code>.</p>
<p>Con esa configuraci√≥n no se necesita copiar manualmente los hooks en la carpeta <code>.git/hooks</code>: el script <code>husky.sh</code> se encargar√° de usar los hooks que se encuentran en la carpeta <code>.husky</code>.</p>
<p>Ahora puedes editar el hook de muestra <code>pre-commit</code>, eliminarlo o crear uno nuevo en la carpeta <code>.husky</code>, manualmente o mediante el comando bash <code>npx husky add</code>. Por ejemplo, si tuvi√©ramos que crear un hook <code>pre-push</code> que ejecute <code>lint</code> y <code>test</code>, podr√≠amos ejecutar:</p>
<pre><code class="sh language-sh">npx husky add .husky/pre-push "yarn lint &amp;&amp; yarn test"
</code></pre>
<p>El resultado ser√° algo como:</p>
<pre><code class="sh language-sh">#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

yarn lint &amp;&amp; yarn test
</code></pre>
<h2 id="versionadodegithooksenproyectosjavaconmaven">Versionado de git hooks en proyectos Java con Maven</h2>
<p>En cuanto a los proyectos Java administrados por Maven con un archivo <code>pom.xml</code>, no pude encontrar nada como Husky.</p>
<p>La mejor soluci√≥n aqu√≠ fue usar el <code>maven-resources-plugin</code> para copiar los hooks de un directorio de origen <code>git-hooks</code> a la carpeta de destino <code>.git/hooks</code>.</p>
<p>Esto es lo que agregu√© a mi secci√≥n <code>build</code> en el <code>pom.xml</code>:</p>
<pre><code class="xml language-xml">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
      &lt;version&gt;3.2.0&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;copy-hooks&lt;/id&gt;
          &lt;phase&gt;validate&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;copy-resources&lt;/goal&gt;
          &lt;/goals&gt;
          &lt;configuration&gt;
            &lt;outputDirectory&gt;${basedir}/.git/hooks&lt;/outputDirectory&gt;
            &lt;resources&gt;
              &lt;resource&gt;
                &lt;directory&gt;git-hooks&lt;/directory&gt;
              &lt;/resource&gt;
            &lt;/resources&gt;
          &lt;/configuration&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>Despu√©s de eso, llamar al comando <code>mvn validate</code> o cualquier otro comando maven que llame a <code>validate</code>, como <code>package</code>, instalar√° los hooks en primer lugar.</p>
<h2 id="ignorandogithooks">Ignorando git hooks</h2>
<p>¬øQu√© pasa si tenemos un git hook que requiere mucho tiempo para ejecutarse y se interpone en nuestro camino para las tareas de programaci√≥n diarias? Por ejemplo, si tuvi√©ramos un hook <code>pre-commit</code> que lanzara nuestras pruebas unitarias y esas pruebas tardaran 30 minutos en ejecutarse, entonces cada vez que hici√©ramos commit tendr√≠amos que esperar todo ese tiempo. Es posible que queramos ejecutar las pruebas en el √∫ltimo commit antes del push, y no en cada commit, para ahorrarnos algo de tiempo.</p>
<p>En tales casos, podemos omitir los git hooks, si sabemos lo que estamos haciendo:</p>
<pre><code class="sh language-sh">git commit --no-verify -m "An unverifed commit"
</code></pre>
<h2 id="conclusin">Conclusi√≥n</h2>
<p>Espero que este post te ayude a integrar git hooks en tus proyectos. Pueden ayudar a hacer cumplir algunas pol√≠ticas y directivas para mejorar los est√°ndares de calidad en tu equipo.</p>
<h2 id="crditos">Cr√©ditos</h2>
<p>Foto por Anne Nygard en <a href="https://unsplash.com/">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-06_adding-git-hooks</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-06_adding-git-hooks</guid><category><![CDATA[continuous-engineering]]></category><category><![CDATA[javascript]]></category><category><![CDATA[java]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Tue, 29 Jun 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA[Usando redux con datos relacionales (2/3)]]></title><description><![CDATA[<h2 id="parte2implementandolastorederedux">Parte 2. Implementando la store de redux</h2>
<p>En esta serie de posts crearemos una aplicaci√≥n usando <strong>react</strong> y <strong>redux</strong>, en la que manejaremos datos relacionales. En esta segunda parte modelaremos la store.</p>
<p>Al final de la anterior parte de esta serie hab√≠amos modelado la tienda. Consulta la parte 1 si necesitas m√°s contexto sobre ello: <a href="https://blog-es.mimacom.com/redux-normalized-store-part-1/">Usando redux con datos relacionales (1/3)</a>.</p>
<p>Nuestra tienda tendr√° dos reducers principales, la store <code>entities</code> y la store <code>ui</code>.</p>
<p>Comencemos por crear la store <code>entities</code>. Tendr√° 3 tipos de datos o entidades, a saber:</p>
<ul>
<li>user</li>
<li>comment</li>
<li>post</li>
</ul>
<p>Cada entidad tendr√° asociados tipos, acciones y reducers. En aras de una f√°cil comprensi√≥n, mostrar√© los tipos y acciones en primer lugar.</p>
<p>Tipos de usuario:</p>
<pre><code class="javascript language-javascript">// user.types.ts
export type User = {
  avatar: string,
  email: string,
  id: number,
  name: string,
};
</code></pre>
<p>Las acciones del usuario incluir√°n una acci√≥n para cargar todos los usuarios en la store y una acci√≥n para cargar un solo usuario. La primera ser√° llamada potencialmente desde la p√°gina <code>My Friends</code>, la segunda desde la p√°gina <code>My Wall</code> o la p√°gina <code>Friend Wall</code>, donde los posts y los comentarios mostrar√°n el usuario asociado junto a ellos.</p>
<pre><code class="javascript language-javascript">// user.actions.ts
import { User } from './user.types';

export enum UserActionTypes {
  LOAD_USER = 'USER:LOAD_USER',
  LOAD_USERS = 'USER:LOAD_USERS',
}

export type LoadUserPayload = {
  user: User;
};

export type LoadUserAction = {
  type: UserActionTypes.LOAD_USER;
  payload: LoadUserPayload;
};

const loadUserAction = (payload: LoadUserPayload): LoadUserAction =&gt; {
  return {
    payload,
    type: UserActionTypes.LOAD_USER,
  };
};

export type LoadUsersPayload = {
  users: User[];
};

export type LoadUsersAction = {
  type: UserActionTypes.LOAD_USERS;
  payload: LoadUsersPayload;
};

const loadUsersAction = (payload: LoadUsersPayload): LoadUsersAction =&gt; {
  return {
    payload,
    type: UserActionTypes.LOAD_USERS,
  };
};

export const userActions = {
  loadUserAction,
  loadUsersAction,
};
</code></pre>
<p>De igual manera, tendremos tipos de <code>post</code>, donde cada publicaci√≥n tiene un <code>userId</code>, que es la forma en que nuestra base de datos administrar√° la relaci√≥n de uno a muchos (pero recuerda que haremos que estos datos sean m√°s f√°ciles de buscar creando un reducer <code>postIdsById</code> dentro del reducer <code>users</code>):</p>
<pre><code class="javascript language-javascript">// post.types.ts
export type Post = {
  body: string,
  date: Date,
  id: number,
  userId: number,
};
</code></pre>
<p>Las acciones de los <code>post</code> solo incluyen una acci√≥n para cargar publicaciones por usuario, siendo el <code>userId</code> un par√°metro opcional. Enviaremos esta acci√≥n con el par√°metro <code>userId</code> informado desde la p√°gina<code>Friend Wall</code> para obtener todas sus publicaciones. Despacharemos esta acci√≥n con el par√°metro <code>userId</code> con valor <code>undefined</code> desde <code>My Wall</code> para obtener todas las publicaciones de todos los usuarios (para simplificar, digamos que todos los usuarios son amigos m√≠os).</p>
<pre><code class="javascript language-javascript">// post.actions.ts
import { Post } from './post.types';

export enum PostActionTypes {
  LOAD_POSTS = 'POST:LOAD_POSTS',
}

export type LoadPostsPayload = {
  posts: Post[];
  userId?: number;
};

export type LoadPostsAction = {
  type: PostActionTypes.LOAD_POSTS;
  payload: LoadPostsPayload;
};

const loadPostsAction = (payload: LoadPostsPayload): LoadPostsAction =&gt; {
  return {
    payload,
    type: PostActionTypes.LOAD_POSTS,
  };
};

export const postActions = {
  loadPostsAction,
};
</code></pre>
<p>En cuanto a los tipos de <code>comment</code>, contendr√°n √≠ndices que apuntan al <code>post</code> y el <code>user</code> relacionados:</p>
<pre><code class="javascript language-javascript">// comment.types.ts
export type Comment = {
  body: string,
  date: Date,
  id: number,
  postId: number,
  userId: number,
};
</code></pre>
<p>Las acciones de <code>comment</code> tambi√©n incluyen solo una acci√≥n para cargar comentarios por post:</p>
<pre><code class="javascript language-javascript">// comments.actions
import { Comment } from './comment.types';

export enum CommentActionTypes {
  LOAD_COMMENTS = 'COMMENT:LOAD_COMMENTS',
}

export type LoadCommentsPayload = {
  comments: Comment[];
  postId?: number;
};

export type LoadCommentsAction = {
  type: CommentActionTypes.LOAD_COMMENTS;
  payload: LoadCommentsPayload;
};

const loadCommentsAction = (payload: LoadCommentsPayload): LoadCommentsAction =&gt; {
  return {
    payload,
    type: CommentActionTypes.LOAD_COMMENTS,
  };
};

export const commentActions = {
  loadCommentsAction,
};
</code></pre>
<p>Ahora, abordemos los reducers. En cuanto al reducer <code>user</code>, se crear√° combinando dos reducers. El primero tomar√° la acci√≥n <code>LoadUsersAction</code> y almacenar√° un mapa de usuarios por<code>id</code>. Tambi√©n procesar√° la <code>LoadUserAction</code> y almacenar√° al usuario en el mapa. El segundo tomar√° el <code>LoadPostsAction</code> y almacenar√° un mapa de <code>postIds</code> relacionados con un usuario.</p>
<pre><code class="javascript language-javascript">// user.reducer.ts
import { User } from './user.types';
import { UserActionTypes, LoadUsersAction, LoadUserAction } from './user.actions';
import { NumberIndexed } from '../shared/shared.types';
import { AnyAction, combineReducers, Reducer } from 'redux';
import { LoadPostsAction, PostActionTypes } from '../post/post.actions';

export type UserState = {
  byId: NumberIndexed&lt;User&gt;;
  postIdsById: NumberIndexed&lt;number[]&gt;; // one-to-many relation
};

export type UserStore = {
  users: UserState;
};

export const userByIdReducer = (state: NumberIndexed&lt;User&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case UserActionTypes.LOAD_USERS:
      const { payload } = action as LoadUsersAction;
      const { users } = payload;
      const loadedUsersMap = users.reduce((map, user) =&gt; ({ ...map, [user.id]: user }), {});

      return {
        ...state,
        ...loadedUsersMap,
      };

    case UserActionTypes.LOAD_USER:
      const { payload: userPayload } = action as LoadUserAction;
      const { user } = userPayload;

      return {
        ...state,
        [user.id]: user,
      };
  }

  return state;
};

export const postIdsByIdReducer = (state: NumberIndexed&lt;number[]&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case PostActionTypes.LOAD_POSTS:
      const { payload } = action as LoadPostsAction;
      const { posts, userId } = payload;
      let loadedPostIdsByUserIdMap = posts.reduce(
        (postIdsByUserIdMap, post) =&gt; ({
          ...postIdsByUserIdMap,
          [post.userId]: postIdsByUserIdMap[post.userId] ? [...postIdsByUserIdMap[post.userId], post.id] : [post.id],
        }),
        {} as NumberIndexed&lt;number[]&gt;
      );
      if (posts.length === 0) {
        loadedPostIdsByUserIdMap = { [userId as number]: [] };
      }

      return {
        ...state,
        ...loadedPostIdsByUserIdMap,
      };
  }

  return state;
};

export const userReducer: Reducer&lt;UserState&gt; = combineReducers({
  byId: userByIdReducer,
  postIdsById: postIdsByIdReducer,
});
</code></pre>
<p>El tipo personalizado <code>NumberIndexed</code> se define de la siguiente manera, en un archivo compartido donde tambi√©n definimos los tipos para los filtros. Este tipo nos permite tipar mapas con n√∫meros como √≠ndices, utilizados por los reductores anteriores.</p>
<pre><code class="javascript language-javascript">// shared.types.ts
export type NumberIndexed&lt;T&gt; = { [index: number]: T };
export type StringIndexed&lt;T&gt; = { [index: string]: T };
export type OrderType = 'asc' | 'desc';
</code></pre>
<p>De manera similar, el reducer <code>post</code> tiene un reducer relacionado con la acci√≥n <code>LoadPost</code> y un reducer que se encarga de la <code>LoadCommentsAction</code>.</p>
<pre><code class="javascript language-javascript">// post.reducer.ts
import { Post } from './post.types';
import { PostActionTypes, LoadPostsAction } from './post.actions';
import { NumberIndexed } from '../shared/shared.types';
import { AnyAction, combineReducers, Reducer } from 'redux';
import { CommentActionTypes, LoadCommentsAction } from '../comment/comment.actions';

export type PostState = {
  byId: NumberIndexed&lt;Post&gt;;
  commentIdsById: NumberIndexed&lt;number[]&gt;; // one-to-many relation
};

export type PostStore = {
  posts: PostState;
};

export const postByIdReducer = (state: NumberIndexed&lt;Post&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case PostActionTypes.LOAD_POSTS:
      const { payload } = action as LoadPostsAction;
      const { posts } = payload;
      const loadedPostsMap = posts.reduce((map, post) =&gt; ({ ...map, [post.id]: post }), {});

      return {
        ...state,
        ...loadedPostsMap,
      };
  }

  return state;
};

export const commentIdsByIdReducer = (state: NumberIndexed&lt;number[]&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case CommentActionTypes.LOAD_COMMENTS:
      const { payload } = action as LoadCommentsAction;
      const { comments, postId } = payload;
      let loadedCommentIdsByPostIdMap = comments.reduce(
        (commentIdsByPostIdMap, comment) =&gt; ({
          ...commentIdsByPostIdMap,
          [comment.postId]: commentIdsByPostIdMap[comment.postId]
            ? [...commentIdsByPostIdMap[comment.postId], comment.id]
            : [comment.id],
        }),
        {} as NumberIndexed&lt;number[]&gt;
      );
      if (comments.length === 0) {
        loadedCommentIdsByPostIdMap = { [postId as number]: [] };
      }

      return {
        ...state,
        ...loadedCommentIdsByPostIdMap,
      };
  }

  return state;
};

export const postReducer: Reducer&lt;PostState&gt; = combineReducers({
  byId: postByIdReducer,
  commentIdsById: commentIdsByIdReducer,
});
</code></pre>
<p>El reducer de <code>comment</code> es m√°s simple, encarg√°ndose solo de la acci√≥n<code>LoadComments</code>.</p>
<pre><code class="javascript language-javascript">// comment.reducer.ts
import { Comment } from './comment.types';
import { CommentActionTypes, LoadCommentsAction } from './comment.actions';
import { NumberIndexed } from '../shared/shared.types';
import { AnyAction, combineReducers, Reducer } from 'redux';

export type CommentState = {
  byId: NumberIndexed&lt;Comment&gt;;
};

export type CommentStore = {
  comments: CommentState;
};

export const commentByIdReducer = (state: NumberIndexed&lt;Comment&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case CommentActionTypes.LOAD_COMMENTS:
      const { payload } = action as LoadCommentsAction;
      const { comments } = payload;
      const loadedCommentsMap = comments.reduce((map, comment) =&gt; ({ ...map, [comment.id]: comment }), {});

      return {
        ...state,
        ...loadedCommentsMap,
      };
  }

  return state;
};

export const commentReducer: Reducer&lt;CommentState&gt; = combineReducers({
  byId: commentByIdReducer,
});
</code></pre>
<p>A continuaci√≥n, implementaremos la store <code>ui</code>. Contendr√° los datos de la p√°gina <code>My Wall</code>, <code>Friend Wall</code> y <code>Friends</code>.</p>
<p><code>My Wall</code> no contendr√° tipos personalizados, solo √≠ndices a entidades de <code>post</code> que pertenecen al usuario que se mostrar√°n en la p√°gina. Las acciones incluir√°n una acci√≥n para cargar posts del muro.</p>
<pre><code class="javascript language-javascript">// wall.actions.ts
export enum WallActionTypes {
  LOAD_POSTS = 'WALL:LOAD_POSTS',
}

export type LoadWallPostsPayload = {
  postIds: number[];
};

export type LoadWallPostsAction = {
  type: WallActionTypes.LOAD_POSTS;
  payload: LoadWallPostsPayload;
};

const loadWallPostsAction = (payload: LoadWallPostsPayload): LoadWallPostsAction =&gt; {
  return {
    payload,
    type: WallActionTypes.LOAD_POSTS,
  };
};

export const wallActions = {
  loadWallPostsAction,
};
</code></pre>
<p>El reducer ser√° sencillo, encarg√°ndose solo de esa acci√≥n.</p>
<pre><code class="javascript language-javascript">// wall.reducer.ts
import { AnyAction, combineReducers, Reducer } from 'redux';
import { LoadWallPostsAction, WallActionTypes } from './wall.actions';

export type WallState = {
  postIds: number[];
};

export type WallStore = {
  wall: WallState;
};

export const postIdsReducer = (state: number[] = [], action: AnyAction) =&gt; {
  switch (action.type) {
    case WallActionTypes.LOAD_POSTS:
      const { payload } = action as LoadWallPostsAction;
      const { postIds } = payload;
      return [...state, ...postIds];
  }

  return state;
};

export const wallReducer: Reducer&lt;WallState&gt; = combineReducers({
  postIds: postIdsReducer,
});
</code></pre>
<p>Omitiremos el c√≥digo para las acciones y reducers asociados al <code>Friend Wall</code>, que son muy similares a los de <code>My Wall</code>. Puedes consultar la <a href="https://github.com/jguix/redux-normalized-example/tree/blogpost-part2">rama del repositorio de git</a> para este post si deseas ver todo el c√≥digo fuente.</p>
<p>Las acciones de <code>Friends</code> incluir√°n cargar amigos y establecer el orden de la lista de amigos (ascendente o descendente).</p>
<pre><code class="javascript language-javascript">// friends.actions.ts
import { OrderType } from '../shared/shared.types';

export enum FriendsActionTypes {
  LOAD_FRIENDS = 'FRIENDS:LOAD_FRIENDS',
  SET_FRIENDS_ORDER = 'FRIENDS:SET_FRIENDS_ORDER',
}

export type LoadFriendsPayload = {
  userIds: number[];
};

export type LoadFriendsAction = {
  type: FriendsActionTypes.LOAD_FRIENDS;
  payload: LoadFriendsPayload;
};

const loadFriendsAction = (payload: LoadFriendsPayload): LoadFriendsAction =&gt; {
  return {
    payload,
    type: FriendsActionTypes.LOAD_FRIENDS,
  };
};

export type SetFriendsOrderPayload = {
  order: OrderType;
};

export type SetFriendsOrderAction = {
  type: FriendsActionTypes.SET_FRIENDS_ORDER;
  payload: SetFriendsOrderPayload;
};

const setFriendsOrderAction = (payload: SetFriendsOrderPayload): SetFriendsOrderAction =&gt; {
  return {
    payload,
    type: FriendsActionTypes.SET_FRIENDS_ORDER,
  };
};

export const friendsActions = {
  loadFriendsAction,
  setFriendsOrderAction,
};
</code></pre>
<p>El reducer <code>friends</code> tendr√° reducers que solo apunten a las entidades <code>user</code>. Tendremos uno para la lista con orden ascendente y otro para la lista con orden descendente, porque implementaremos una estrategia de paginaci√≥n con el backend (de eso hablaremos en la pr√≥xima publicaci√≥n de la serie). Otro reducer almacenar√° el estado del filtro.</p>
<pre><code class="javascript language-javascript">// friends.reducer.ts
import { AnyAction, combineReducers, Reducer } from 'redux';
import { FriendsActionTypes, LoadFriendsAction, SetFriendsOrderAction } from './friends.actions';

export type FriendsState = {
  orderFilter: 'asc' | 'desc';
  userIds: number[];
};

export type FriendsStore = {
  friends: FriendsState;
};

export const orderFilterReducer = (state: 'asc' | 'desc' = 'asc', action: AnyAction) =&gt; {
  switch (action.type) {
    case FriendsActionTypes.SET_FRIENDS_ORDER:
      const { payload } = action as SetFriendsOrderAction;
      const { order } = payload;
      return order;
  }

  return state;
};

export const userIdsReducer = (state: number[] = [], action: AnyAction) =&gt; {
  switch (action.type) {
    case FriendsActionTypes.LOAD_FRIENDS:
      const { payload } = action as LoadFriendsAction;
      const { userIds } = payload;
      return [...state, ...userIds];

    case FriendsActionTypes.SET_FRIENDS_ORDER:
      return [];
  }

  return state;
};

export const friendsReducer: Reducer&lt;FriendsState&gt; = combineReducers({
  orderFilter: orderFilterReducer,
  userIds: userIdsReducer,
});
</code></pre>
<p>Para crear la store, primero instalaremos la <a href="https://github.com/zalmoxisus/redux-devtools-extension">redux-devtools-extension</a>. Con estas herramientas podremos depurar el despacho de acciones y los cambios en el estado de la store.</p>
<pre><code>yarn add redux-devtools-extension
</code></pre>
<p>La <code>root</code> store se compone de la store <code>entities</code> y la store <code>ui</code> de la siguiente manera:</p>
<pre><code class="javascript language-javascript">// store.ts
import { combineReducers, createStore, Reducer } from 'redux';
import { userReducer, UserStore } from '../modules/user/user.reducer';
import {
  commentReducer,
  CommentStore,
} from '../modules/comment/comment.reducer';
import { postReducer, PostStore } from '../modules/post/post.reducer';
import {
  friendsReducer,
  FriendsStore,
} from '../modules/friends/friends.reducer';
import {
  FriendWallStore,
  friendWallReducer,
} from '../modules/friend-wall/friend-wall.reducer';
import { wallReducer, WallStore } from '../modules/wall/wall.reducer';
import { composeWithDevTools } from 'redux-devtools-extension';

export type EntitiesStore = CommentStore &amp; PostStore &amp; UserStore;

export type UIStore = FriendsStore &amp; FriendWallStore &amp; WallStore;

export type ApplicationStore = {
  entities: EntitiesStore,
  ui: UIStore,
};

export const entitiesReducer = combineReducers({
  comments: commentReducer,
  posts: postReducer,
  users: userReducer,
});

export const uiReducer = combineReducers({
  friends: friendsReducer,
  friendWall: friendWallReducer,
  wall: wallReducer,
});

export const rootReducer: Reducer&lt;ApplicationStore&gt; = combineReducers({
  entities: entitiesReducer,
  ui: uiReducer,
});

export const store = createStore(rootReducer, composeWithDevTools());
</code></pre>
<p>Finalmente, introduzcamos algunos datos en esta store, enviemos algunas acciones y veamos los resultados. Usaremos algunos datos simulados y mostraremos los resultados usando mensajes <code>console.log</code> e imprimiendo el contenido de la store en la p√°gina principal. Alternativamente, puede depurar estas acciones con un complemento de Chrome como <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools</a>.</p>
<pre><code class="javascript language-javascript">// App.tsx
import React from 'react';
import './App.css';
import { store } from './store/store';
import { userActions } from './modules/user/user.actions';
import { User } from './modules/user/user.types';
import { Post } from './modules/post/post.types';
import { postActions } from './modules/post/post.actions';
import { Comment } from './modules/comment/comment.types';
import { commentActions } from './modules/comment/comment.actions';
import { friendsActions } from './modules/friends/friends.actions';
import { wallActions } from './modules/wall/wall.actions';
import { friendWallActions } from './modules/friend-wall/friend-wall.actions';

const users: User[] = [
  {
    id: 1,
    name: 'Josh Martin',
    email: 'josh.martin@gmail.com',
    avatar: 'http://placekitten.com/g/500/400',
  },
  {
    id: 2,
    name: 'Emily Matthews',
    email: 'emily.matthews@gmail.com',
    avatar: 'http://placekitten.com/g/400/400',
  },
  {
    id: 3,
    name: 'Sonia Lee',
    email: 'sonia.lee@gmail.com',
    avatar: 'http://placekitten.com/g/400/500',
  },
];
const posts: Post[] = [
  { id: 1, body: 'Blah', date: new Date(), userId: 1 },
  { id: 2, body: 'Bleh', date: new Date(), userId: 1 },
  { id: 3, body: 'Blih', date: new Date(), userId: 2 },
  { id: 4, body: 'Bloh', date: new Date(), userId: 2 },
  { id: 5, body: 'Bluh', date: new Date(), userId: 3 },
];
const comments: Comment[] = [
  { id: 1, body: 'No', date: new Date(), postId: 1, userId: 2 },
  { id: 2, body: 'Yes', date: new Date(), postId: 1, userId: 3 },
  { id: 3, body: 'Yes!', date: new Date(), postId: 1, userId: 1 },
  { id: 4, body: 'No!', date: new Date(), postId: 2, userId: 3 },
];

const App = () =&gt; {
  store.subscribe(() =&gt; {
    console.log('New state', store.getState());
  });

  console.log('Loading users');
  store.dispatch(
    userActions.loadUsersAction({
      users,
    })
  );
  console.log('Loading posts');
  store.dispatch(
    postActions.loadPostsAction({
      posts,
    })
  );
  console.log('Loading comments');
  store.dispatch(
    commentActions.loadCommentsAction({
      comments,
    })
  );
  console.log('Loading friends');
  store.dispatch(
    friendsActions.loadFriendsAction({
      userIds: [2, 3],
    })
  );
  console.log('Loading wall posts');
  store.dispatch(
    wallActions.loadWallPostsAction({
      postIds: [1, 2, 3, 4, 5],
    })
  );
  console.log("Loading Emily's posts");
  store.dispatch(
    friendWallActions.loadFriendWallPostsAction({
      postIds: [3, 4],
      userId: 2,
    })
  );

  return (
    &lt;div className="App"&gt;
      &lt;div&gt;Store contents&lt;/div&gt;
      &lt;div&gt;
        &lt;pre&gt;{JSON.stringify(store.getState(), null, 2)}&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
<p>Si ejecutamos la aplicaci√≥n, podemos seguir en la consola c√≥mo la store despacha acciones y el resultado en la p√°gina generada. Tambi√©n podemos seguir los pasos, las actualizaciones parciales y el resultado en la extensi√≥n React DevTools.</p>
<p><img src="/img/blog/2021-01_redux-normalized-store-part-2/redux-dev-tools.png" alt="Redux DevTools Extension" /></p>
<p>Si deseas profundizar m√°s en el c√≥digo, recuerda que puedes consultar todo el c√≥digo fuente en esta rama:</p>
<p><a href="https://github.com/jguix/redux-normalized-example/tree/blogpost-part2">https://github.com/jguix/redux-normalized-example/tree/blogpost-part2</a></p>
<p>En la pr√≥xima publicaci√≥n implementaremos las p√°ginas y componentes y un backend simulado con paginaci√≥n. Tambi√©n implementaremos m√©todos de almacenamiento en cach√© para evitar pedir los mismos datos una y otra vez.</p>
<h2 id="credits">Credits</h2>
<p>Fotograf√≠a por <a href="https://unsplash.com/@sigmund">Sigmund</a> on <a href="https://unsplash.com/">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-01_redux-normalized-store-part-2</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-01_redux-normalized-store-part-2</guid><category><![CDATA[javascript]]></category><category><![CDATA[frontend]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Tue, 26 Jan 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA[Usando redux con datos relacionales (1/3)]]></title><description><![CDATA[<h2 id="parte1modelandolastorederedux">Parte 1. Modelando la store de redux</h2>
<p>En esta serie de posts crearemos una aplicaci√≥n usando <strong>react</strong> y <strong>redux</strong>, en la que manejaremos datos relacionales. En esta primera parte modelaremos la store.</p>
<p>A menudo, los tutoriales sobre redux son demasiado simples y manejan una estructura de datos plana. Es el caso de la t√≠pica app de TODOs (lista de tareas), o una lista de la compra, etc. En estos casos solemos tener unos pocos reducers, los cuales son independientes entre s√≠.</p>
<p>Por ejemplo:</p>
<ul>
<li>La lista de TODOs, incluyendo el estado de cada tarea.</li>
<li>El valor de un filtro de mostrar/ocultar, por ejemplo, "ocultar completas".</li>
<li>El valor de un filtro de orden, por ejemplo, "ordenar por fecha de creaci√≥n ascendente".</li>
</ul>
<p>En un caso as√≠ de simple, la store no tiene que manejar relaciones, y se puede representar en un objeto similar a este:</p>
<pre><code class="json language-json">{
  "todos": [
    {
      "id": 1,
      "completed": true,
      "creationDate": "2020-08-07",
      "description": "Create github repo"
    },
    {
      "id": 2,
      "completed": false,
      "creationDate": "2020-08-11",
      "description": "Finish part 1 of this post"
    },
    {
      "id": 3,
      "completed": false,
      "creationDate": "2020-08-12",
      "description": "Create part 2"
    }
  ],
  "filterBy": "completed",
  "orderBy": "date-asc"
}
</code></pre>
<p>Sin embargo, las aplicaciones reales suelen ser m√°s complejas. Algunos datos dependen de otros y existen jerarqu√≠as: relaciones uno a uno, uno a muchos y muchos a muchos. Esto nos va a presentar varios retos, tanto en la representaci√≥n del estado en la store, como en la eficiencia de la comunicaci√≥n con el backend.</p>
<p>Para ilustrarlo, usaremos el ejemplo de una red social. Las entidades principales que manejaremos son usuarios, posts y comentarios. Los usuarios podr√°n crear posts, y los posts podr√°n contener comentarios de otros usuarios. Simple, ¬øverdad?</p>
<p>Veamos en primer lugar algunos de los dise√±os de nuestra red social, para modelar estos datos.</p>
<p>La p√°gina inicial de nuestra red social ser√° <strong>Mi Muro</strong>, la p√°gina donde aparecen mis posts y los de todos mis amigos, con sus respectivos comentarios.</p>
<p><img src="/img/blog/2020-08_redux-normalized-store-part-1/my_wall.png" alt="My Wall" /></p>
<p>Tambi√©n habr√° una p√°gina de <strong>Amigos</strong>, donde se listan los usuarios que son contactos directos m√≠os.</p>
<p><img src="/img/blog/2020-08_redux-normalized-store-part-1/my_friends.png" alt="My Friends" /></p>
<p>Desde esta p√°gina, si pulso sobre uno de mis amigos visitar√© el <strong>Muro del amigo</strong>, esto es, una p√°gina donde aparecer√°n sus posts, junto con los comentarios de otros usuarios.</p>
<p><img src="/img/blog/2020-08_redux-normalized-store-part-1/friend.png" alt="Friend Page" /></p>
<p>Cada post incluir√° el avatar y nombre del usuario, y la fecha. Cada comentario incluir√° tambi√©n el avatar, nombre del usuario y la fecha.</p>
<p><img src="/img/blog/2020-08_redux-normalized-store-part-1/post_and_comments.png" alt="Posts and comments" /></p>
<p>Sin entrar en las relaciones o jerarqu√≠as, podemos definir los tipos de las entidades como usuario (<code>User</code>), post (<code>Post</code>) y comentario (<code>Comment</code>):</p>
<pre><code class="typescript language-typescript">// user.types.ts
export type User = {
  avatar: string;
  email: string;
  id: number;
  name: string;
};

// post.types.ts
export type Post = {
  body: string;
  date: Date;
  id: number;
};

// comment.types.ts
export type Comment = {
  body: string;
  date: Date;
  id: number;
};
</code></pre>
<p>Una representaci√≥n extremadamente simple, basada en la aplicaci√≥n de los TODOs, consiste en tener un reducer por cada tipo de entidad:</p>
<pre><code class="json language-json">{
  users: [
    { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
    { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
    { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
  ],
  posts: [
    {
      id: 1,
      body: "hi all",
      date: "2020-08-01",
      user: { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
    }
  ],
  comments: [
    {
      {
        id: 1,
        body: "hello!",
        date: "2020-08-02",
        user: { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
      },
      {
        id: 2,
        body: "hi there!",
        date: "2020-08-02",
        user: { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
      },
    }
  ],
}
</code></pre>
<p>Si entro en la p√°gina de <strong>Friends</strong> la store almacena los amigos en <code>users</code>; si entro en la p√°gina de un amigo la store almacena los posts en <code>posts</code>, y si muestro un post, los comentarios se almacenan en <code>comments</code>.</p>
<p>Esta estrategia me va a obligar a traerme todos los posts del backend cada vez que cambie al muro de un amigo distinto, y adem√°s no va a funcionar porque en las p√°ginas de <strong>Amigo</strong> y <strong>Mi muro</strong> debo mostrar varios posts a la vez, donde cada post tiene distintos comentarios. Seg√∫n la store dise√±ada arriba, todos los posts visualizados mostrar√≠an siempre los mismos comentarios.</p>
<p>Para evitar este problema podr√≠amos anidar los comentarios dentro de los posts, as√≠:</p>
<pre><code class="json language-json">{
  users: [
    { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
    { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
    { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
  ],
  posts: [
    {
      id: 1,
      body: "hi all",
      date: "2020-08-01",
      user: { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
      comments: [
        {
          {
            id: 1,
            body: "hello!",
            date: "2020-08-02",
            user: { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
          },
          {
            id: 2,
            body: "hi there!",
            date: "2020-08-02",
            user: { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
          },
        }
      ],
    }
  ],
}
</code></pre>
<p>Sin embargo, todav√≠a tenemos varios problemas. No estamos cacheando datos, por ejemplo, si navego de un amigo a otro y vuelvo al primero, tendr√© que cargar de nuevo todos los posts y comments del backend. Tambi√©n hay muchos datos replicados, como los usuarios, ocupando m√°s espacio del necesario.</p>
<p>Lo ideal ser√≠a normalizar la store, como se recomienda en la <a href="https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape">documentaci√≥n de redux</a>. Podr√≠amos pensar algo as√≠, donde a cada entidad hemos a√±adido uno o varios ids (<code>userId</code>, <code>postId</code>) que apuntan a las entidades con las que est√° relacionada:</p>
<pre><code class="json language-json">{
  users: [
    { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
    { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
    { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
  ],
  posts: [
    {
      id: 1,
      body: "hi all",
      date: "2020-08-01",
      userId: 2,
    }
  ],
  comments: [
    {
      {
        id: 1,
        body: "hello!",
        date: "2020-08-02",
        postId: 1,
        userId: 1,
      },
      {
        id: 2,
        body: "hi there!",
        date: "2020-08-02",
        postId: 1,
        userId: 3,
      },
    }
  ],
}
</code></pre>
<p>De esta forma aplanamos la store y evitamos los datos replicados. Sin embargo, la b√∫squeda por id del usuario asociado a cada post o comentario, y la b√∫squeda de todos los comentarios asociados a un post no va a ser nada √≥ptima, ya que nos va a obligar a recorrer todos los usuarios o comentarios y filtrar por id. Cuando la store crezca durante una sesi√≥n, este proceso se va a volver m√°s y m√°s lento e impactar√° a la experiencia de usuario.</p>
<p>Podemos mejorar esto indexando cada dato, como se sugiere en la documentaci√≥n de redux.</p>
<pre><code class="json language-json">{
  "users": {
    "byId": {
      "1": {
        "id": 1,
        "name": "Josh",
        "email": "josh@gmail.com",
        "avatar": "josh.jpg"
      },
      "2": {
        "id": 2,
        "name": "Anne",
        "email": "anne@gmail.com",
        "avatar": "anne.jpg"
      },
      "3": {
        "id": 3,
        "name": "Mike",
        "email": "mike@gmail.com",
        "avatar": "mike.jpg"
      }
    }
  },
  "posts": {
    "byId": {
      "1": {
        "id": 1,
        "body": "hi all",
        "date": "2020-08-01",
        "userId": 2
      }
    }
  },
  "comments": {
    "byId": {
      "1": {
        "id": 1,
        "body": "hello!",
        "date": "2020-08-02",
        "postId": 1,
        "userId": 1
      },
      "2": {
        "id": 2,
        "body": "hi there!",
        "date": "2020-08-02",
        "postId": 1,
        "userId": 3
      }
    }
  }
}
</code></pre>
<p>Ahora es mucho m√°s sencillo y r√°pido buscar el <code>user</code> asociado a un <code>post</code> o un <code>comment</code>. Sin embargo, sigue siendo complejo obtener la lista de <code>posts</code> por <code>user</code>, o la lista de <code>comments</code> por <code>post</code>. De hecho, ahora es m√°s dif√≠cil e ineficiente filtrar estos datos.</p>
<p>Vamos pues a crear estructuras relacionales que nos indiquen qu√© posts pertenecen a cada usuario (uno a muchos), y qu√© comentarios a cada post.</p>
<pre><code class="json language-json">{
  users: {
    byId: {
      1: { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
      2: { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
      3: { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
    },
    postIdsById: {
      2: [ 1 ],
    }
  },
  posts: {
    byId: {
      1: {
        id: 1,
        body: "hi all",
        date: "2020-08-01",
        userId: 2,
      }
    },
    commentIdsById: :{
      1:[ 1, 2],
    }
  },
  comments: {
    byId: {
      1: {
        id: 1,
        body: "hello!",
        date: "2020-08-02",
        postId: 1,
        userId: 1,
      },
      2: {
        id: 2,
        body: "hi there!",
        date: "2020-08-02",
        postId: 1,
        userId: 3,
      },
    }
  },
}
</code></pre>
<p>La lectura del reducer <code>postIdsById</code> ser√≠a <em>"el usuario con id 2 tiene el post con id 1"</em>. La lectura de <code>commentIdsById</code> ser√≠a <em>"el post con id 1 tiene los comentarios con ids 1 y 2"</em>. Ahora ya tenemos todo indexado y la estructura de base de datos est√° totalmente normalizada.</p>
<p>√önicamente nos faltan estructuras que nos permitan almacenar los ids de los posts que ser√°n visibles en cada muro, ya sea el del usuario o el de sus amigos, as√≠ como los ids de los usuarios que deben aparecer en la p√°gina de amigos. Incluiremos en la p√°gina de amigos un filtro para ordenar alfab√©ticamente de forma ascendente o descendente.</p>
<p>Para separar las estructuras que modelan entidades que pertenecen a la base de datos, de las estructuras que modelan elementos de la interfaz de usuario, crearemos 2 reducers de mayor nivel, uno llamado <code>entities</code> donde almacenaremos <strong>entidades de la base de datos</strong>, y otro llamado <code>ui</code> donde almacenaremos todos los <strong>elementos de la interfaz de usuario</strong>.</p>
<p>Este es finalmente el modelo de la store, que evita la replicaci√≥n de datos, facilita la b√∫squeda gracias a la indexaci√≥n, y nos va a permitir cachear los datos ya cargados, ya que las estructuras asociadas a la interfaz de usuario solo almacenan ids, y cualquier entidad ya descargada del backend va a permanecer en la store hasta que borremos la cach√© del navegador.</p>
<pre><code class="json language-json">{
  entities: {
    users: {
      byId: {
        1: { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
        2: { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
        3: { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
      },
      postIdsById: {
        2: [ 1 ],
      },
    },
    posts: {
      byId: {
        1: {
          id: 1,
          body: "hi all",
          date: "2020-08-01",
          userId: 2,
        },
      },
      commentIdsById: :{
        1: [ 1, 2 ],
      },
    },
    comments: {
      byId: {
        1: {
          id: 1,
          body: "hello!",
          date: "2020-08-02",
          postId: 1,
          userId: 1,
        },
        2: {
          id: 2,
          body: "hi there!",
          date: "2020-08-02",
          postId: 1,
          userId: 3,
        },
      },
    },
  },
  ui: {
    friends: {
      orderFilter: "asc",
      userIds: [ 2, 3 ],
    },
    friendWall: {
      postIdsById: {
        2: [ 1 ],
      },
    },
    wall: {
      postIds: [ 1 ],
    },
  },
}
</code></pre>
<p>En pr√≥ximos posts veremos la implementaci√≥n de esta store y los m√©todos de cacheado.</p>
<h2 id="credits">Credits</h2>
<p>Fotograf√≠a por <a href="https://unsplash.com/@jeremybishop">Jeremy Bishop</a> en <a href="https://unsplash.com/">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2020-08_redux-normalized-store-part-1</link><guid isPermaLink="true">https://juanguijordan.com/blog/2020-08_redux-normalized-store-part-1</guid><category><![CDATA[javascript]]></category><category><![CDATA[frontend]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Tue, 03 Nov 2020 09:00:00 GMT</pubDate></item><item><title><![CDATA[Creando una extensi√≥n de Chrome]]></title><description><![CDATA[<p>En este post, te mostrar√© c√≥mo crear una simple <a href="https://chrome.google.com/webstore/category/extensions">Chrome extension</a>. Resumir√© lo que una extensi√≥n de Chrome puede hacer, y tambi√©n voy a explicar c√≥mo crear extensiones m√°s complejas basadas en JavaScript, React, Angular o Vue.</p>
<p>¬øQu√© es una extensi√≥n de Chrome? Las extensiones de Google Chrome son como peque√±as aplicaciones que viven en tu navegador, basadas en tecnolog√≠as web est√°ndar, como HTML, CSS y JavaScript. Aprovechan algunas API de Chrome, proporcionando las bases para construir una aplicaci√≥n, como el almacenamiento y la mensajer√≠a. Las extensiones de Google Chrome pueden interactuar con las p√°ginas web abiertas en las pesta√±as de tu navegador, pero en realidad no est√°n pensadas para ello. Pueden "vivir" por s√≠ solas y proporcionar cualquier tipo de funcionalidad, m√°s all√° de la experiencia de navegaci√≥n. Puedes crear cualquier cosa, desde una agenda, pasando por un temporizador pomodoro, hasta un web image scrapper. Puedes pensar en Chrome como la plataforma Electron, proporcionando una base para construir aplicaciones JavaScript que pueden interactuar con la experiencia de navegaci√≥n.</p>
<p>Las extensiones de Chrome pueden permanecer inactivas hasta que alg√∫n trigger las despierte, haciendo que se inyecte alg√∫n contenido o script, se ejecute o se muestre alg√∫n popup. Estos scripts viven en algo llamado "Mundos Aislados" en relaci√≥n con las p√°ginas web que se est√°n navegando, lo que significa que una extensi√≥n de Chrome s√≥lo puede compartir el DOM con una p√°gina en particular, pero no las variables o funciones del script. Por lo tanto, las extensiones de Chrome pueden modificar el DOM, inyectar scripts CSS o JavaScript adicionales que interact√∫an con el mismo DOM, pero no pueden modificar directamente la p√°gina original CSS o JavaScript. Por otro lado, las extensiones pueden comunicarse con la p√°gina a trav√©s de mensajes, por lo que puede crear una p√°gina que interact√∫e con una extensi√≥n de Chrome.</p>
<h2 id="capacidadesdelaextensin">Capacidades de la extensi√≥n</h2>
<p>Este es un resumen incompleto de lo que puede hacer una extensi√≥n:</p>
<ul>
<li><strong>Mostrar un icono</strong>. El icono de la extensi√≥n puede ser modificado en tiempo de ejecuci√≥n, o mostrar una insignia sobre √©l, con un fondo de color y un texto de 4 letras en √©l.</li>
<li><strong>Mostrar un popup</strong>. Al hacer clic en el icono de la extensi√≥n se puede activar un popup con contenido.</li>
<li><strong>Mostrar un men√∫ secundario</strong>. Haciendo clic con el bot√≥n derecho del rat√≥n en el icono de la extensi√≥n puede activar un men√∫ secundario.</li>
<li><strong>Responder a atajos de teclado</strong>. Los atajos de teclado pueden asociarse a las acciones de extensi√≥n (CTRL+SHIFT+V).</li>
<li><strong>Responder a acciones de la barra de direcciones</strong> (la as√≠ llamada omnibox). Los atajos de texto pueden usarse en la omnibox para activar acciones en la extensi√≥n (p.ej. ‚Äúmyext+<TAB>").</li>
<li><strong>Responder a la visita a cierta p√°gina web</strong>. Por ejemplo, modificar el estado del icono o el contenido de la ventana emergente
Modifica el contenido de un sitio web. Por ejemplo, modificar el DOM por un script de contenido o aplicar archivos CSS adicionales.</li>
<li><strong>Tener una p√°gina de opciones</strong> para la configuraci√≥n de la extensi√≥n.</li>
<li><strong>Reemplazar la p√°gina de Historial, Favoritos o Nueva Pesta√±a</strong> de Google Chrome.</li>
<li><strong>Intercambiar mensajes</strong> con un sitio web o consigo mismo. Una extensi√≥n puede utilizar la mensajer√≠a para hablar con alguna p√°gina web que se est√© navegando, o para comunicarse entre partes de la propia extensi√≥n.</li>
<li><strong>Almacenar informaci√≥n</strong> en el almacenamiento local, el almacenamiento Chrome (almacenamiento que se sincroniza a trav√©s de diferentes dispositivos donde el usuario est√° conectado) o cualquier almacenamiento nativo de JS, por ejemplo sessionStoragef.</li>
<li><strong>Mostrar notificaciones</strong> como un "toast".</li>
<li><strong>Usar varias APIs proporcionadas por Google Chrome</strong>.</li>
<li><strong>Ser gratis, o de pago</strong>. Al crear una extensi√≥n de pago, puedes elegir usar la tienda Chrome o tus propios medios de pago.</li>
</ul>
<h2 id="lobsico">Lo b√°sico</h2>
<p>El √∫nico archivo obligatorio de una extensi√≥n de Chrome es el manifiesto. Debe estar colocado en el directorio ra√≠z, y comunica los metadatos de la extensi√≥n, los permisos y otros archivos involucrados.</p>
<p>El formato del manifiesto tiene un mont√≥n de opciones, que se pueden ver en esta p√°gina (https://developer.chrome.com/extensions/manifest), pero nos centraremos en los m√°s importantes. Presentemos el manifiesto de la extensi√≥n "Cat detector":</p>
<pre><code class="json language-json">{
  "name": "Cat detector",
  "description": "Spots cats in the page you are browsing",
  "manifest_version": 2,
  "version": "1.0",
  "background": {
    "persistent": false,
    "scripts": ["background.js"]
  },
  "content_scripts": [
    {
      "matches": ["&lt;all_urls&gt;"],
      "js": ["content.js"]
    }
  ],
  "browser_action": {
    "default_popup": "popup.html"
  },
  "icons": {
    "16": "images/footprint-16.png",
    "32": "images/footprint-32.png",
    "48": "images/footprint-48.png",
    "128": "images/footprint-128.png"
  },
  "permissions": ["activeTab"]
}
</code></pre>
<p>El manifiesto declara algunas capacidades que ser√°n utilizadas por la extensi√≥n:</p>
<ul>
<li>Declara un background script. Los background scripts pueden activarse en cualquier momento, pero no tienen acceso directo al contenido de los tabs.</li>
<li>Declara un content script. Los scripts de contenido se implementan en la misma p√°gina en la que se est√° navegando y tienen acceso al contenido. Una expresi√≥n de coincidencia es usada para determinar cu√°ndo el script es inyectado. En este caso elegimos <code>&lt;all urls&gt;</code>, lo que significa que se implementa en cualquier p√°gina web.</li>
<li>Declara una acci√≥n del navegador, es decir, una extensi√≥n que es capaz de funcionar independientemente de la p√°gina por la que se est√° navegando. Si quisi√©ramos crear una extensi√≥n que s√≥lo se activa cuando se cumplen algunas condiciones en la p√°gina que se est√° navegando, utilizar√≠amos una "page action". La raz√≥n por la que elegimos la acci√≥n de navegaci√≥n es que los gatos se pueden ver casi en todas partes en Internet. Una segunda raz√≥n es que queremos mostrar un badge sobre el icono de la extensi√≥n, y eso s√≥lo es posible usando una acci√≥n del navegador.</li>
<li>Dentro de la acci√≥n del navegador, declara un popup que se abrir√° al hacer clic en el icono de la extensi√≥n.</li>
<li>Declara los iconos. Los m√°s peque√±os se utilizan para el icono del navegador, dependiendo de la resoluci√≥n de la pantalla, y los m√°s grandes se usan en el men√∫ de extensiones de Chrome y el Chrome Store.</li>
</ul>
<h2 id="nuestraextensindeejemplo">Nuestra extensi√≥n de ejemplo</h2>
<p>Vamos al grano de este post: esta page action utiliza un background script que, al cargar la p√°gina, env√≠a un mensaje al content script, que a su vez cuenta el n√∫mero de veces que las palabras "cat", "kitten" o "kitty" aparecen en nuestra p√°gina. Despu√©s de recibir una respuesta, la tarea de background muestra un badge sobre el icono para comunicar el n√∫mero de gatitos que aparecen. Al hacer clic en el icono de la extensi√≥n, se mostrar√° un popup con una imagen de un gatito feliz junto con el contador.</p>
<p>Echemos un vistazo a la estructura de los archivos de extensi√≥n:</p>
<pre><code>-audios
 |-meow_0.mp3
 |-meow_1.mp3
 |-meow_2.mp3
 |-meow_3.mp3
 |-meow_4.mp3
 |-meow_5.mp3
 |-meow_6.mp3
-images
 |-footprint-16.png
 |-footprint-32.png
 |-footprint-48.png
 |-footprint-128.png
-background.js
-content.js
-manifest.js
-popup.html
-popup.js
</code></pre>
<p>Incluye los iconos de extensi√≥n, algunos archivos de audio, el manifiesto, el background script, el content script y los archivos del popup html y js.</p>
<p>As√≠ queda el background script. Se han incluido comentarios para se√±alar las cosas importantes:</p>
<pre><code>const maxMeows = 6;

// The extension listens to the onUpdated event, and executes when the page is loaded
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) =&gt; {
  if (changeInfo.status === "complete" &amp;&amp; tab.active) {
    detectCats(tabId);
  }
});

// It executes the cat detection as well when we switch tabs on the active tab
chrome.tabs.onActivated.addListener((activeTab) =&gt; detectCats(activeTab.tabId));

const detectCats = (tabId) =&gt; {
  // Here we clear the badge
  chrome.browserAction.setBadgeText({ text: "" });
  // Then we send a message to the content script, together with a callback
  chrome.tabs.sendMessage(tabId, { text: "cat_count" }, onCatCount);
};

// This is the callback called by the content script
const onCatCount = (catNumber) =&gt; {
  if (!catNumber) {
    deactivateIcon();
  } else {
    // When cats are detected, show an animation on the badge
    animateBadge(catNumber);
  }
};

const deactivateIcon = () =&gt; {
  // Here we detect what the active tab is and disable the action
  chrome.tabs.query({ active: true, currentWindow: true }, (activeTab) =&gt; {
    chrome.browserAction.disable(activeTab[0].id);
  });
};

const animateBadge = (catNumber) =&gt; {
  // Limit meows, we don't want 1000 sounds to be played
  let i = catNumber - maxMeows &gt; 0 ? catNumber - maxMeows : 1;
  let j = 0;
  // Cats will meow at random times
  for (; i &lt;= catNumber - 1; i++, j++) {
    updateBadge(i, j * Math.random() * 400);
  }
  // Last cat should come last, let's give it the highest delay
  updateBadge(catNumber, j * 500);
};

const updateBadge = (catIndex, delay) =&gt; {
  // After some specified delay display a number on the badge and play a meow sound
  setTimeout(() =&gt; {
    (
      new Audio(chrome.runtime.getURL(`audios/meow_${catIndex % 7}.mp3`))
    ).play();
    chrome.browserAction.setBadgeText({ text: catIndex.toString() });
  }, delay);
};
</code></pre>
<p>El content script b√°sicamente recibe el mensaje <code>cat_count</code> y responde a √©l. Se ha incluido algo de l√≥gica para contar los gatos con una expresi√≥n regex:</p>
<pre><code>chrome.runtime.onMessage.addListener((msg, sender, sendResponse) =&gt; {
  if (msg.text === "cat_count") {
    sendResponse(countCats());
  }
});

const countCats = () =&gt; {
  var content =
    document.body["innerText" in document.body ? "innerText" : "textContent"];
  content = removeScriptsFromContent(content);
  var regex = /(cat|cats|kitten|kittens|kitty|kitties)[\s.,]/gi;

  return content.match(regex)?.length || 0;
};

const removeScriptsFromContent = (strCode) =&gt; {
  return strCode.replace(/&lt;script.*?&gt;.*?&lt;\/script&gt;/gim, "");
};
</code></pre>
<p>El archivo html del popup simplemente muestra una imagen y declara el fichero javascript:</p>
<pre><code>&lt;html&gt;
  &lt;body&gt;
    &lt;img id="cat_image" /&gt;
    &lt;script src="popup.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>El archivo js ejecuta una funci√≥n en la carga que a su vez env√≠a un mensaje al content script para contar gatos de nuevo. Esto se debe a que los popups no "viven" hasta que se abren, as√≠ que si hay que hacer alguna actualizaci√≥n en el popup, es el popup el que debe iniciar la acci√≥n:</p>
<pre><code>window.onload = () =&gt; {
  chrome.tabs.query({ active: true, currentWindow: true }, (activeTab) =&gt; {
    const tabId = activeTab[0].id;
    chrome.tabs.sendMessage(tabId, { text: "cat_count" }, onCatCount);
  });
};

const onCatCount = (catNumber) =&gt; {
  document.getElementById(
    "cat_image"
  ).src = `https://cataas.com/c/s/${catNumber}%20happy%20cats%20detected?t=sq&amp;width=350`;
};
</code></pre>
<p>ChanChanChan, este es el resultado de la extensi√≥n del detector de gatos en acci√≥n:</p>
<p><img src="/img/blog/2020-05_creating-a-chrome-extension/cat_extension.png" alt="Cat extension" /></p>
<h2 id="probandolocalmentenuestraextensin">Probando localmente nuestra extensi√≥n</h2>
<p>Si quieres probar tu extensi√≥n en tu m√°quina local, s√≥lo tienes que ir al menu item More Tools ‚Äî&gt; Extensions, luego hacer click en Load Unpacked, y seleccionar la carpeta donde est√° tu manifiesto y el resto de los archivos.</p>
<p><img src="/img/blog/2020-05_creating-a-chrome-extension/load_extension.png" alt="Loading the extension for testing" /></p>
<h2 id="debugging">Debugging</h2>
<p>El proceso de debugging se vuelve particularmente compleja ya que cada extensi√≥n debe ser inspeccionada de manera diferente.</p>
<p>En cuanto a los background scripts, se inspeccionan en las extensiones. Para abrir las herramientas de desarrollo es necesario hacer clic en el enlace "p√°gina en segundo plano" en los detalles de la extensi√≥n.</p>
<p><img src="/img/blog/2020-05_creating-a-chrome-extension/extension_info.png" alt="Opening the extension dev tools" /></p>
<p>Los content scripts se inspeccionan en la p√°gina web que est√°s navegando, ya que se inyectan en la p√°gina. Se muestran en una pesta√±a de <strong>Content Scripts</strong>.</p>
<p><img src="/img/blog/2020-05_creating-a-chrome-extension/debugging_content_scripts.png" alt="Debugging content scripts" /></p>
<p>No pude encontrar la forma de inspeccionar los popup scripts, incluso los logs de la consola se perd√≠an en alg√∫n lugar, as√≠ que mostrar una alerta fue la √∫nica forma de comprobar que el popup estaba "vivo" y activo.</p>
<h2 id="publicandolaextensin">Publicando la extensi√≥n</h2>
<p>Para publicar una extensi√≥n de Google Chrome es necesario registrarse como desarrollador de Chrome, pagar 5 d√≥lares y rellenar algunos datos sobre el nombre de la extensi√≥n, la descripci√≥n y las im√°genes o v√≠deos. El proceso es muy similar al que se sigue para publicar una aplicaci√≥n en Google Play. Despu√©s de enviar tu extensi√≥n para la aprobaci√≥n, tienes que esperar una respuesta. Las respuestas negativas son bastante r√°pidas -mi primera extensi√≥n fue rechazada sin raz√≥n alguna, y tuve que enviar un correo electr√≥nico para pedir una revisi√≥n humana-, las positivas pueden tardar unas horas o d√≠as.</p>
<h2 id="irmsall">Ir m√°s all√°‚Ä¶</h2>
<p>El sitio de desarrollo de Chrome para extensiones proporciona un gran n√∫mero de extensiones de muestra. Estas son extensiones simples que abordan caracter√≠sticas muy espec√≠ficas que pueden ayudar a aprender a construir extensiones.</p>
<p>https://developer.chrome.com/extensions/samples</p>
<p>Hay muchos proyectos de boilerplate por ah√≠ para ayudarte a desarrollar extensiones m√°s complejas usando React, Angular o Vue. Toma los siguientes enlaces como punto de partida:</p>
<ul>
<li>https://github.com/lxieyang/chrome-extension-boilerplate-react</li>
<li>https://github.com/larscom/ng-chrome-extension</li>
<li>https://github.com/Kocal/vue-web-extension</li>
</ul>
<h2 id="recap">Recap</h2>
<p>Crear extensiones de Chrome puede ser divertido, y tambi√©n puedes encontrar muchos escenarios productivos para ellas. Desarrollar extensiones es f√°cil si conoces las tecnolog√≠as web b√°sicas como HTML, CSS y JavaScript. Te mostramos los fundamentos de una extensi√≥n de Chrome y te guiamos en la creaci√≥n de una simple extensi√≥n.</p>
<p>Si quiere comprobar el c√≥digo de extensi√≥n completo, ¬°√©chale un vistazo! <a href="https://github.com/jguix/chrome-cat-detector">github repository</a>.</p>
<p>¬øPuedes imaginarte algo que pueda ser entregado como una extensi√≥n de Chrome? Comp√°rtenos tu idea‚Ä¶</p>
<h2 id="crdits">Cr√©dits</h2>
<p>Fotograf√≠a de Markus Winkler en <a href="https://unsplash.com/">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2020-05_creating-a-chrome-extension</link><guid isPermaLink="true">https://juanguijordan.com/blog/2020-05_creating-a-chrome-extension</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Mon, 01 Jun 2020 09:00:00 GMT</pubDate></item><item><title><![CDATA[Circular Design SPRINT]]></title><description><![CDATA[<p>En este post os cuento la experiencia de participar en un&nbsp;<strong>Design Sprint</strong>, y c√≥mo Ecoembes utiliz√≥ la metodolog√≠a Design Sprint para explorar nuevas ideas en el contexto de la econom√≠a circular y el reciclaje.</p>
<p>Para ello, reclut√≥ mediante becas a un ecl√©ctico grupo de profesionales, incluyendo emprendedores, profesionales del marketing, dise√±o, y tecnolog√≠a, entre los que me encuentro. Durante 5 d√≠as en Julio de 2018, trabajamos conjuntamente en&nbsp;<a href="https://www.thecircularlab.com">The Circular Lab</a>, un espacio de innovaci√≥n de Ecoembes localizado en Logro√±o, particularmente preparado para el trabajo creativo y colaborativo.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/the_circular_lab_1-1-1024x668.jpg" alt="The Circular Lab" /></p>
<p>La beca consisti√≥ en un curso sobre la metodolog√≠a Design Sprint, durante el cual realizamos un&nbsp;<strong>SPRINT</strong>&nbsp;real para Ecoembes. Tutorizados por&nbsp;<a href="https://www.uxerschool.com">UXER School</a>, aplicamos Design Sprint al mundo del reciclaje, y en solo 5 d√≠as fuimos capaces de proponer y desarrollar ideas innovadoras que resuelven problemas en un negocio que inicialmente no conoc√≠amos.</p>
<h2 id="resumenejecutivo">Resumen ejecutivo</h2>
<p>Este ser√° un largo art√≠culo, por lo cual he decidido crear un resumen para que el lector pueda entender la idea global, y ya decidir si quiere adentrarse en todos los detalles.</p>
<p><a href="https://www.gv.com/sprint"><strong>Design SPRINT</strong></a>&nbsp;‚Äìo SPRINT, a secas‚Äì es una metodolog√≠a sorprendentemente productiva, que permite obtener excelentes resultados en un breve per√≠odo de tiempo.</p>
<p>Se puede aplicar al desarrollo de un producto o servicio al inicio de un proyecto, pero tambi√©n al desarrollo de una funcionalidad de un producto o servicio ya existente, o a la mejora de cualquier proceso. Es una metodolog√≠a flexible que se ha aplicado con √©xito en multitud de √°mbitos.</p>
<p>Se fomenta la producci√≥n individual y la toma de decisiones colectiva. Esto hace que, por un lado, la generaci√≥n de ideas sea m√°s abierta. En el momento de pensar y producir lo hacemos en general de forma individual, con lo cual no recibimos feedback negativo que nos cohiba o nos limite. Por otro lado, la toma de decisiones es colectiva, usando una jerarqu√≠a plana, lo cual nos hace part√≠cipes incluso de ideas que no hemos generado nosotros mismos, pero con las que nos sentimos de acuerdo.</p>
<p>En mi opini√≥n, el √©xito del proceso viene determinado por varios factores. En primer lugar, es importante conformar un equipo multidisciplinar, lo cual nos va a aportar diferentes puntos de vista en la generaci√≥n de ideas. Otro aspecto importante de la metodolog√≠a son los plazos cortos: la mayor√≠a de tareas tienen un plazo muy limitado, de 5, 10 o 15 minutos, lo cual nos hace trabajar bajo presi√≥n, obligando a escoger y descartar r√°pidamente ideas.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-reloj.jpg" alt="The famous Time Timer helps keep activities in term" /></p>
<p>Otro aspecto importante es dejar los egos a un lado, prescindir de los superh√©roes ‚Äìcentrarse en el trabajo colectivo en lugar de dar todo el protagonismo a los gur√∫s o expertos‚Äì y ser capaz de renunciar a tus propias ideas ‚Äìcuando el equipo decide que una idea no se va a utilizar, no debemos presionar para volver a incluirla. Para conducir el proceso, marcar las pautas, favorecer que prevalezca el esp√≠ritu colectivo y desatascar los bloqueos existe la figura del facilitador. En este caso el facilitador era Javier Larrea de UXER SCHOOL.</p>
<p>Visto en retrospectiva, el proceso se siente como un puzzle inicialmente desordenado, en el que poco a poco van encajando las piezas, de forma casi autom√°tica.</p>
<p>Por √∫ltimo, aclarar que&nbsp;<strong>Design Sprint</strong>&nbsp;es una metodolog√≠a adaptable a cada proyecto y organizaci√≥n, por tanto algunos procesos realizados pueden diferir de lo que encontramos en el&nbsp;<a href="https://www.gv.com/sprint/#book">libro oficial</a>&nbsp;o lo que hayamos encontrado en otros sprints.</p>
<h2 id="designsprintdeunvistazo">Design Sprint de un vistazo</h2>
<p>Design Sprint es una metodolog√≠a que se desarrolla t√≠picamente a lo largo de 5 d√≠as.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/design-sprint-resumen.png" alt="Design SPRINT" /></p>
<h3 id="da1comprendermap">D√≠a 1. Comprender (Map)</h3>
<p>Definimos el problema, articulando suposiciones, identificando al consumidor y logrando que todos los stakeholders est√©n alineados en el mismo objetivo y con la misma informaci√≥n.</p>
<h3 id="da2idearsketch">D√≠a 2. Idear (Sketch)</h3>
<p>Exploramos m√∫ltiples formas de resolver el problema, sin importar si es viable o no. Esta libertad para explorar y ser creativos con la soluci√≥n a menudo puede darnos conceptos e ideas muy novedosas.</p>
<h3 id="da3decidirdecide">D√≠a 3. Decidir (Decide)</h3>
<p>Al no disponer de tiempo para prototipar todas las ideas, es necesario tener un proceso para decidir cu√°l es la mejor idea y cu√°les debemos abandonar. A veces se escoger√° una sola versi√≥n, mientras que otras se decidir√° validar unas pocas alternativas.</p>
<h3 id="da4prototiparprototype">D√≠a 4. Prototipar (Prototype)</h3>
<p>Nuestra idea es mucho m√°s compleja que lo que podemos desarrollar en un d√≠a. Sin embargo, adoptando la mentalidad de prototipo construiremos una fachada, un prototipo de fidelidad media, lo bastante fidedigno como para que nos permita recopilar informaci√≥n de calidad de los tests.</p>
<h3 id="da5testeartest">D√≠a 5. Testear (Test)</h3>
<p>¬°Lleg√≥ el d√≠a! El objetivo aqu√≠ es validar (o no dar por buenas) las ideas del producto con usuarios reales, descubrir errores en el dise√±o de concepto, comprender a los usuarios y, en definitiva, crear un producto que las personas quieran usar.</p>
<h2 id="da1entender">D√≠a 1. Entender</h2>
<h3 id="formacindelosequipos">Formaci√≥n de los equipos</h3>
<p>Los participantes se repartieron entre 3 grupos, previamente formados por los organizadores. Cada grupo fue conformado por una mezcla de perfiles ‚Äìdise√±adores, marketing, emprendedores, ingenieros‚Äì y de grupos de edad diferentes.</p>
<p>Cada participante hizo una breve presentaci√≥n de qui√©n es, a qu√© se dedica y por qu√© se apunt√≥ al Circular Design Sprint.</p>
<h3 id="desafo">Desaf√≠o</h3>
<p>El cliente nos present√≥ el desaf√≠o, esto es, un resultado que el cliente desea obtener. Este deb√≠a ser el foco de las soluciones a las que llegaremos en el&nbsp;<strong>SPRINT.</strong></p>
<blockquote>
  <p>Desaf√≠o Ecoembes: ¬øC√≥mo podr√≠amos incentivar y motivar a los ciudadanos para que reciclen mejor los envases dom√©sticos?_</p>
</blockquote>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-desafio.jpg" alt="Ecoembes Challenge" /></p>
<p>El desaf√≠o pod√≠a estar enfocado tanto a ciudadanos como al canal&nbsp;<em>HORECA</em>&nbsp;(HOtel, CAtering y REstaurantes).</p>
<p>Seguidamente se llevaron acabo varias actividades para entrar en contacto con el contexto del desaf√≠o: el mundo del reciclaje.</p>
<h3 id="entrevistas">Entrevistas</h3>
<p>En parejas, hicimos dos entrevistas entre los participantes, tratando de averiguar cu√°les son los h√°bitos de consumo, conciencia medioambiental y patrones de reciclado.</p>
<h3 id="presentacindelcliente">Presentaci√≥n del cliente</h3>
<p>Introducci√≥n al origen, labor y objetivos de Ecoembes, a cargo de Zacar√≠as Torbado.</p>
<h3 id="mapadestakeholders">Mapa de Stakeholders</h3>
<p>En un gr√°fico con 3 c√≠rculos conc√©ntricos deb√≠amos colocar los stakeholders (partes implicadas) en el proceso de reciclado, de la siguiente manera:</p>
<ul>
<li>En el c√≠rculo interior se sit√∫an los stakeholders internos, esto es, los usuarios directos: ciudadanos o restaurantes en el caso de HORECA.</li>
<li>En el c√≠rculo intermedio los stakeholders directos, aquellos que tratan directamente con el usuario.</li>
<li>En el c√≠rculo exterior los indirectos, aquellos que no tratan directamente con el usuario.</li>
</ul>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-stakeholders-1.jpg" alt="Sticking sticky notes on the stakeholders map" /></p>
<p>Cada participante deb√≠a disponer postits con los stakeholders que se le ocurrieran, sin discutirlo con los dem√°s. En este paso deb√≠a prevalecer la cantidad, sin importar que dos postits dijeran casi lo mismo. Aproximadamente 10 minutos.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-stakeholders-2.jpg" alt="Stakeholders map" /></p>
<h3 id="contexto">Contexto</h3>
<p>Momento en que los expertos del lado del cliente ayudan a entender el contexto del problema a resolver. Se realizaron tres presentaciones a cargo de Ecoembes, en las cuales se nos explic√≥ el funcionamiento de las plantas de separaci√≥n de residuos, e investigaciones previas en Espa√±a y otros pa√≠ses sobre mejoras en el proceso de recogida, separaci√≥n de residuos y reciclaje (pago por generaci√≥n, incentivo al reciclado, trazado de bolsas mediante RFID, smartag, NFC, etc.)</p>
<h3 id="revisindestakeholders">Revisi√≥n de stakeholders</h3>
<p>Tras conocer el contexto se revis√≥ el mapa de stakeholders, pudiendo a√±adir los que se considera que faltan. Despu√©s se agruparon por tipo, disponi√©ndolos de forma radial, dividiendo los c√≠rculos como si fuera un queso.</p>
<h3 id="howmightwe">How Might We</h3>
<p>Esta es una actividad muy importante en el primer d√≠a del&nbsp;<strong>SPRINT</strong>. Vamos a comenzar la exploraci√≥n de ideas de forma abierta. Cada participante debe formular, en postits, preguntas del estilo ‚ÄúHow Might We‚Ä¶?‚Äù, esto es, c√≥mo podr√≠amos mejorar esto o aquello, motivar a los usuarios a realizar tal o cual cosa‚Ä¶ De nuevo sin interferir y valorando la cantidad por encima de la calidad.</p>
<p>Se disponen en un papel grande y se van ordenando y agrupando verticalmente por afinidad.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-hmw-1.jpg" alt="How Might We‚Ä¶?" /></p>
<p>Despu√©s, se crean categor√≠as y se colocan debajo los postits similares, donde juntamos uno encima de otro los que coincidan exactamente. Una vez agrupados, tenemos una idea de las preguntas que m√°s se repiten y los temas a los que hemos dado m√°s importancia. Cada persona tiene 3 votos en forma de pegatinas. Los votos se colocan en el tablero a la vez, con el fin de no influenciar a los dem√°s.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-hmw-3.jpg" alt="How Might We by categories" /></p>
<p>Los postits que han obtenido votos se pasan al mapa de stakeholders, coloc√°ndolos en el cuadrante que corresponda, seg√∫n las categor√≠as creadas.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-stakeholders-3.jpg" alt="Stakeholders map + How Might We" /></p>
<p>Tras la ordenaci√≥n de los stakeholders, se decidi√≥ sobre qu√© tipo de usuario y stakeholders √≠bamos a trabajar. En mi grupo seleccionamos el canal HORECA (HOteles, REstaurantes y CAtering), y el cuadrante que denominamos GENERADORES de residuos.</p>
<h3 id="entrevistasausuarios">Entrevistas a usuarios</h3>
<p>Se prepar√≥ un guion de entrevistas para los usuarios. Estas entrevistas nos deb√≠an permitir validar nuestras primeras hip√≥tesis.</p>
<p>Estas hip√≥tesis inclu√≠an el tipo de usuario promedio al que pretend√≠amos dar servicio, que decidimos que ser√≠a&nbsp;<strong>restaurantes de entre 2 y 6 empleados que tuvieran problemas para reciclar envases, por falta de motivaci√≥n, tiempo o espacio</strong>. El objetivo es no dirigir la entrevista, ni tratar de venderles una soluci√≥n, sino averiguar sus motivaciones y frustraciones relacionados con el reciclaje de envases dom√©sticos. Finalmente se puede hacer alguna pregunta sobre la soluci√≥n que tenemos en mente. La entrevista no deber√≠a tomar m√°s de 10 minutos.Por la tarde realizamos las entrevistas propiamente dichas, en la calle o por Skype/tel√©fono.</p>
<p>Cada participante hizo 1-2 entrevistas, siendo el objetivo un total de 6 o m√°s, n√∫mero que ya se considera representativo. Entre estos 6 normalmente habr√° 3-4 usuarios promedio, 1 extremo por arriba (restaurantes grandes) y 1 extremo por debajo (bares con un solo empleado).</p>
<h2 id="da2divergir">D√≠a 2. Divergir</h2>
<h3 id="generarnbsppersona">Generar&nbsp;<em>persona</em></h3>
<p>El primer ejercicio fue recopilar y sintetizar la informaci√≥n de las entrevistas del d√≠a anterior. La herramienta utilizada fue una hoja Excel, donde se recopilaron todas las respuestas de cada uno de los usuarios, clasific√°ndolas y buscando patrones. Finalmente se identificaron las frustraciones del usuario, sus motivaciones y los verbatim (frases literales cargadas de emociones, rabia, ira, etc., ideas con fuerza).</p>
<p>Dicha informaci√≥n se pas√≥ a una matriz de s√≠ntesis, ordenando las frases y patrones m√°s repetidos en:</p>
<ul>
<li>Patrones de comportamiento.</li>
<li>Motivaciones (Gains).</li>
<li>Frustraciones (Pains).</li>
<li>Verbatims.</li>
</ul>
<p>Tras detectar los patrones que m√°s se repiten se genera la persona, que tendr√° la siguiente estructura:</p>
<ul>
<li>Nombre y datos demogr√°ficos b√°sicos.</li>
<li>Historia.</li>
<li>Necesidad.</li>
<li>Raz√≥n.</li>
</ul>
<p>El modelo deber√≠a ser parecido a esta frase:</p>
<blockquote>
  <p>Mario Kempes es un jefe de cocina de 35 a√±os que trabaja en un bar que tiene 3 empleados. Recicla aceite y vidrio porque se lo pagan y se lo vienen a buscar, pero no recicla ni pl√°sticos ni cart√≥n por falta de incentivos econ√≥micos y espacio dentro del bar. Necesita que le paguen, le multen o le resuelvan el tema del espacio para poder reciclar m√°s._</p>
</blockquote>
<p>Tras analizar las entrevistas, comprobamos que nuestros supuestos iniciales no fueron validados, y nuestra idea inicial -una especie de etiqueta de restaurante responsable con los residuos, que sirviera para premiar a los que m√°s reciclan- no convenc√≠a a los due√±os de locales, por lo que deb√≠amos pivotar hacia nuevas soluciones.</p>
<h3 id="lightningdemos">Lightning demos</h3>
<p>B√∫squeda de proyectos, prototipos, productos o servicios ya desarrollados o implantados, cuya idea general sea similar a la que ha escogido el equipo, como fuente de inspiraci√≥n.</p>
<h3 id="brainstorming">Brainstorming</h3>
<p>Durante el tiempo estipulado (unos 10 minutos), cada miembro del equipo gener√≥ de forma individual todas las ideas que se le ocurrieron, en postits y bajo las siguientes premisas:</p>
<ul>
<li>Debe primar la cantidad sobre la calidad.</li>
<li>Debe primar lo visual sobre el texto.</li>
<li>Cada idea debe expresarse en aproximadamente 6 palabras.</li>
<li>Ideas ambiciosas.</li>
<li>No juzgar.</li>
<li>Se puede construir sobre las ideas de los dem√°s.</li>
</ul>
<p>Una vez generadas, se leen en voz alta a los dem√°s miembros del equipo y se aclaran dudas.</p>
<p>Seguidamente se disponen en el tablero y se ordenan.</p>
<ul>
<li>Se ponen una sobre otra aquellas que son exactamente iguales.</li>
<li>Se agrupan por tem√°tica.</li>
<li>Sobre cada grupo de postits relacionados se dispone un postit en diagonal (rombo) como t√≠tulo.</li>
</ul>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia2-brainstorming-1.jpg" alt="Brainstorming" /></p>
<p>¬°Llega el momento de votar! Cada miembro del equipo toma 3 pegatinas para votar 3 ideas diferentes. Se vota y se descartan las ideas que no han recibido ning√∫n voto.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia2-brainstorming-2.jpg" alt="Voting" /></p>
<p>Entre las ideas que han recibido votos, se seleccionan unas pocas con las que vamos a trabajar, y se descarta el resto. No se tiene por qu√© descartar las menos votadas, aunque en principio es lo l√≥gico, pero el grupo puede decidir incorporar alguna idea que haya recibido pocos votos pero que tenga sentido junto con el resto. Se re√∫nen estas ideas en el tablero, donde ya podremos visualizar el&nbsp;<em>big picture</em>&nbsp;de nuestra futura soluci√≥n.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia2-brainstorming-4.jpg" alt="Stakeholders map + voted ideas from brainstorming" /></p>
<h3 id="crazy8">Crazy 8</h3>
<p>Cada miembro del equipo deb√≠a tomar un folio y doblarlo en 8 cuadrantes. En cada uno de estos cuadrantes debe hacer un esbozo de la soluci√≥n que se va a desarrollar. Para ello, cada minuto escribir√° o dibujar√° un cuadrante. Al final de los 8 minutos deber√° tener un boceto del prototipo. Este fue mi <strong>crazy 8</strong> para la idea que conjuntamente hab√≠amos decidido en el paso anterior.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia2-crazy8.jpg" alt="Crazy 8" /></p>
<h3 id="prototipoindividual">Prototipo individual</h3>
<p>Cada miembro del equipo, durante aproximadamente 1 hora, deb√≠a realizar un prototipo de la soluci√≥n a desarrollar. Deb√≠a hacerlo en papel, usando una o varias hojas, con texto, diagramas, dibujos y postits. Una vez pasado el tiempo se entreg√≥ el prototipo al facilitador, que al d√≠a siguiente lo dispuso en forma de Art Museum en el tablero, para su exhibici√≥n.</p>
<h2 id="da3decidir">D√≠a 3. Decidir</h2>
<h3 id="artmuseum">Art Museum</h3>
<p>En cada tablero de grupo se exhibieron los prototipos individuales. Los miembros del grupo leyeron cada propuesta sin conocer qui√©n la hab√≠a realizado. Una a una se desvel√≥ qui√©n dise√±√≥ cada propuesta y se le pudieron formular preguntas para aclarar dudas. Seguidamente, cada integrante del equipo deb√≠a tomar 5 pegatinas para votar los aspectos de cada prototipo que m√°s le gustaban. Se debe pensar primero y votar a la vez para evitar influenciar a los dem√°s. Posteriormente, cada miembro del equipo tom√≥ una pegatina azul m√°s grande y emiti√≥ un voto sobre su idea preferida. Tambi√©n se piensa primero y se vota despu√©s, todos a la vez.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia3-art-museum-1.jpg" alt="Art Museum and votes" /></p>
<h3 id="pitchindividual">Pitch individual</h3>
<p>Cada integrante del equipo deb√≠a realizar la presentaci√≥n de su idea al cliente, en un minuto y medio.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia3-pitch-1.jpg" alt="Individual pitch" /></p>
<p>Una vez presentadas todas las propuestas y despu√©s de un tiempo de reflexi√≥n, el cliente (llamado&nbsp;<strong>decisor</strong>&nbsp;en la metodolog√≠a Design Sprint) se√±al√≥ qu√© aspectos valoraba positivamente de cada propuesta e indic√≥ mediante pegatinas amarillas cu√°les eran las 2 o 3 ideas que deseaba incluir en el prototipo final.</p>
<h3 id="userjourney">User journey</h3>
<p>De forma individual, y tomando como input los puntos m√°s votados de los prototipos y el feedback del cliente, cada integrante deb√≠a generar un user journey en 8 pasos. Utilizando 8 postits, en cada uno apuntamos una frase resumiendo un paso del user journey de nuestro producto o servicio. Conceptualmente los repartimos en 3 fases:</p>
<ul>
<li><em>Antes</em>: pasos que se dan antes de usar el producto o servicio</li>
<li><em>Durante</em>: pasos que se dan durante el uso</li>
<li><em>Despu√©s</em>: pasos que se dan despu√©s del uso</li>
</ul>
<p>Una vez trabajados los user journeys individuales, en el tablero, disponemos en 8 columnas los user journeys de todos los integrantes del equipo. Inicialmente cada user journey utilizar√° las 8 columnas, a lo largo de una fila. Seguidamente los ordenamos, agrupando los pasos similares o que identifican la misma acci√≥n, y poni√©ndolos debajo de aquel que mejor la resuma. Nos debe quedar un user journey con 8 pasos, y en cada columna solo tendremos unos pocos postits (uno o dos) para las diferentes ideas surgidas para dicho paso.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia3-user-journey.jpg" alt="User Journey" /></p>
<h3 id="pitchdeuserjourney">Pitch de user journey</h3>
<p>Un miembro designado por el equipo deb√≠a realizar un nuevo pitch de un minuto y medio describiendo el user journey de la idea tal y como se ha decidi√≥ en el punto anterior.</p>
<h3 id="borradordeprototipo">Borrador de prototipo</h3>
<p>Los integrantes del equipo deb√≠an trabajar en la creaci√≥n de un nuevo borrador del prototipo, incorporando el feedback recibido y el user journey generado. En este punto se puede repartir el trabajo entre los miembros del equipo.</p>
<h2 id="da4prototipar">D√≠a 4. Prototipar</h2>
<h3 id="eleccinderoles">Elecci√≥n de roles</h3>
<p>El equipo deb√≠a designar varios roles para la realizaci√≥n del prototipo, donde una persona pod√≠a asumir varios roles:</p>
<ul>
<li><em>Dise√±adores</em>: dise√±o gr√°fico de producto, presentaci√≥n, landing page o mockups de aplicaci√≥n.</li>
<li><em>Creadores de contenido</em>: im√°genes y textos para presentaci√≥n, landing pages o mockups de aplicaci√≥n.</li>
<li><em>Copys</em>: textos para llamadas a la acci√≥n y otros textos creativos.</li>
<li><em>Stitcher</em>: aquel que se encarga de ensamblar las piezas y que lo que producen los dem√°s tenga sentido en conjunto.</li>
</ul>
<h3 id="creacindelprototipo">Creaci√≥n del prototipo</h3>
<p>Los integrantes del equipo deb√≠an trabajar en la creaci√≥n del prototipo, de manera individual, en subgrupos o como estimaran conveniente. Finalmente el stitcher deb√≠a encargarse de la coordinaci√≥n y uni√≥n de las piezas.</p>
<p>Dicho prototipo es tan solo una fachada del producto o servicio a dise√±ar, en ning√∫n caso se pretende implementar un producto de manera exhaustiva, ya que el tiempo es extremadamente limitado. El objetivo de este prototipo es poder validar nuestras suposiciones mediante los tests que se realizar√°n el d√≠a siguiente.</p>
<p>En el caso de mi equipo, el prototipo deb√≠a mostrar un servicio de recogida de pl√°sticos en los restaurantes. Dicho servicio inclu√≠a el uso de una app m√≥vil, pero esta app no era la parte central de la aplicaci√≥n, por lo que decidimos hacer una presentaci√≥n comercial en lugar de un prototipo navegable.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia4-prototipo.png" alt="Prototype" /></p>
<p>Otros equipos estimaron hacer prototipos f√≠sicos mediante cajas, papel, etc., ya que deb√≠an simular dispositivos electr√≥nicos que no existen.</p>
<h2 id="da5validar">D√≠a 5. Validar</h2>
<h3 id="guiondeentrevistadevalidacin">Guion de entrevista de validaci√≥n</h3>
<p>En primer lugar era necesario redactar un guion de entrevista al usuario final, incluyendo c√≥mo se le va a abordar, en caso de ser entrevistas a puerta fr√≠a. Una vez m√°s, las entrevistas deben buscar la validaci√≥n del producto, no su aceptaci√≥n por parte del usuario.</p>
<ul>
<li>¬øCumple nuestra soluci√≥n con sus necesidades?</li>
<li>¬øSon capaces de usar nuestra interfaz/servicio?</li>
<li>¬øQu√© le gusta o no le gusta de lo que hemos hecho?</li>
<li>¬øQu√© le gustar√≠a mejorar?</li>
</ul>
<p>Para ello la metodolog√≠a buscar√°:</p>
<ul>
<li>Usar preguntas abiertas en lugar de preguntas dirigidas.</li>
<li>Si existe un prototipo utilizable o clicable, dejar al usuario interactuar con √©l para ver si lo entiende y encontrar sus bloqueos o frustraciones con respecto a la interacci√≥n.</li>
<li>Realizar la m√≠nima explicaci√≥n de contexto necesaria antes de enfrentar al usuario al prototipo, en lugar de contarle todo, para ver si lo entiende, y evitar condicionarlo.</li>
</ul>
<p>En nuestro caso, no hab√≠a prototipo clicable ya que se trataba m√°s de un servicio que de la propia aplicaci√≥n, por lo que optamos por mostrarle la presentaci√≥n completa y averiguar m√°s tarde qu√© pensaba de la soluci√≥n.</p>
<h3 id="entrevistasdevalidacin">Entrevistas de validaci√≥n</h3>
<p>Para la realizaci√≥n de entrevistas, seg√∫n sean a puerta fr√≠a o previamente concertadas, habr√° que salir a la calle o bien usar una sala de entrevistas, o Skype.</p>
<p>El caso ideal consistir√≠a en concertar una serie de entrevistas presenciales con usuarios finales, y disponer de una sala en la que solo una persona hable con √©l, sin apuntar nada, para poder mantener contacto visual. Desde fuera otras personas observar√≠an la entrevista, incluyendo la pantalla que est√© manejando el usuario si es el caso, y apuntar√≠an todo lo que observen de lo que el usuario dice y lo que realmente hace. Idealmente se grabar√≠a todo en v√≠deo para poder repasarlo posteriormente.</p>
<p>Alternativas a esta situaci√≥n ideal incluyen realizar la entrevista por Skype y grabarla, o bien que realicen la entrevista de forma presencial 2 o m√°s personas, de las cuales una hablar√° con el usuario sin perder contacto visual, mientras que otras grabar√°n en audio/video (si la persona se puede mostrar cohibida puede ser mejor audio, ya que no se percibe c√≥mo te graban) y anotar√°n los comentarios. El n√∫mero de entrevistas de validaci√≥n suficiente es de unas 10, entre las cuales debemos apuntar a nuestro usuario objetivo (persona) al menos en un 80%.</p>
<h3 id="conclusionesdelavalidacinaprendizaje">Conclusiones de la validaci√≥n. Aprendizaje</h3>
<p>Se re√∫ne de nuevo el equipo y se extraen patrones de las entrevistas. Para ello clasificaremos a los usuarios entrevistados seg√∫n su perfil y agruparemos las respuestas recibidas. A partir de este aprendizaje sacaremos conclusiones sobre qu√© partes de la soluci√≥n pueden funcionar y cu√°les no, as√≠ como la soluci√≥n a nivel global.</p>
<ul>
<li>¬øTiene sentido nuestra propuesta para los usuarios?</li>
<li>¬øSaben interactuar con ella?</li>
<li>¬øLa podemos mejorar? ¬øC√≥mo?</li>
<li>¬øSeguimos con ella o la descartamos?</li>
</ul>
<h3 id="pitchfinal">Pitch final</h3>
<p>El equipo deb√≠a preparar un pitch final para presentar al cliente el prototipo realizado junto con las el aprendizaje obtenido de la validaci√≥n. Este pitch final deb√≠a durar 5 minutos. Se realiz√≥ el pitch ante el cliente y se escuch√≥ el feedback por parte de este.</p>
<h2 id="conclusiones">Conclusiones</h2>
<p>La impresi√≥n final fue que en un muy breve espacio de tiempo se alcanz√≥ un resultado de gran calidad, donde se puso en juego mucha creatividad y soluciones originales. En varios puntos hubo que dar un golpe de tim√≥n, cuando se vio que los supuestos iniciales no eran validados, y se logr√≥ hacer sin demasiada resistencia por parte de los autores de dichas ideas iniciales. Aparentemente, las ideas no ten√≠an un √∫nico autor y, de alguna manera, todos los miembros del equipo se sent√≠an part√≠cipes y realizaron su aportaci√≥n, tanto en la generaci√≥n de ideas como en la toma de decisiones.</p>
<p>Resulta un proceso bastante sorprendente desde dentro, ya que al principio hay una multitud de ideas dispares a las que poco a poco se va poniendo orden y descartando, bajo mucha presi√≥n de tiempo, hasta que finalmente todo va convergiendo de una forma que parece natural.</p>
<p>Asimismo, debido a la filosof√≠a de exploraci√≥n sin censura, las soluciones empiezan siendo muy ambiciosas y poco factibles, pero a medida que avanza el proceso se cancelan algunas ideas, se recombinan con otras o se encuentran soluciones degradadas a las ideas m√°s de ciencia ficci√≥n, de modo que la soluci√≥n final es factible. Esto nos permite llegar a poner en pr√°ctica ideas que inicialmente habr√≠amos descartado por parecernos imposibles.</p>]]></description><link>https://juanguijordan.com/blog/2019-05_circular-design-sprint</link><guid isPermaLink="true">https://juanguijordan.com/blog/2019-05_circular-design-sprint</guid><category><![CDATA[design-sprint]]></category><category><![CDATA[ux]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Tue, 25 Jun 2019 09:00:00 GMT</pubDate></item><item><title><![CDATA[Usando componentes web generados con Stencil en Ionic]]></title><description><![CDATA[<p>Esta publicaci√≥n tiene como objetivo proporcionar instrucciones claras sobre c√≥mo usar componentes creados y compilados con Stencil en una aplicaci√≥n Ionic. Te guiar√© en el proceso de hacer que un componente web est√© disponible en tus templates Ionic, sin necesidad de registrarlos en el registro npm o agregar feos tags script a tu √≠ndice.</p>
<h2 id="motivacin">Motivaci√≥n</h2>
<p>Creado por el <a href="http://ionicframework.com/">equipo de Ionic Framework</a>, uno esperar√≠a que el uso de componentes web Stencil en proyectos Ionic ser√≠a, si no autom√°tico e integrado en el framework mediante alg√∫n comando CLI, al menos bien documentado.</p>
<p>Bueno, ese no es el caso, ya que los chicos de Ionic proporcionan <a href="https://stenciljs.com/docs/framework-integration">instrucciones de integraci√≥n del framework</a> para Angular, React, Vue y Ember, pero no los proporcionan para Ionic. Tal vez descuid√© algo obvio, pero tuve que investigar un poco para que mis componentes Stencil funcionaran en un proyecto Ionic, y el esfuerzo fue lo suficientemente grande como para hacerme pensar en crear una publicaci√≥n, esperando que pueda ayudar a alguien.</p>
<h2 id="requisitos">Requisitos</h2>
<p>Como requisito, debes crear un componente Stencil, una tarea para la que puedes encontrar la documentaci√≥n adecuada en el sitio web de Stencil. El componente Stencil tampoco necesita estar registrado en el registro npm.</p>
<h2 id="procesodeintegracin">Proceso de integraci√≥n</h2>
<p>Si integramos componentes web registrados en npm, el proceso es m√°s sencillo. Afrontemos en esta secci√≥n el caso en el que desarrollamos un componente personalizado, pero no lo estamos publicando en el registro npm. Nuestro objetivo es una integraci√≥n limpia sin etiquetas de script en el archivo <code>index.html</code>.</p>
<p>El proceso consta de tres pasos.</p>
<ul>
<li>Primero construimos el componente y copiamos los archivos de distribuci√≥n a nuestro proyecto.</li>
<li>Luego le decimos al lado Angular de las cosas c√≥mo usar el componente.</li>
<li>Por √∫ltimo, le decimos al lado Ionic de las cosas que incluya el componente cuando construya el paquete. La forma en que hablamos con Angular (realmente Ionic-Angular) depende de si estamos cargando p√°ginas de forma <em>anticipada</em> o de forma <em>diferida</em>.</li>
</ul>
<h3 id="paso1generarycopiarcomponente">Paso 1. Generar y copiar componente</h3>
<p>Construya el componente y copie el contenido de la carpeta dist a una carpeta en nuestro proyecto. En este ejemplo, elegimos la carpeta <code>@img/lib/components/my-google-maps</code>.</p>
<h3 id="paso2importarenelappmodulets">Paso 2. Importar en el app.module.ts</h3>
<p>Primero, necesitas importar el <code>CUSTOM_ELEMENTS_SCHEMA</code>, y agregarlo a la secci√≥n<code>schemas</code> del <code>@NgModule</code>. Si importas <code>CUSTOM_ELEMENTS_SCHEMA</code> en uno de los m√≥dulos de tu p√°gina, el compilador Angular aceptar√° elementos que no reconoce (de lo contrario, arrojar√° un error). Si realizas una carga diferida, debes importar este esquema en cada m√≥dulo de p√°gina en el que desees utilizar el componente web. Si est√°s cargando con anticipaci√≥n, solo necesitas importar el esquema en <code>app.module.ts</code>.</p>
<p>Luego, agrega un import a la carpeta <code>dist/mycomponent</code>. Este import no carga todo el componente web. Solo carga una peque√±a parte del c√≥digo que permite a Ionic cargar el componente web completo m√°s tarde, cuando una plantilla lo solicita.</p>
<p>Cuando hayas realizado ambos pasos, tu <code>app.module.ts</code> deber√≠a parecerse al siguiente si est√°s cargando con anticipaci√≥n.</p>
<pre><code class="typescript language-typescript">import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core'; // add this import
import '@img/lib/components/my-google-maps/dist/mycomponent'; // add this import

@NgModule({
  declarations: [],
  imports: [],
  bootstrap: [],
  entryComponents: [],
  providers: [],
  schemas: [CUSTOM_ELEMENTS_SCHEMA], // add this line
})
export class AppModule {}
</code></pre>
<p>Si usas lazy loading, importa solo el componente web en <code>app.module.ts</code>, y solo el esquema en los m√≥dulos individuales cargados de forma diferida.</p>
<h3 id="paso3usarionicappscriptsparaincluirelcomponenteenelbuild">Paso 3. Usar ionic-app-scripts para incluir el componente en el build</h3>
<p>Crearemos un archivo <code>copy.config.js</code> que definir√° algunas reglas para copiar el componente web a nuestra compilaci√≥n final. Una buena pr√°ctica es crearlo en una carpeta de configuraci√≥n, para separarlo de otros archivos est√°ndar como <code>package.json</code> o <code>ionic.config.json</code>.</p>
<p>Este archivo puede indicarle a los scripts de aplicaciones Ionic que incluyan contenido adicional cuando compile una aplicaci√≥n i√≥nica. Si creas el archivo, ponlo en una carpeta llamada <code>config</code> que est√© en el mismo nivel de directorio que la carpeta <code>src</code>. En primer lugar, declaremos el archivo en <code>package.json</code>. Esto le dir√° a los scripts de la aplicaci√≥n que usen este archivo. Agrega el siguiente campo a tu <code>package.json</code>:</p>
<pre><code class="json language-json">"config": {
    "ionic_copy": "./config/copy.config.js"
}
</code></pre>
<p>Luego, pon esto dentro de <code>config\copy.config.js</code>:</p>
<pre><code class="javascript language-javascript">module.exports = {
  copyTimeAgoWebComponent: {
    src: [
      '{{ROOT}}/src/img/lib/components/my-google-maps/dist/mycomponent**/*',
    ],
    dest: '{{BUILD}}',
  },
};
</code></pre>
<p>Una vez que hayas realizado esos cambios, los app-scripts sabr√°n c√≥mo incluir el componente web en sus compilaciones.
Ahora puedes utilizar componentes web Stencil en tus plantillas Ionic como cualquier otro componente web.</p>]]></description><link>https://juanguijordan.com/blog/2018-08_ionic-stencil-integration</link><guid isPermaLink="true">https://juanguijordan.com/blog/2018-08_ionic-stencil-integration</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Wed, 12 Sep 2018 10:00:00 GMT</pubDate></item><item><title><![CDATA[Versionar caracter√≠sticas en una aplicaci√≥n angular]]></title><description><![CDATA[<p>Imagina un escenario en el que tu aplicaci√≥n debe mostrar diferentes versiones de un componente o servicios a diferentes grupos de usuarios. Si suena un poco tra√≠do por los pelos, toma el siguiente escenario que se propuso a nuestro equipo de desarrollo en cierto proyecto real:</p>
<ul>
<li>La aplicaci√≥n se descarga desde <strong>Google Play/App Store</strong> y se implementar√° en diferentes pa√≠ses, utilizando el mismo app ID.</li>
<li>Los diferentes pa√≠ses tienen diferentes regulaciones sobre si la aplicaci√≥n puede mostrar fotograf√≠as de usuarios, campos espec√≠ficos, etc. Adem√°s, algunas funciones deber√≠an estar totalmente deshabilitadas en algunos pa√≠ses.</li>
<li>La aplicaci√≥n seguir√° creciendo en funcionalidad, pero no necesariamente al mismo tiempo para todos los pa√≠ses:
algunos pa√≠ses pueden decidir no actualizar alguna funci√≥n o actualizarla m√°s tarde;
algunos pa√≠ses pueden tomar m√°s tiempo para revisar si alguna caracter√≠stica nueva en particular sigue sus regulaciones de privacidad ‚Ä¶</li>
</ul>
<p>El enfoque ingenuo de tener directivas <code>ngIf</code> por todas partes puede funcionar para los casos m√°s simples
pero ser√≠a dif√≠cil de mantener y tambi√©n saturar√≠a nuestras hermosas plantillas.
Adem√°s, los componentes que utilizan diferentes servicios al cambiar de una versi√≥n a otra ser√≠an muy dif√≠ciles de mantener.</p>
<p>As√≠ que decidimos utilizar el siguiente enfoque para hacer frente a todas esas situaciones:</p>
<ul>
<li>Crear una directiva para mostrar/ocultar partes de una plantilla seg√∫n el pa√≠s y la versi√≥n.
Eso ser√≠a como una extensi√≥n de <code>ngIf</code> con nuestros par√°metros <code>country</code> y <code>version</code>,
y dar√≠a una respuesta a problemas simples como ocultar una funcionalidad completa en algunos pa√≠ses,
u ocultar un campo en particular para algunos pa√≠ses/versiones.</li>
<li>Crear una directiva que devuelva un componente din√°mico, seg√∫n los par√°metros <code>country</code> y <code>version</code>.
Esta directiva se utilizar√≠a para casos m√°s generales,
donde una versi√≥n de componente puede proporcionar una funcionalidad muy diferente a otra versi√≥n.</li>
</ul>
<p>Para ilustrar este post, hemos creado una aplicaci√≥n. Nuestra aplicaci√≥n muestra con orgullo algunos datos de pa√≠ses,
como la bandera de un pa√≠s, el √°rea y la poblaci√≥n.
Nos pusimos en contacto con gobiernos de todo el mundo y les pedimos amablemente que se unieran a nuestra revolucionaria aplicaci√≥n sin fines de lucro. proporcionando algunos datos b√°sicos:</p>
<ul>
<li>Nombre del pa√≠s</li>
<li>√Årea</li>
<li>Poblaci√≥n</li>
</ul>
<p>Algunos de estos pa√≠ses tienen regulaciones muy severas y quer√≠an unirse a la aplicaci√≥n,
pero sin revelar su √°rea y poblaci√≥n inicialmente,
hasta que sus abogados determinen si estos datos podr√≠an mostrarse.
Por eso dise√±amos la primera versi√≥n de la aplicaci√≥n con una sola pantalla,
donde el usuario seleccionar√≠a el pa√≠s de un combo box,
y un componente con dos subcomponentes que muestran los datos del pa√≠s:</p>
<ul>
<li>Un componente de encabezado para el nombre del pa√≠s</li>
<li>Un componente de contenido para los datos.</li>
</ul>
<p>El componente de contenido debe ser opcional y se mostrar√° seg√∫n las normativas del pa√≠s.</p>
<p><img src="/img/blog/2018-04_versioning-features-in-an-angular-app/features_v1.png" alt="Dise√±o de la primera versi√≥n de los componentes" /></p>
<p>Estas son algunas capturas de pantalla de la aplicaci√≥n en este punto:</p>
<p><img src="/img/blog/2018-04_versioning-features-in-an-angular-app/features_v1_screenshots.png" alt="Capturas de pantalla de la primera versi√≥n de la aplicaci√≥n." /></p>
<p>Despu√©s de la puesta en marcha, algunos usuarios estaban tan emocionados que empezaron a pedir algunas funcionalidades nuevas:</p>
<ul>
<li>Quer√≠an que se mostrara la bandera del pa√≠s en el encabezado.</li>
<li>Algunos datos m√°s como capital del pa√≠s y ¬øqu√© m√°s‚Ä¶? el himno nacional, claro.</li>
</ul>
<p>El equipo de desarrollo estuvo de acuerdo en que, dado que algunos pa√≠ses a√∫n no hab√≠an proporcionado su √°rea y poblaci√≥n,
Era razonable pensar que algunos de ellos no entregar√≠an instant√°neamente su bandera, capital e himno.
As√≠ que decidimos versionar el encabezado y los componentes de contenido, de modo que pudi√©ramos darles un camino sencillo para actualizar sus datos sin dejar de verse bien en la aplicaci√≥n, mostrando los componentes antiguos en lugar de los componentes nuevos con campos vac√≠os.</p>
<p><img src="/img/blog/2018-04_versioning-features-in-an-angular-app/features_v2.png" alt="Dise√±o de la versi√≥n final de los componentes" /></p>
<p>Estas son algunas capturas de pantalla de la versi√≥n final de la aplicaci√≥n:</p>
<p><img src="/img/blog/2018-04_versioning-features-in-an-angular-app/features_v2_screenshots.png" alt="Screenshots of the final version of the app" /></p>
<p>Nuestra aplicaci√≥n se basa en dos directivas, como dijimos.
La primera mostrar√°/ocultar√° un elemento dependiendo de la disponibilidad de funciones para un determinado pa√≠s,
donde las caracter√≠sticas ser√°n <code>COUNTRY_HEADER</code> y <code>COUNTRY_CONTENT</code>.
Esta directiva obtendr√° la disponibilidad de funciones de un servicio, el llamado <code>CountryConfigService</code>.</p>
<pre><code class="typescript language-typescript">import {
  CountryConfigDictionary,
  DEFAULT_COUNTRY_CONFIG,
  FeatureVersionDictionary,
} from './country-config.model';

@Injectable()
export class CountryConfigService {
  private config: CountryConfigDictionary = DEFAULT_COUNTRY_CONFIG;
  getCountryFeatures(countryCode: string): FeatureVersionDictionary {
    return this.config[countryCode].features;
  }

  isFeatureEnabled(feature: string, countryCode: string): boolean {
    const countryFeatures = this.getCountryFeatures(countryCode);
    return countryFeatures.hasOwnProperty(feature);
  }

  getFeatureVersion(feature: string, countryCode: string): number {
    const countryFeatures = this.getCountryFeatures(countryCode);
    return countryFeatures[feature];
  }
}
</code></pre>
<p>La <code>config</code> es un objeto que sigue un modelo <code>CountryConfigDictionary</code>
que nos permite definir qu√© versi√≥n de los componentes <code>COUNTRY_HEADER</code> y <code>COUNTRY_CONTENT</code>,
si hay alguno, est√° usando cada pa√≠s:</p>
<pre><code class="typescript language-typescript">export const DEFAULT_COUNTRY_CONFIG: CountryConfigDictionary = {
  es: {
    features: {
      COUNTRY_HEADER: 2,
      COUNTRY_CONTENT: 2,
    },
  },
  fr: {
    features: {
      COUNTRY_HEADER: 2,
      COUNTRY_CONTENT: 2,
    },
  },
  it: {
    features: {
      COUNTRY_HEADER: 2,
      COUNTRY_CONTENT: 1,
    },
  },
  pt: {
    features: {
      COUNTRY_HEADER: 1,
      COUNTRY_CONTENT: 1,
    },
  },
  uk: {
    features: {
      COUNTRY_HEADER: 1,
    },
  },
};
</code></pre>
<h2 id="ladirectivafeatureif">La directiva FeatureIf</h2>
<p>Con eso en mente, veamos la directiva <code>FeatureIf</code>.
Mostrar√° un elemento si la funci√≥n est√° habilitada para el pa√≠s.
Opcionalmente, podemos definir la versi√≥n m√≠nima implementada por el pa√≠s,
lo que significa que si el pa√≠s usa una versi√≥n m√°s baja, el elemento estar√° oculto.
Omitir√© los imports est√°ndar para ahorrar espacio en el listado:</p>
<pre><code class="typescript language-typescript">import { CountryConfigService } from '../../services/country-config/country-config.service';

@Directive({
  selector: '[appFeatureIf]',
})
export class FeatureIfDirective implements OnChanges {
  private _featureName: string;
  private _countryCode: string;
  private _minVersion = 0;
  private _else = false;
  private _hasView: boolean;

  @Input() set appFeatureIf(featureName: string) {
    this._featureName = featureName;
  }

  @Input() set appFeatureIfCountryCode(value: string) {
    this._countryCode = value;
  }

  @Input() set appFeatureIfVersion(value: number) {
    this._minVersion = value;
  }

  @Input() set appFeatureIfElse(value: boolean) {
    this._else = value;
  }

  constructor(
    private templateRef: TemplateRef&lt;any&gt;,
    private viewContainerRef: ViewContainerRef,
    private countryConfigService: CountryConfigService
  ) {}

  ngOnChanges(changes: SimpleChanges): void {
    if (changes) {
      this.applyChanges();
    }
  }

  private applyChanges(): void {
    const featureEnabled = this.countryConfigService.isFeatureEnabled(
      this._featureName,
      this._countryCode
    );
    const featureVersion =
      this.countryConfigService.getFeatureVersion(
        this._featureName,
        this._countryCode
      ) || 0;
    const enabled: boolean =
      featureEnabled &amp;&amp; featureVersion &gt;= this._minVersion;
    const displayed: boolean =
      (enabled &amp;&amp; !this._else) || (!enabled &amp;&amp; this._else);
    this.embedTemplate(displayed);
  }

  private embedTemplate(enabled): void {
    if (enabled &amp;&amp; !this._hasView) {
      this.viewContainerRef.createEmbeddedView(this.templateRef);
      this._hasView = true;
    } else if (!enabled &amp;&amp; this._hasView) {
      this.viewContainerRef.clear();
      this._hasView = false;
    }
  }
}
</code></pre>
<p>Esta directiva estructural hace uso de 4 par√°metros: <code>featureName</code>, <code>countryCode</code>, <code>featureVersion</code> y <code>else</code>.
Presta atenci√≥n a c√≥mo definimos las propiedades de entrada en una directiva estructural:</p>
<ul>
<li>La primera entrada toma el nombre de la misma directiva: <code>appFeatureIf</code>.
Usamos un setter para guardarlo internamente como <code>_featureName</code>.</li>
<li>El resto de entradas toman el nombre de la directiva m√°s el nombre del par√°metro.
Por ejemplo, la entrada <code>appFeatureIfCountryCode</code> hace referencia al par√°metro de directiva <code>countryCode</code>.
Tambi√©n usamos aqu√≠ un setter para mapear la entrada a la variable privada <code>_countryCode</code>.</li>
</ul>
<p>Observa a continuaci√≥n c√≥mo se utiliza la directiva en una plantilla.
El primer par√°metro no necesita una clave, mientras que el resto se pasa con tuplas <code>"key: value"</code>, separadas por un punto y coma (<code>;</code>).</p>
<pre><code class="html language-html">&lt;div *appFeatureIf="'COUNTRY_HEADER';countryCode:code;version:2"&gt;
  Show only for countries implementing the COUNTRY_HEADER feature with version
  &gt;= 2
&lt;/div&gt;

&lt;div *appFeatureIf="'COUNTRY_HEADER';countryCode:code;version:2; else:'true'"&gt;
  Show otherwise
&lt;/div&gt;
</code></pre>
<p>Lo que b√°sicamente hace la directiva es:</p>
<ul>
<li>Registra cambios en cualquiera de los inputs.</li>
<li>Cuando se crea una instancia de la directiva o cualquiera de los inputs cambia, ejecuta <code>applyChanges()</code>.</li>
<li>Calcula si la funcionalidad est√° habilitada de acuerdo con <code>featureName</code>,<code>countryCode</code> y <code>minVersion</code>.</li>
<li>Calcula si el elemento debe mostrarse.
Si el par√°metro <code>else</code> est√° definido y es <code>true</code>, se mostrar√° si la funci√≥n est√° deshabilitada.</li>
<li>Ejecuta <code>embedTemplate()</code>, que crea la vista embebida en el contenedor de la vista si el elemento debe mostrarse,
o borra el contenedor de vista de lo contrario.</li>
</ul>
<p>Usamos esta directiva en dos casos en nuestra aplicaci√≥n.
En el encabezado, lo usamos para ocultar la bandera de los pa√≠ses que implementan la versi√≥n 1 de <code>COUNTRY_HEADER</code>.</p>
<pre><code class="html language-html">&lt;div
  *appFeatureIf="'COUNTRY_HEADER';countryCode:country.code;
  version:2"
  class="flag {{country.code}}"
&gt;&lt;/div&gt;
</code></pre>
<p>En el componente padre, usamos la directiva con el par√°metro <code>else</code> a <code>true</code>,
para mostrar un texto informativo cuando el componente de contenido no est√° disponible.</p>
<pre><code class="html language-html">&lt;div
  class="no-feature"
  *appFeatureIf="'COUNTRY_CONTENT';
  countryCode:country.code;else:'true'"
&gt;
  This feature is not yet available in {{country.name}}.
&lt;/div&gt;
</code></pre>
<h2 id="ladirectivafeatureversion">La directiva FeatureVersion</h2>
<p>Nuestra segunda directiva nos permitir√° inyectar din√°micamente un componente u otro, dependiendo de algunos par√°metros.</p>
<pre><code class="typescript language-typescript">import { CountryConfigService } from '../../services/country-config/country-config.service';
import { DynamicComponentService } from '../../services/dynamic-component/dynamic-component.service';
import { DynamicComponent } from '../../services/dynamic-component/dynamic-component.model';

@Directive({
  selector: '[appFeatureVersion]',
})
export class FeatureVersionDirective implements OnChanges {
  private _featureName: string;
  private _countryCode: string;
  private _data: any;
  private componentRef: ComponentRef&lt;DynamicComponent&gt;;

  @Input() set appFeatureVersion(featureName: string) {
    this._featureName = featureName;
  }

  @Input()
  set appFeatureVersionCountryCode(value: string) {
    this._countryCode = value;
  }

  @Input()
  set appFeatureVersionData(value: any) {
    this._data = value;
  }

  constructor(
    private viewContainerRef: ViewContainerRef,
    private countryConfigService: CountryConfigService,
    private dynamicComponentService: DynamicComponentService,
    private componentFactoryResolver: ComponentFactoryResolver
  ) {}

  ngOnChanges(changes: SimpleChanges): void {
    if (changes) {
      this.applyChanges();
    }
  }

  private applyChanges(): void {
    const featureEnabled = this.countryConfigService.isFeatureEnabled(
      this._featureName,
      this._countryCode
    );
    const featureVersion =
      this.countryConfigService.getFeatureVersion(
        this._featureName,
        this._countryCode
      ) || 0;
    const dynamicComponent = this.dynamicComponentService.getComponent(
      this._featureName,
      featureVersion
    );
    this.clearViewContainer();
    if (featureEnabled &amp;&amp; dynamicComponent) {
      this.embedComponent(dynamicComponent);
      this.injectComponentData();
    }
  }

  private clearViewContainer(): void {
    this.viewContainerRef.clear();
  }

  private embedComponent(component: Type&lt;DynamicComponent&gt;): void {
    const componentFactory =
      this.componentFactoryResolver.resolveComponentFactory(component);
    this.componentRef = this.viewContainerRef.createComponent(componentFactory);
  }

  private injectComponentData(): void {
    this.componentRef.instance.data = this._data;
  }
}
</code></pre>
<p>Esta vez, la directiva toma tres par√°metros: <code>featureName</code>, <code>countryCode</code> y <code>data</code>.
El par√°metro <code>data</code> se utilizar√° para pasar datos a nuestro componente din√°mico.
Dado que los diferentes componentes pueden tener diferentes entradas,
tomamos el enfoque de recibir cualquier dato externo a trav√©s de este objeto <code>data</code>.
Los componentes din√°micos tambi√©n pueden recibir datos externos a trav√©s de servicios, como veremos m√°s adelante.</p>
<p>Entonces, b√°sicamente, lo que hace esta directiva es:</p>
<ul>
<li>Registra cambios en alguna de los inputs.</li>
<li>Cuando se instancia la directiva o cualquiera de los inputs cambia, ejecuta <code>applyChanges()</code>.</li>
<li>Calcula si la funci√≥n est√° habilitada seg√∫n el nombre de la funcionalidad y el c√≥digo de pa√≠s.</li>
<li>Obtiene el tipo de componente din√°mico para el nombre de la funcionalidad y la versi√≥n de <code>DynamicComponentService</code>.</li>
<li>Borra el view container.</li>
<li>Si se recuper√≥ con √©xito un tipo de componente din√°mico, ejecuta <code>embedTemplate()</code>,
que resuelve una factor√≠a para este tipo de componente y crea la vista embebida en el view container.</li>
<li>Finalmente, inyecta el objeto de datos en el componente instanciado din√°micamente.</li>
</ul>
<p>Veamos el c√≥digo para esas clases <code>DynamicComponent</code> y <code>DynamicComponentService</code>.</p>
<p>El <code>DynamicComponent</code> es solo una clase con una propiedad p√∫blica <code>data</code>.
Tambi√©n crearemos una interfaz de diccionario y una constante con las clases de componentes din√°micos actuales
(versiones de contenido del pa√≠s 1 y 2) que ser√° utilizado por el servicio.</p>
<pre><code class="typescript language-typescript">import { CountryContentV1Component } from '../../../country/components/country-content/v1/country-content.v1.component';
import { CountryContentV2Component } from '../../../country/components/country-content/v2/country-content.v2.component';

export class DynamicComponent {
  data: any;
}

export interface DynamicComponentDictionary {
  [key: string]: {
    [key: number]: Type&lt;DynamicComponent&gt;;
  };
}

export const DEFAULT_DYNAMIC_COMPONENT_DICTIONARY: DynamicComponentDictionary =
  {
    COUNTRY_CONTENT: {
      1: CountryContentV1Component,
      2: CountryContentV2Component,
    },
  };
</code></pre>
<p><code>DynamicComponentService</code> simplemente devuelve la clase de componente adecuada,
dependiendo de los par√°metros <code>featureName</code> y <code>version</code>.</p>
<pre><code class="typescript language-typescript">import {
  DEFAULT_DYNAMIC_COMPONENT_DICTIONARY,
  DynamicComponent,
  DynamicComponentDictionary,
} from './dynamic-component.model';

@Injectable()
export class DynamicComponentService {
  private componentDictionary: DynamicComponentDictionary =
    DEFAULT_DYNAMIC_COMPONENT_DICTIONARY;

  getComponent(featureName: string, version: number): Type&lt;DynamicComponent&gt; {
    const selectedComponent = this.componentDictionary[featureName]
      ? this.componentDictionary[featureName][version]
      : undefined;
    return selectedComponent;
  }
}
</code></pre>
<p>Veamos c√≥mo se usa esta directiva en el componente principal.</p>
<pre><code class="html language-html">&lt;ng-template
  *appFeatureVersion="'COUNTRY_CONTENT';
  countryCode:country.code;data:{country: country}"
&gt;
&lt;/ng-template&gt;
</code></pre>
<p>Este es el c√≥digo de la clase <code>CountryContentV1Component</code>.</p>
<pre><code class="typescript language-typescript">import { DynamicComponent } from '../../../../shared/services/dynamic-component/dynamic-component.model';
import { Country } from '../../../services/country.model';

@Component({
  selector: 'app-country-content-v1',
  templateUrl: './country-content.v1.component.html',
  styleUrls: ['./country-content.v1.component.scss'],
})
export class CountryContentV1Component implements DynamicComponent {
  data: { country: Country };
}
</code></pre>
<p>Y as√≠ es como la plantilla usa la propiedad <code>data</code> para mostrar los datos del pa√≠s.</p>
<pre><code class="html language-html">&lt;div class="country-content"&gt;
  &lt;div class="data-row"&gt;
    &lt;span class="data-label"&gt; Area: &lt;/span&gt;
    &lt;span class="data-value"&gt; {{data.country.area | number}} &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class="data-row"&gt;
    &lt;span class="data-label"&gt; Population: &lt;/span&gt;
    &lt;span class="data-value"&gt; {{data.country.population | number}} &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>Puedes ver una demo de la aplicaci√≥n aqu√≠:<br />
https://stackblitz.com/edit/component-version-demo</p>
<h2 id="serviciosversionados">Servicios versionados</h2>
<p>La situaci√≥n puede complicarse un poco m√°s si los servicios tambi√©n est√°n versionados.
Imaginemos que la primera versi√≥n del servicio que proporciona datos del pa√≠s solo incluye el nombre del pa√≠s,
√°rea y poblaci√≥n, y que se debe crear una nueva versi√≥n para incluir los nuevos datos,
al mismo tiempo que proporciona la versi√≥n anterior para compatibilidad con versiones anteriores.</p>
<p>En este caso podemos inyectar la versi√≥n de servicio correspondiente en los componentes versionados.
No usaremos la propiedad <code>data</code> de <code>DynamicComponent</code>, sino que obtendremos los datos del servicio.
Tambi√©n podr√≠amos usar <em>injection tokens</em> para inyectar din√°micamente el servicio versionado dependiendo de ciertas condiciones.</p>
<p>La siguiente demo es un enfoque simple que utiliza servicios versionados:<br />
https://stackblitz.com/edit/component-version-demo-services</p>
<h2 id="consideracionesfinales">Consideraciones finales</h2>
<p>La aplicaci√≥n de demo probablemente sea demasiado simple para ese tipo de soluci√≥n.
Podr√≠amos haber usado inteligentemente algunas combinaci√≥n de <code>ngIf</code> y <code>ngTemplate</code> para llegar a la misma soluci√≥n.
Pero piensa en un caso en el que el usuario no selecciona el pa√≠s de un cuadro combinado,
sino que el pa√≠s se detecta autom√°ticamente desde la configuraci√≥n de su dispositivo,
y piensa en una interfaz de usuario m√°s complicada con un panel con varios widgets que deber√≠an mostrarse u ocultarse,
o tener contenido diferente seg√∫n el pa√≠s, y entonces este enfoque tendr√° mucho m√°s sentido.</p>
<p>Este post es lo suficientemente largo para entrar en m√°s detalles.
Si tienes sugerencias para mejorarlo, incl√∫yelas en tus comentarios :)</p>]]></description><link>https://juanguijordan.com/blog/2018-04_versioning-features-in-an-angular-app</link><guid isPermaLink="true">https://juanguijordan.com/blog/2018-04_versioning-features-in-an-angular-app</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Tue, 24 Apr 2018 09:00:00 GMT</pubDate></item><item><title><![CDATA[Desplegando un proyecto Angular CLI en Github Pages y Stackblitz]]></title><description><![CDATA[<p>¬øEst√°s ansioso por mostrarle al mundo tu prueba de concepto, proyecto paralelo, idea‚Ä¶?
Esta receta de bash de 5 l√≠neas pondr√° tu trabajo en el escaparate en cuesti√≥n de segundos.</p>
<p>As√≠ que acabas de terminar de crear el proyecto m√°s genial con <a href="https://cli.angular.io/">Angular CLI</a> y quieres compartirlo con tus colegas, o quiz√°s escribir una publicaci√≥n al respecto, pero quieres evitarles a tus colegas el dolor de bajarse el c√≥digo, instalar dependencias y ejecutar la aplicaci√≥n (lo s√©, casi no puede ser m√°s f√°cil hoy en d√≠a) y no tienes un servidor web, o tal vez eres tan vago como tus colegas y no te apetece poner mucho esfuerzo en desplegar el c√≥digo en alg√∫n sitio.</p>
<p>Bien, ¬°<a href="https://pages.github.com/">Github Pages</a> al rescate!</p>
<h2 id="githubpages">GitHub Pages</h2>
<p>Voy a asumir que ya creaste el proyecto con Angular CLI, por lo que tu proyecto ya est√° versionado con git.
Supongamos tambi√©n que ya tienes una <strong>cuenta de GitHub</strong> con cierto <code>NICKNAME</code>.
Dir√≠gete a GitHub y crea un nuevo proyecto, llam√©moslo <code>MY_PROJECT</code>.
No coloques ning√∫n archivo en √©l, puedes volver m√°s tarde y agregar el <code>README</code> y la licencia deseada,
pero por ahora ser√° m√°s f√°cil si lo dejas en blanco.</p>
<p>Luego, conecta tu repositorio de git local con el nuevo repositorio remoto y haz push de los cambios:</p>
<pre><code class="bash language-bash">git remote add origin https://github.com/NICKNAME/MY_PROJECT.git
git push origin master
</code></pre>
<p>Ahora, si ya conoc√≠aa GitHub Pages, estar√°s tentado a activarlas manualmente en el archivo <code>index.html</code> de tu proyecto.
<strong>¬°NO HAGAS ESO! ¬°¬°No funcionar√°!!</strong></p>
<p>Tu proyecto a√∫n debe ser generado para producci√≥n,
lo cual crear√° una carpeta <code>dist</code> desde la cual podr√°s servir tus p√°ginas de GitHub, pero <strong>¬°NO LO HAGAS! ¬°¬°¬°No funcionar√°!!!</strong></p>
<p>Parece que GitHub Pages no son adecuadas para SPA, ya que redirigen las rutas de su aplicaci√≥n a una p√°gina 404.
Pero algunos tipos muy majos desarrollaron <a href="https://www.npmjs.com/package/angular-cli-ghpages">angular-cli-ghpages</a>.
Este paquete npm llenar√° los huecos y har√° que tu aplicaci√≥n funcione en GitHub Pages.</p>
<p>Inst√°lalo con:</p>
<pre><code class="bash language-bash">npm install -g angular-cli-ghpages
</code></pre>
<p>Luego ejecuta estos 2 comandos:</p>
<pre><code class="bash language-bash">ng build --prod --base-href "https://NICKNAME.github.io/MY_PROJECT/"
angular-cli-ghpages
</code></pre>
<p>El segundo comando tiene un mont√≥n de opciones, pero todas son opcionales como dice la palabra <code>option</code>,
y no necesitas mucho m√°s para poner en marcha tu aplicaci√≥n en GitHub Pages. ¬°A disfrutar!</p>
<p>Bueno, ciertamente necesitar√°s la URL de tu aplicaci√≥n para compartirla con el mundo.
Esta URL es exactamente la que usamos en el comando <code>ng build</code>:<br />
<a href="#">https://NICKNAME.github.io/MY_PROJECT/</a></p>
<h3 id="desplegandoproyectosionic">Desplegando proyectos Ionic</h3>
<p>Actualizaci√≥n: 2018-05-07</p>
<p>¬øQu√© pasa con los proyectos Ionic?
Se despliegan en <code>www</code> en lugar de la carpeta <code>dist</code>, y usan Ionic CLI en lugar de Angular CLI,
por lo que ser√° necesario realizar un par de cambios.</p>
<pre><code class="bash language-bash">ionic build --prod
</code></pre>
<p>El <code>--base-href</code> no est√° disponible en Ionic CLI (que yo sepa),
por lo que deber√° abrir el archivo <code>index.html</code> y escribir la etiqueta base por tu cuenta, una vez finalizada la compilaci√≥n.
Puedes ponerlo despu√©s de la etiqueta del t√≠tulo, por ejemplo:</p>
<pre><code class="html language-html">&lt;title&gt;Ionic App&lt;/title&gt;
&lt;base href="https://NICKNAME.github.io/MY_PROJECT/" /&gt;
&lt;meta
  name="viewport"
  content="viewport-fit=cover, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"
/&gt;
</code></pre>
<p>Ahora, como dije, la salida de la compilaci√≥n no es la predeterminada para Angular CLI, que ser√≠a la carpeta <code>dist</code>.
Usa el flag <code>--dir</code> para especificar la carpeta <code>www</code> como fuente para las p√°ginas de GitHub.</p>
<pre><code class="bash language-bash">angular-cli-ghpages --dir www
</code></pre>
<h2 id="stackblitz">Stackblitz</h2>
<p>Ahora, para la parte de <a href="https://stackblitz.com/">Stackblitz</a> del post‚Ä¶ ¬øno ser√≠a bueno permitir que nuestros colegas o seguidores interact√∫en realmente con nuestro c√≥digo y vean el impacto de las modificaciones en casi-tiempo-real?</p>
<p>Los chicos de Stackblitz han creado este tipo de IDE en l√≠nea donde puedes crear proyectos y ver la generaci√≥n al mismo tiempo.
¬°Es como <strong>JSfiddler</strong> con esteroides!</p>
<p><img src="/img/blog/2018-03_angular-cli-github-pages-stackblitz/stackblitz.png" alt="Stackblitz" /></p>
<p>A√∫n m√°s simple que registrarte en Stackblitz, crear un proyecto y cargar los archivos de tu proyecto,
este truco de una l√≠nea cargar√° tu proyecto de GitHub en el IDE de Stackblitz.</p>
<p>Simplemente comparte esta URL, usando nuevamente tu apodo de GitHub y el nombre del proyecto:<br />
<a href="#">https://stackblitz.com/github/NICKNAME/MY_PROJECT</a></p>
<p>Esto tambi√©n es v√°lido para ramas, etiquetas o commits espec√≠ficos. Simplemente use el siguiente esquema para la URL:<br />
<a href="#">https://stackblitz.com/github/NICKNAME/MY_PROJECT/tree/{TAG|BRANCH|COMMIT}</a></p>
<p>Espero que esta publicaci√≥n te haya ayudado a publicar tus proyectos en un lugar donde otros puedan verlos, disfrutarlos y editarlos.</p>]]></description><link>https://juanguijordan.com/blog/2018-03_angular-cli-github-pages-stackblitz</link><guid isPermaLink="true">https://juanguijordan.com/blog/2018-03_angular-cli-github-pages-stackblitz</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Juangui Jord√°n]]></dc:creator><pubDate>Mon, 26 Mar 2018 10:00:00 GMT</pubDate></item></channel></rss>