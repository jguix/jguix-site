<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Juangui Jordán]]></title><description><![CDATA[This is my site where I gather my blog posts and some other random stuff]]></description><link>https://juanguijordan.com</link><image><url>https://juanguijordan.com/icon.png</url><title>Juangui Jordán</title><link>https://juanguijordan.com</link></image><generator>RSS for Node</generator><lastBuildDate>Sun, 31 Oct 2021 11:27:28 GMT</lastBuildDate><atom:link href="https://juanguijordan.com/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 17 Feb 2021 08:00:00 GMT</pubDate><copyright><![CDATA[2021 Juangui Jordán]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[juangui@gmail.com]]></managingEditor><webMaster><![CDATA[juangui@gmail.com]]></webMaster><ttl>60</ttl><item><title><![CDATA[End-to-end testing in React Native with detox]]></title><description><![CDATA[<p>Today I am starting a new project. I will call it for now <em>"No Más Colas"</em> -Spanish translation for <em>"No More Queues"</em>- but I might have second thoughts about that once I do some UX research.</p>
<p>The aim of the project is <strong>putting into practice what I learned</strong> in some Udemy tutorials that I recently completed, or I'm about to finish, devoted to NextJS and Flutter. I'm also trying <strong>to come out with a solution for rapid prototyping apps</strong>, creating MVPs that are simple but still scalable. And finally, I think I can <strong>help others in the process</strong>. Perhaps people that are already competent in JavaScript can follow my steps to create a different app, or even help me when I get stuck on something.</p>
<p>I'll blog about the process to help me reflect on those things I learned. I believe that <strong>practice is completely necessary to actually learn stuff</strong>. Thus, I'm not usually happy with watching the videos, but I also follow the steps myself. I consider that to be <em>"practice level 101"</em>, so to speak. The next level comes when you <strong>try something different applying what you learned</strong>. And if you are able to <strong>summarize, sinthesize, write about the topic or teach other people</strong>, then you get to learn the stuff deeper.</p>
<p>Someone might have instantly kringed when I said that my technical stack for this project will be NextJS + Flutter. If you are going to use React, why not using React Native for mobile, or why not creating a PWA? Or the other way around, why not creating everything in Flutter + Flutter web?</p>
<p>Truth is, I have had enough of pain with React Native, and I want to try something new. Hopefully, Flutter provides better developer experience -for the time I have been trying it, it does- and gives me enough to create a simple project. I don't want to use PWA because I want my app to live in the app stores. On the other hand, I don't trust much Flutter web for now. I don't know about it being used in production sites, and I wouldn't recommend my clients to use it, so for now I will leave it out of the equation.</p>
<p>That's the <em>why</em>, but the <em>what</em> is still missing. <strong>I'm going to create a website and a mobile app to manage queues</strong>, not message queues or event queues, but <strong>real life queues with people in a line</strong>. Basically, the app will allow someone to put into place a queue system, where the user can get information through the app on how many people are before him, the estimated waiting time, and notifications when his turn comes close.</p>
<p>I think this can solve a problem that existed for a long time, but even got worse after COVID. <strong>We never liked to wait long in a line</strong>. Now, with COVID, <strong>it's not even safe to do that</strong>. Having a bunch of people in a closed space for a long time is no longer desirable, and whe might have restrictions or quotes for that. With this app, a user can pick his turn -something that could be even accomplished remotely- and then, if the estimated time is long, he can just go shopping for a while, wait home or have a coffee somewhere, while the queue advances.</p>
<p>The website will handle the backoffice for queue system and a frontend site to display in the place, where the users will be able to see on site the next queue IDs that will be served, and where they can get their queue ID.</p>
<p>The mobile app will be responsible to read this ID and inform the user about his position in the queue and estimated times.</p>
<p><strong>In the next post I will create the NextJS app with typescript support</strong>. Stay tuned and see this app grow.</p>
<h2 id="credits">Credits</h2>
<p>Photo by <a href="https://unsplash.com/@mayofi">Joshua Mayo</a> on <a href="https://unsplash.com">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-10-31_e2e-testing-in-rn-with-detox</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-10-31_e2e-testing-in-rn-with-detox</guid><category><![CDATA[frontend]]></category><category><![CDATA[javascript]]></category><category><![CDATA[react-native]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Sun, 31 Oct 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA["No Más Colas" kick off]]></title><description><![CDATA[<p>Today I am starting a new project. I will call it for now <em>"No Más Colas"</em> -Spanish translation for <em>"No More Queues"</em>- but I might have second thoughts about that once I do some UX research.</p>
<p>The aim of the project is <strong>putting into practice what I learned</strong> in some Udemy tutorials that I recently completed, or I'm about to finish, devoted to NextJS and Flutter. I'm also trying <strong>to come out with a solution for rapid prototyping apps</strong>, creating MVPs that are simple but still scalable. And finally, I think I can <strong>help others in the process</strong>. Perhaps people that are already competent in JavaScript can follow my steps to create a different app, or even help me when I get stuck on something.</p>
<p>I'll blog about the process to help me reflect on those things I learned. I believe that <strong>practice is completely necessary to actually learn stuff</strong>. Thus, I'm not usually happy with watching the videos, but I also follow the steps myself. I consider that to be <em>"practice level 101"</em>, so to speak. The next level comes when you <strong>try something different applying what you learned</strong>. And if you are able to <strong>summarize, sinthesize, write about the topic or teach other people</strong>, then you get to learn the stuff deeper.</p>
<p>Someone might have instantly kringed when I said that my technical stack for this project will be NextJS + Flutter. If you are going to use React, why not using React Native for mobile, or why not creating a PWA? Or the other way around, why not creating everything in Flutter + Flutter web?</p>
<p>Truth is, I have had enough of pain with React Native, and I want to try something new. Hopefully, Flutter provides better developer experience -for the time I have been trying it, it does- and gives me enough to create a simple project. I don't want to use PWA because I want my app to live in the app stores. On the other hand, I don't trust much Flutter web for now. I don't know about it being used in production sites, and I wouldn't recommend my clients to use it, so for now I will leave it out of the equation.</p>
<p>That's the <em>why</em>, but the <em>what</em> is still missing. <strong>I'm going to create a website and a mobile app to manage queues</strong>, not message queues or event queues, but <strong>real life queues with people in a line</strong>. Basically, the app will allow someone to put into place a queue system, where the user can get information through the app on how many people are before him, the estimated waiting time, and notifications when his turn comes close.</p>
<p>I think this can solve a problem that existed for a long time, but even got worse after COVID. <strong>We never liked to wait long in a line</strong>. Now, with COVID, <strong>it's not even safe to do that</strong>. Having a bunch of people in a closed space for a long time is no longer desirable, and whe might have restrictions or quotes for that. With this app, a user can pick his turn -something that could be even accomplished remotely- and then, if the estimated time is long, he can just go shopping for a while, wait home or have a coffee somewhere, while the queue advances.</p>
<p>The website will handle the backoffice for queue system and a frontend site to display in the place, where the users will be able to see on site the next queue IDs that will be served, and where they can get their queue ID.</p>
<p>The mobile app will be responsible to read this ID and inform the user about his position in the queue and estimated times.</p>
<p><strong>In the next post I will create the NextJS app with typescript support</strong>. Stay tuned and see this app grow.</p>
<h2 id="credits">Credits</h2>
<p>Photo by <a href="https://unsplash.com/@shakusky">Zichao Zhang</a> on <a href="https://unsplash.com">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-10-18_no-mas-colas-kick-off</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-10-18_no-mas-colas-kick-off</guid><category><![CDATA[ux]]></category><category><![CDATA[frontend]]></category><category><![CDATA[javascript]]></category><category><![CDATA[nextjs]]></category><category><![CDATA[flutter]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Mon, 18 Oct 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA[Deploy a demo site with a JSON API on Heroku]]></title><description><![CDATA[<p>In this post I will present some tricks that I learned creating demo sites for blog posts and PoCs. You will learn how to configure a JSON-server API and deploy it on the same Heroku site than the frontend app. You will also learn how to use Faker to generate fake data for your JSON server.</p>
<p>Many times I have used <a href="https://github.com/typicode/json-server">JSON-server</a> to quickly create a simple API as a backend for a simple demo or proof of concept. Don't make me wrong: I'm not encouraging anyone to use that as a production server, but just for those kind of small projects.</p>
<p>JSON server provides a full REST API from a single <code>db.json</code> file, including <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code> and <code>DELETE</code> routes to get and modify your entities.</p>
<p>In this scenario I usually find two problems:</p>
<ol>
<li><p>Having enough data. If you create the JSON data manually, you will easily get tired after creating 10 entities. Imagine if you need hundreds of entities with different models.</p></li>
<li><p>Serving the data. If you want to deploy your demo on Heroku, you need a site to hold your application and a second one to hold the API.</p></li>
</ol>
<p>Regarding the first problem, we will use Faker to programatically create the <code>db.json</code> file. This will also simplify modifying the models, i.e., if the model changes, we don't need to manually change several hundreds of entities.</p>
<p>As for the second, we will use <code>concurrently</code> to launch both the frontend and backend apps in different ports, and we will add specific configurations for Heroku.</p>
<h2 id="appinitialization">App initialization</h2>
<p>For this post we will generate a sample react app. We could make similar configurations with other Javascript frameworks.</p>
<p>Let's create a new typescript react app:</p>
<pre><code class="bash language-bash">npx create-react-app json-server-demo --template typescript
</code></pre>
<p>Let's add <code>json-server</code>, <code>concurrently</code> and <code>axios</code> as dependencies, and <code>faker</code> as dev dependency of the project:</p>
<pre><code class="bash language-bash">yarn
yarn add json-server concurrently axios
yarn add --dev faker
</code></pre>
<p>Let's test our sample app:</p>
<pre><code class="bash language-bash">yarn start
</code></pre>
<p>Open your browser at http://localhost:3000/ and the sample React app will show.</p>
<h2 id="creatingtheapi">Creating the API</h2>
<p>Our sample app will list employees, with their name, email and country location.</p>
<p>We will create the <code>db.json</code> file with <code>faker</code> with not less than 1000 employees, because we think big 😏</p>
<p>Create a file in the folder <code>src/db/index.json</code> with the following contents:</p>
<pre><code class="javascript language-javascript">var fs = require('fs');
var faker = require('faker/locale/es');
faker.locale = 'es';

let employees = [];

for (let i = 1; i &lt;= 1000; i++) {
  const firstName = faker.name.firstName();
  const lastName = faker.name.lastName();
  employees.push({
    address: `${faker.address.streetAddress()}, ${faker.address.zipCode()}, ${faker.address.city()}, ${faker.address.country()}`,
    email: faker.internet.email(firstName, lastName),
    id: i,
    name: faker.name.findName(firstName, lastName),
  });
}

const data = {
  employees,
};

fs.writeFile('src/db/db.json', JSON.stringify(data, null, 2), (err) =&gt; {
  if (err) return console.log(err);
  console.log('Created database at src/db/db.json');
});
</code></pre>
<p>The code is easily readable, this script will create a <code>src/db/db.json</code> file with 1000 employes, using random <code>name</code>, <code>address</code> and <code>email</code> for each employee. The locale used is <code>"es"</code>; this means that the names and emails will be created in Spanish. Pay attention how the <code>name</code> and <code>email</code> fields are created using the same <code>firstName</code> and <code>lastName</code>, so they will be coherent.</p>
<p>Now we'll add the following script to the <code>"scripts"</code> section in the <code>package.json</code>:</p>
<pre><code class="json language-json">  "create-db": "node src/db/index.js",
</code></pre>
<p>To run the script, just execute:</p>
<pre><code class="bash language-bash">yarn create-db
</code></pre>
<p>And we are all set up to create the <code>json-server</code> API with our brand new JSON database of employees.</p>
<p>We can test it right now from the command line. We will use the <code>--port</code> option to set it on port 3001, so that it doesn't clash with our react app already running on port 3000:</p>
<pre><code class="bash language-bash">json-server src/db/db.json --port 3001
</code></pre>
<p>If you open http://localhost:3001/employees in your browser you will see the full list of employees.</p>
<pre><code class="json language-json">[
  {
    "address": "92349 Hurtado Ramal, 88648, Fuengirola Alejandrotown, Gabón",
    "email": "JosEmilio57@gmail.com",
    "id": 21,
    "name": "José Emilio Pizarro"
  },
  {
    "address": "536 Margarita Ronda, 45257, Las Vegas, Eslovenia",
    "email": "Dorotea_Ocasio72@hotmail.com",
    "id": 22,
    "name": "Dorotea Ocasio"
  },
  {
    "address": "69354 Candelaria Chalet, 17110, Archuletaburgh, Sri Lanka",
    "email": "Benjamn_Menchaca65@yahoo.com",
    "id": 23,
    "name": "Sta. Benjamín Menchaca"
  },
  ...
]
</code></pre>
<p>You can also test some URLs with params, like pagination or full text search:</p>
<p>http://localhost:3001/employees/1</p>
<p>http://localhost:3001/employees?_page=3&amp;_limit=10</p>
<p>http://localhost:3001/employees?q=Pedro</p>
<h2 id="consumingtheapi">Consuming the API</h2>
<p>We'll create a simple app that presents a search box and a list of results. We will ommit the CSS file contents, which just adds some styling to the application. You can find it on the repository listed at the end of this post.</p>
<pre><code class="typescript language-typescript">import React, { useEffect, useState } from 'react';
import axios from 'axios';
import './App.css';

type Employee = {
  address: string;
  email: string;
  id: number;
  name: string;
};

const App = () =&gt; {
  const [query, setQuery] = useState('');
  const [employees, setEmployees] = useState&lt;Employee[]&gt;([]);

  useEffect(() =&gt; {
    loadEmployees(1, 20);
  }, []);

  useEffect(() =&gt; {
    loadEmployees(1, 20, query.length &gt; 2 ? query : '');
  }, [query]);

  const loadEmployees = async (page: number, limit: number, query = '') =&gt; {
    const url = `http://localhost:3001/employees?_page=${page}&amp;_limit=${limit}&amp;q=${query}`;
    const _employees = await axios
      .get&lt;Employee[]&gt;(url)
      .then(({ data }) =&gt; data);

    setEmployees(_employees);
  };

  return (
    &lt;div className="App"&gt;
      &lt;div className="search_form"&gt;
        &lt;label className="search_form--label"&gt;Search employees&lt;/label&gt;
        &lt;input
          className="search_form--input"
          type="text"
          value={query}
          onChange={(event) =&gt; setQuery(event.target.value)}
        &gt;&lt;/input&gt;
      &lt;/div&gt;
      &lt;div className="employee_list"&gt;
        {employees.map((employee) =&gt; {
          return (
            &lt;div className="employee_list--item"&gt;
              &lt;div className="employee_list--item-name"&gt;{employee.name}&lt;/div&gt;
              &lt;div className="employee_list--item-address"&gt;
                {employee.address}
              &lt;/div&gt;
              &lt;div className="employee_list--item-email"&gt;{employee.email}&lt;/div&gt;
            &lt;/div&gt;
          );
        })}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
<p>This is how the app looks.</p>
<p><img src="/img/blog/2021-07_deploy-demo-with-api-heroku/demo_app.png" alt="Demo application" /></p>
<h2 id="enhancingthedevelopmentconfiguration">Enhancing the development configuration</h2>
<p>Let's make some changes to simplify the development cycle. We will add the <code>proxy</code> configuration to <code>package.json</code>, so that the network calls are redirected to port 3001.</p>
<pre><code class="json language-json">  "proxy": "http://localhost:3001",
</code></pre>
<p>This way, we can simplify the URL in our <code>App.tsx</code>:</p>
<pre><code class="typescript language-typescript">const url = `/employees?_page=${page}&amp;_limit=${limit}&amp;q=${query}`;
</code></pre>
<p>We can now restart the app and it will still work.</p>
<p>Then, we will use concurrently to start both the backend and the frontend from a oneliner script. Replace the <code>start</code> from <code>package.json</code> script with the following:</p>
<pre><code class="json language-json">    "start": "concurrently \"react-scripts start\" \"json-server --watch src/db/db.json --port 3001\"",
</code></pre>
<p>You can now stop the terminal running <code>json-server src/db/db.json --port 3001</code>. Just run from the project folder:</p>
<pre><code class="bash language-bash">yarn start
</code></pre>
<p>And you are good to go.</p>
<h2 id="deployingtoheroku">Deploying to Heroku</h2>
<p>Making both the <code>json-server</code> and your app to run on the same instance of a service like Heroku is trickier. You usually would need two sites, one for the frontend and one for the backend.</p>
<p>We are going to benefit of the static site generation of <code>json-server</code>.</p>
<p>First of all, let's build our <code>react</code> application.</p>
<pre><code class="bash language-bash">yarn build
</code></pre>
<p>This will generate a static version of the app in <code>/build</code>. Then remove this lines from <code>.gitignore</code> in order to push the static site to our remote repository:</p>
<pre><code class="bash language-bash"># production
/build
</code></pre>
<p>Create the file <code>server.js</code> in the root of the project with the following contents:</p>
<pre><code class="javascript language-javascript">const jsonServer = require('json-server');
const server = jsonServer.create();
const router = jsonServer.router('src/db/db.json');
const middlewares = jsonServer.defaults({ static: './build' });
const port = process.env.PORT || 3000;

server.use(middlewares);
server.use(router);

server.listen(port);
</code></pre>
<p>If you stop the <code>yarn start</code> script and run this script locally, your app will run from the static files in the <code>/build</code> directory, served by <code>json-server</code>.</p>
<pre><code class="bash language-bash">node server.js
</code></pre>
<p>This is exactly what Heroku will use to serve your application using a single site.</p>
<p>Now, to tell Heroku to call this <code>node server.js</code> you need to create a <code>Procfile</code> file in the root of your repository with the contents:</p>
<pre><code>web: node server.js
</code></pre>
<p>And that is all the configuration that you need.</p>
<p>I will skip the part where you create a Heroku account, add a new app and connect it to your Github repository. You can find many tutorials about that out there.</p>
<p>You can find the code for this demo in the following link:</p>
<p><a href="https://github.com/jguix/json-server-demo">https://github.com/jguix/json-server-demo</a></p>
<p>And the deployed Heroku app:</p>
<p><a href="https://json-server-demo1.herokuapp.com">https://json-server-demo1.herokuapp.com</a></p>
<h2 id="netlifyandvercel">Netlify and Vercel</h2>
<p>Unfortunately we can not do the same on Netlify or Vercel. The reason is that these services don't let us run node commands, but instead you would need to create your API using serverless functions. You can of course host there your app and have the API on another service, but that was not the point of this article.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I wanted to put together all the steps that I learned building and hosting simple apps for demo purposes including an API. This can probably help you performing the first steps of your next project, hosting a demo for a blog post or impressing some company in a technical interview.</p>
<h2 id="credits">Credits</h2>
<p>Photo by Austin Neill on <a href="https://unsplash.com/@arstyy">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-07_deploy-demo-with-api-heroku</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-07_deploy-demo-with-api-heroku</guid><category><![CDATA[javascript]]></category><category><![CDATA[frontend]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Sat, 31 Jul 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA[Adding git hooks]]></title><description><![CDATA[<p>This post shows how to use git hooks, to prevent commit or push under certain circumstances, and particularly how to version those git hooks.</p>
<p>Git hooks are a collection of triggers that are bound to git commands, like checkout, commit or push. They let you run a script before/after the git command is actually executed, and return an exit code. For git hooks that are exectued before, if the exit code is not zero, the git command will not be executed.</p>
<p>Git hooks must be used in a git versioned project, since they are just bash scripts living in your <code>.git/hooks</code> folder. There are both client side and server side hooks. In this post we will talk about client side hooks.</p>
<p>Client git hooks include:</p>
<ul>
<li><p><strong>Committing-Workflow Hooks.</strong> These are hooks that have to do with the committing process: <code>pre-commit</code>, <code>prepare-commit-msg</code>, <code>commit-msg</code> and <code>post-commit</code>.</p></li>
<li><p><strong>Email Workflow Hooks.</strong> Used for an email-based workflow: <code>applypatch-msg</code>, <code>pre-applypatch</code> and <code>post-applypatch</code>.</p></li>
<li><p><strong>Other Client Hooks.</strong> They include: <code>pre-rebase</code>, <code>post-rewrite</code>, <code>post-checkout</code>, <code>post-merge</code>, <code>pre-push</code></p></li>
</ul>
<p>I won't enter into details about what is the use of each hook. You can find more info on each individual hook purpose and triggering scenario on <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">Customizing-Git-Hooks</a>.</p>
<p>I will just mention an example. Some projects require by convention that the commit message includes a JIRA task name, so that the team members can easily track what commits were bound to which tasks in JIRA. If your JIRA task names include all a prefix like <code>PROJ</code>, that can be achieved with a <code>pre-commit</code> hook like this one:</p>
<pre><code class="sh language-sh">#!/bin/bash
MSG="$1"

if ! grep -qE "PROJ" "$MSG";then
    cat "$MSG"
    echo "Your commit message must contain the task name starting with 'PROJ'"
    exit 1
fi
</code></pre>
<p>The script above returns a <code>1</code> if the commit message doesn't include the word <code>PROJ</code> in it, and that will prevent the commit to run. If the commit message includes it, like in <code>"PROJ-202 - Refactored CSS styles"</code>, then the commit will take place.</p>
<p>You may be wondering, <em>"ok, but how can I actually store the hooks in my git versioned project if they sit inside the <code>.git</code> folder"</em>, and that is actually impossible. You can not commit files inside that directory. You would need to tell each developer in your project to copy them, or have a script that copies the hooks, then tell everyone to run it. Not practical, uh?</p>
<h2 id="versioninggithooksinjavascriptprojects">Versioning git hooks in Javascript projects</h2>
<p>In Javascript projects with a <code>package.json</code> we can use <a href="https://typicode.github.io/husky">Husky</a> to take care of git hooks and their versioning inside the project.</p>
<p>First of all, we must install Husky in the project:</p>
<pre><code class="sh language-sh">npx husky-init &amp;&amp; yarn
</code></pre>
<p>This will add a couple of things in <code>package.json</code>:</p>
<ul>
<li>the husky dependency to our <code>devDependencies</code> section</li>
<li>a <code>prepare</code> script to our <code>scripts</code> section</li>
</ul>
<p>The <code>yarn</code> part will install the dependencies and execute the <code>prepare</code> script. After that, a <code>.husky</code> directory will be created in the root of the project which contains a sample <code>pre-commit</code> hook, a <code>.gitignore</code> file and a <code>_</code> folder with the <code>husky.sh</code> script.</p>
<p>With that configuration you don't need to manually copy your hooks to <code>.git/hooks</code> folder: the <code>husky.sh</code> script will take care of using the hooks sitting in the <code>.husky</code> folder.</p>
<p>You can now edit the sample <code>pre-commit</code> hook, delete it, or create new ones in the <code>.husky</code> folder, manually or via the bash <code>npx husky add</code> command. For instance, if we were to create a <code>pre-push</code> hook that runs <code>lint</code> and <code>test</code> we could just run:</p>
<pre><code class="sh language-sh">npx husky add .husky/pre-push "yarn lint &amp;&amp; yarn test"
</code></pre>
<p>The result will be something like:</p>
<pre><code class="sh language-sh">#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

yarn lint &amp;&amp; yarn test
</code></pre>
<h2 id="versioninghooksinmavenjavaprojects">Versioning hooks in Maven Java projects</h2>
<p>Now for Java projects managed by Maven with a <code>pom.xml</code> file, I couldn't find anything like Husky.</p>
<p>The best approach here was using the <code>maven-resources-plugin</code> to copy the hooks from a <code>git-hooks</code> source directory to the <code>.git/hooks</code> destination folder.</p>
<p>This is what I added to my <code>build</code> section in the <code>pom.xml</code>:</p>
<pre><code class="xml language-xml">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
      &lt;version&gt;3.2.0&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;id&gt;copy-hooks&lt;/id&gt;
          &lt;phase&gt;validate&lt;/phase&gt;
          &lt;goals&gt;
            &lt;goal&gt;copy-resources&lt;/goal&gt;
          &lt;/goals&gt;
          &lt;configuration&gt;
            &lt;outputDirectory&gt;${basedir}/.git/hooks&lt;/outputDirectory&gt;
            &lt;resources&gt;
              &lt;resource&gt;
                &lt;directory&gt;git-hooks&lt;/directory&gt;
              &lt;/resource&gt;
            &lt;/resources&gt;
          &lt;/configuration&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p>After that, calling the command <code>mvn validate</code> or any other maven command that calls <code>validate</code>, like <code>package</code>, will install the hooks in the first place.</p>
<h2 id="bypassinggithooks">Bypassing git hooks</h2>
<p>What if we have a git hook that takes a lot of time to execute and gets into our way for everyday programming tasks? For instance, if we had a <code>pre-commit</code> hook that launched our unit tests and those tests took 30 minutes to run, then everytime we committed we would have to wait that much long. We might want to just run the tests on the last commit before the push, and not on every commit, to save us some time.</p>
<p>On such cases, we can bypass the git hooks, if we know what we are doing:</p>
<pre><code class="sh language-sh">git commit --no-verify -m "An unverifed commit"
</code></pre>
<h2 id="conclussion">Conclussion</h2>
<p>I hope this post helps you to integrate git hooks in your projects. They can help you enforce some policies and guidelines to improve quality standards on your team.</p>
<h2 id="credits">Credits</h2>
<p>Photo by Anne Nygard on <a href="https://unsplash.com/">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-06_adding-git-hooks</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-06_adding-git-hooks</guid><category><![CDATA[continuous-engineering]]></category><category><![CDATA[javascript]]></category><category><![CDATA[java]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Tue, 29 Jun 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA[Using redux with relational data (2/3)]]></title><description><![CDATA[<h2 id="part2implementingthereduxstore">Part 2. Implementing the redux store</h2>
<p>In this series of posts we will create an application using <strong>react</strong> and <strong>redux</strong>, in which we will handle relational data. In this second part we will be implementing the store.</p>
<p>We ended up the last part of this series modelling the store. Check part 1 if you need more context on that: <a href="https://blog.mimacom.com/redux-normalized-store-part-1/">Using redux with relational data (1/3)</a>.</p>
<p>Our store will have two main reducers, the <code>entities</code> store and the <code>ui</code> store.</p>
<p>Let's start by creating the <code>entities</code> store. It will hold 3 types of data, or entities, namely:</p>
<ul>
<li>user</li>
<li>comment</li>
<li>post</li>
</ul>
<p>Each entity will have associated types, actions and reducers. For the sake of easy comprehension, I'll show the types and actions in the first place.</p>
<p>User types:</p>
<pre><code class="javascript language-javascript">// user.types.ts
export type User = {
  avatar: string,
  email: string,
  id: number,
  name: string,
};
</code></pre>
<p>The user actions will include an action to load all users into the store, and an action to load a single user. The first one will be potentially called from the <code>My Friends</code> page, the second one from <code>My Wall</code> or <code>Friend Wall</code> page, where posts and comments will display the associated user next to them.</p>
<pre><code class="javascript language-javascript">// user.actions.ts
import { User } from './user.types';

export enum UserActionTypes {
  LOAD_USER = 'USER:LOAD_USER',
  LOAD_USERS = 'USER:LOAD_USERS',
}

export type LoadUserPayload = {
  user: User;
};

export type LoadUserAction = {
  type: UserActionTypes.LOAD_USER;
  payload: LoadUserPayload;
};

const loadUserAction = (payload: LoadUserPayload): LoadUserAction =&gt; {
  return {
    payload,
    type: UserActionTypes.LOAD_USER,
  };
};

export type LoadUsersPayload = {
  users: User[];
};

export type LoadUsersAction = {
  type: UserActionTypes.LOAD_USERS;
  payload: LoadUsersPayload;
};

const loadUsersAction = (payload: LoadUsersPayload): LoadUsersAction =&gt; {
  return {
    payload,
    type: UserActionTypes.LOAD_USERS,
  };
};

export const userActions = {
  loadUserAction,
  loadUsersAction,
};
</code></pre>
<p>Similarly we will have <code>post</code> types, where each post has a <code>userId</code>, which is the way that our database will manage the one-to-many relation (but remember that we will make this data more easily searchable by creating a <code>postIdsById</code> reducer inside the <code>users</code> reducer):</p>
<pre><code class="javascript language-javascript">// post.types.ts
export type Post = {
  body: string,
  date: Date,
  id: number,
  userId: number,
};
</code></pre>
<p>The <code>post</code> actions only include an action to load posts by user, with the <code>userId</code> being an optional parameter. We will dispatch this action with the <code>userId</code> param informed from the <code>Friend Wall</code> page to get all his posts. We will dispatch this action with the <code>userId</code> param <code>undefined</code> from <code>My Wall</code> to get all posts from all users (to simplify, let's say that all users are friends of mine).</p>
<pre><code class="javascript language-javascript">// post.actions.ts
import { Post } from './post.types';

export enum PostActionTypes {
  LOAD_POSTS = 'POST:LOAD_POSTS',
}

export type LoadPostsPayload = {
  posts: Post[];
  userId?: number;
};

export type LoadPostsAction = {
  type: PostActionTypes.LOAD_POSTS;
  payload: LoadPostsPayload;
};

const loadPostsAction = (payload: LoadPostsPayload): LoadPostsAction =&gt; {
  return {
    payload,
    type: PostActionTypes.LOAD_POSTS,
  };
};

export const postActions = {
  loadPostsAction,
};
</code></pre>
<p>As for the <code>comment</code> types, they will hold indexes pointing to the related <code>post</code> and <code>user</code>:</p>
<pre><code class="javascript language-javascript">// comment.types.ts
export type Comment = {
  body: string,
  date: Date,
  id: number,
  postId: number,
  userId: number,
};
</code></pre>
<p>The <code>comment</code> actions also include just one action to load comments by post:</p>
<pre><code class="javascript language-javascript">// comments.actions
import { Comment } from './comment.types';

export enum CommentActionTypes {
  LOAD_COMMENTS = 'COMMENT:LOAD_COMMENTS',
}

export type LoadCommentsPayload = {
  comments: Comment[];
  postId?: number;
};

export type LoadCommentsAction = {
  type: CommentActionTypes.LOAD_COMMENTS;
  payload: LoadCommentsPayload;
};

const loadCommentsAction = (payload: LoadCommentsPayload): LoadCommentsAction =&gt; {
  return {
    payload,
    type: CommentActionTypes.LOAD_COMMENTS,
  };
};

export const commentActions = {
  loadCommentsAction,
};
</code></pre>
<p>Now, let's address the reducers. Regarding the <code>user</code> reducer, it will be created by combining two reducers. The first one will take the <code>LoadUsersAction</code> action and store a map of users by <code>id</code>. It will also process the <code>LoadUserAction</code> and store the user in the map. The second one will take the <code>LoadPostsAction</code> and store a map of <code>postIds</code> related to a user.</p>
<pre><code class="javascript language-javascript">// user.reducer.ts
import { User } from './user.types';
import { UserActionTypes, LoadUsersAction, LoadUserAction } from './user.actions';
import { NumberIndexed } from '../shared/shared.types';
import { AnyAction, combineReducers, Reducer } from 'redux';
import { LoadPostsAction, PostActionTypes } from '../post/post.actions';

export type UserState = {
  byId: NumberIndexed&lt;User&gt;;
  postIdsById: NumberIndexed&lt;number[]&gt;; // one-to-many relation
};

export type UserStore = {
  users: UserState;
};

export const userByIdReducer = (state: NumberIndexed&lt;User&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case UserActionTypes.LOAD_USERS:
      const { payload } = action as LoadUsersAction;
      const { users } = payload;
      const loadedUsersMap = users.reduce((map, user) =&gt; ({ ...map, [user.id]: user }), {});

      return {
        ...state,
        ...loadedUsersMap,
      };

    case UserActionTypes.LOAD_USER:
      const { payload: userPayload } = action as LoadUserAction;
      const { user } = userPayload;

      return {
        ...state,
        [user.id]: user,
      };
  }

  return state;
};

export const postIdsByIdReducer = (state: NumberIndexed&lt;number[]&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case PostActionTypes.LOAD_POSTS:
      const { payload } = action as LoadPostsAction;
      const { posts, userId } = payload;
      let loadedPostIdsByUserIdMap = posts.reduce(
        (postIdsByUserIdMap, post) =&gt; ({
          ...postIdsByUserIdMap,
          [post.userId]: postIdsByUserIdMap[post.userId] ? [...postIdsByUserIdMap[post.userId], post.id] : [post.id],
        }),
        {} as NumberIndexed&lt;number[]&gt;
      );
      if (posts.length === 0) {
        loadedPostIdsByUserIdMap = { [userId as number]: [] };
      }

      return {
        ...state,
        ...loadedPostIdsByUserIdMap,
      };
  }

  return state;
};

export const userReducer: Reducer&lt;UserState&gt; = combineReducers({
  byId: userByIdReducer,
  postIdsById: postIdsByIdReducer,
});
</code></pre>
<p>The <code>NumberIndexed</code> custom type is defined as follows, in a shared file where we also define the types for the filters. This type allows us to type maps with numbers as index used by the reducers above.</p>
<pre><code class="javascript language-javascript">// shared.types.ts
export type NumberIndexed&lt;T&gt; = { [index: number]: T };
export type StringIndexed&lt;T&gt; = { [index: string]: T };
export type OrderType = 'asc' | 'desc';
</code></pre>
<p>Similarly, the <code>post</code> reducer has a reducer related to the <code>LoadPost</code> action ans a reducer taking care of the <code>LoadCommentsAction</code>.</p>
<pre><code class="javascript language-javascript">// post.reducer.ts
import { Post } from './post.types';
import { PostActionTypes, LoadPostsAction } from './post.actions';
import { NumberIndexed } from '../shared/shared.types';
import { AnyAction, combineReducers, Reducer } from 'redux';
import { CommentActionTypes, LoadCommentsAction } from '../comment/comment.actions';

export type PostState = {
  byId: NumberIndexed&lt;Post&gt;;
  commentIdsById: NumberIndexed&lt;number[]&gt;; // one-to-many relation
};

export type PostStore = {
  posts: PostState;
};

export const postByIdReducer = (state: NumberIndexed&lt;Post&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case PostActionTypes.LOAD_POSTS:
      const { payload } = action as LoadPostsAction;
      const { posts } = payload;
      const loadedPostsMap = posts.reduce((map, post) =&gt; ({ ...map, [post.id]: post }), {});

      return {
        ...state,
        ...loadedPostsMap,
      };
  }

  return state;
};

export const commentIdsByIdReducer = (state: NumberIndexed&lt;number[]&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case CommentActionTypes.LOAD_COMMENTS:
      const { payload } = action as LoadCommentsAction;
      const { comments, postId } = payload;
      let loadedCommentIdsByPostIdMap = comments.reduce(
        (commentIdsByPostIdMap, comment) =&gt; ({
          ...commentIdsByPostIdMap,
          [comment.postId]: commentIdsByPostIdMap[comment.postId]
            ? [...commentIdsByPostIdMap[comment.postId], comment.id]
            : [comment.id],
        }),
        {} as NumberIndexed&lt;number[]&gt;
      );
      if (comments.length === 0) {
        loadedCommentIdsByPostIdMap = { [postId as number]: [] };
      }

      return {
        ...state,
        ...loadedCommentIdsByPostIdMap,
      };
  }

  return state;
};

export const postReducer: Reducer&lt;PostState&gt; = combineReducers({
  byId: postByIdReducer,
  commentIdsById: commentIdsByIdReducer,
});
</code></pre>
<p>The <code>comment</code> reducer is more simple, taking care just of the <code>LoadComments</code> action.</p>
<pre><code class="javascript language-javascript">// comment.reducer.ts
import { Comment } from './comment.types';
import { CommentActionTypes, LoadCommentsAction } from './comment.actions';
import { NumberIndexed } from '../shared/shared.types';
import { AnyAction, combineReducers, Reducer } from 'redux';

export type CommentState = {
  byId: NumberIndexed&lt;Comment&gt;;
};

export type CommentStore = {
  comments: CommentState;
};

export const commentByIdReducer = (state: NumberIndexed&lt;Comment&gt; = {}, action: AnyAction) =&gt; {
  switch (action.type) {
    case CommentActionTypes.LOAD_COMMENTS:
      const { payload } = action as LoadCommentsAction;
      const { comments } = payload;
      const loadedCommentsMap = comments.reduce((map, comment) =&gt; ({ ...map, [comment.id]: comment }), {});

      return {
        ...state,
        ...loadedCommentsMap,
      };
  }

  return state;
};

export const commentReducer: Reducer&lt;CommentState&gt; = combineReducers({
  byId: commentByIdReducer,
});
</code></pre>
<p>Next, we will implement the <code>ui</code> store. It will hold data for <code>My Wall</code>, <code>Friend Wall</code> and <code>Friends</code> page.</p>
<p><code>My wall</code> will not hold custom types, just indexes to the <code>post</code> entities belonging to the user that will be displayed in the page. The actions will include an action to load wall posts.</p>
<pre><code class="javascript language-javascript">// wall.actions.ts
export enum WallActionTypes {
  LOAD_POSTS = 'WALL:LOAD_POSTS',
}

export type LoadWallPostsPayload = {
  postIds: number[];
};

export type LoadWallPostsAction = {
  type: WallActionTypes.LOAD_POSTS;
  payload: LoadWallPostsPayload;
};

const loadWallPostsAction = (payload: LoadWallPostsPayload): LoadWallPostsAction =&gt; {
  return {
    payload,
    type: WallActionTypes.LOAD_POSTS,
  };
};

export const wallActions = {
  loadWallPostsAction,
};
</code></pre>
<p>The reducer will be simple, just taking care of that action.</p>
<pre><code class="javascript language-javascript">// wall.reducer.ts
import { AnyAction, combineReducers, Reducer } from 'redux';
import { LoadWallPostsAction, WallActionTypes } from './wall.actions';

export type WallState = {
  postIds: number[];
};

export type WallStore = {
  wall: WallState;
};

export const postIdsReducer = (state: number[] = [], action: AnyAction) =&gt; {
  switch (action.type) {
    case WallActionTypes.LOAD_POSTS:
      const { payload } = action as LoadWallPostsAction;
      const { postIds } = payload;
      return [...state, ...postIds];
  }

  return state;
};

export const wallReducer: Reducer&lt;WallState&gt; = combineReducers({
  postIds: postIdsReducer,
});
</code></pre>
<p>We will ommit the code for the actions and reducers associated to the <code>Friend Wall</code>, which are very similar to the ones for <code>My Wall</code>. You can check the <a href="https://github.com/jguix/redux-normalized-example/tree/blogpost-part2">git repository branch</a> for this post if you want all the source code.</p>
<p>The <code>Friends</code> actions will include loading friends and setting the friends list order (ascending or descending).</p>
<pre><code class="javascript language-javascript">// friends.actions.ts
import { OrderType } from '../shared/shared.types';

export enum FriendsActionTypes {
  LOAD_FRIENDS = 'FRIENDS:LOAD_FRIENDS',
  SET_FRIENDS_ORDER = 'FRIENDS:SET_FRIENDS_ORDER',
}

export type LoadFriendsPayload = {
  userIds: number[];
};

export type LoadFriendsAction = {
  type: FriendsActionTypes.LOAD_FRIENDS;
  payload: LoadFriendsPayload;
};

const loadFriendsAction = (payload: LoadFriendsPayload): LoadFriendsAction =&gt; {
  return {
    payload,
    type: FriendsActionTypes.LOAD_FRIENDS,
  };
};

export type SetFriendsOrderPayload = {
  order: OrderType;
};

export type SetFriendsOrderAction = {
  type: FriendsActionTypes.SET_FRIENDS_ORDER;
  payload: SetFriendsOrderPayload;
};

const setFriendsOrderAction = (payload: SetFriendsOrderPayload): SetFriendsOrderAction =&gt; {
  return {
    payload,
    type: FriendsActionTypes.SET_FRIENDS_ORDER,
  };
};

export const friendsActions = {
  loadFriendsAction,
  setFriendsOrderAction,
};
</code></pre>
<p>The <code>friends</code> reducer will have reducers that just point to <code>user</code> entities. We will have one for the ascending order list and one for the descending order list, because we will implement a pagination strategy with the backend (we will talk about that on the next post of the series). Another reducer will store the state of the filter.</p>
<pre><code class="javascript language-javascript">// friends.reducer.ts
import { AnyAction, combineReducers, Reducer } from 'redux';
import { FriendsActionTypes, LoadFriendsAction, SetFriendsOrderAction } from './friends.actions';

export type FriendsState = {
  orderFilter: 'asc' | 'desc';
  userIds: number[];
};

export type FriendsStore = {
  friends: FriendsState;
};

export const orderFilterReducer = (state: 'asc' | 'desc' = 'asc', action: AnyAction) =&gt; {
  switch (action.type) {
    case FriendsActionTypes.SET_FRIENDS_ORDER:
      const { payload } = action as SetFriendsOrderAction;
      const { order } = payload;
      return order;
  }

  return state;
};

export const userIdsReducer = (state: number[] = [], action: AnyAction) =&gt; {
  switch (action.type) {
    case FriendsActionTypes.LOAD_FRIENDS:
      const { payload } = action as LoadFriendsAction;
      const { userIds } = payload;
      return [...state, ...userIds];

    case FriendsActionTypes.SET_FRIENDS_ORDER:
      return [];
  }

  return state;
};

export const friendsReducer: Reducer&lt;FriendsState&gt; = combineReducers({
  orderFilter: orderFilterReducer,
  userIds: userIdsReducer,
});
</code></pre>
<p>To create the store, we will first install the <a href="https://github.com/zalmoxisus/redux-devtools-extension">redux-devtools-extension</a>. With this tools we will be able to debug the dispatching of actions and the changes in the state of the store.</p>
<pre><code>yarn add redux-devtools-extension
</code></pre>
<p>The <code>root</code> store is composed of the <code>entities</code> store and <code>ui</code> store as follows:</p>
<pre><code class="javascript language-javascript">// store.ts
import { combineReducers, createStore, Reducer } from 'redux';
import { userReducer, UserStore } from '../modules/user/user.reducer';
import {
  commentReducer,
  CommentStore,
} from '../modules/comment/comment.reducer';
import { postReducer, PostStore } from '../modules/post/post.reducer';
import {
  friendsReducer,
  FriendsStore,
} from '../modules/friends/friends.reducer';
import {
  FriendWallStore,
  friendWallReducer,
} from '../modules/friend-wall/friend-wall.reducer';
import { wallReducer, WallStore } from '../modules/wall/wall.reducer';
import { composeWithDevTools } from 'redux-devtools-extension';

export type EntitiesStore = CommentStore &amp; PostStore &amp; UserStore;

export type UIStore = FriendsStore &amp; FriendWallStore &amp; WallStore;

export type ApplicationStore = {
  entities: EntitiesStore,
  ui: UIStore,
};

export const entitiesReducer = combineReducers({
  comments: commentReducer,
  posts: postReducer,
  users: userReducer,
});

export const uiReducer = combineReducers({
  friends: friendsReducer,
  friendWall: friendWallReducer,
  wall: wallReducer,
});

export const rootReducer: Reducer&lt;ApplicationStore&gt; = combineReducers({
  entities: entitiesReducer,
  ui: uiReducer,
});

export const store = createStore(rootReducer, composeWithDevTools());
</code></pre>
<p>Finally, let's throw some data into this store, dispatch some actions and see the results. We will use some mocked data and will display the results using some <code>console.log</code> messages and printing the contents of the store in the main page. Alternatively, you can debug these actions with a Chrome plugin like <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools</a>.</p>
<pre><code class="javascript language-javascript">// App.tsx
import React from 'react';
import './App.css';
import { store } from './store/store';
import { userActions } from './modules/user/user.actions';
import { User } from './modules/user/user.types';
import { Post } from './modules/post/post.types';
import { postActions } from './modules/post/post.actions';
import { Comment } from './modules/comment/comment.types';
import { commentActions } from './modules/comment/comment.actions';
import { friendsActions } from './modules/friends/friends.actions';
import { wallActions } from './modules/wall/wall.actions';
import { friendWallActions } from './modules/friend-wall/friend-wall.actions';

const users: User[] = [
  {
    id: 1,
    name: 'Josh Martin',
    email: 'josh.martin@gmail.com',
    avatar: 'http://placekitten.com/g/500/400',
  },
  {
    id: 2,
    name: 'Emily Matthews',
    email: 'emily.matthews@gmail.com',
    avatar: 'http://placekitten.com/g/400/400',
  },
  {
    id: 3,
    name: 'Sonia Lee',
    email: 'sonia.lee@gmail.com',
    avatar: 'http://placekitten.com/g/400/500',
  },
];
const posts: Post[] = [
  { id: 1, body: 'Blah', date: new Date(), userId: 1 },
  { id: 2, body: 'Bleh', date: new Date(), userId: 1 },
  { id: 3, body: 'Blih', date: new Date(), userId: 2 },
  { id: 4, body: 'Bloh', date: new Date(), userId: 2 },
  { id: 5, body: 'Bluh', date: new Date(), userId: 3 },
];
const comments: Comment[] = [
  { id: 1, body: 'No', date: new Date(), postId: 1, userId: 2 },
  { id: 2, body: 'Yes', date: new Date(), postId: 1, userId: 3 },
  { id: 3, body: 'Yes!', date: new Date(), postId: 1, userId: 1 },
  { id: 4, body: 'No!', date: new Date(), postId: 2, userId: 3 },
];

const App = () =&gt; {
  store.subscribe(() =&gt; {
    console.log('New state', store.getState());
  });

  console.log('Loading users');
  store.dispatch(
    userActions.loadUsersAction({
      users,
    })
  );
  console.log('Loading posts');
  store.dispatch(
    postActions.loadPostsAction({
      posts,
    })
  );
  console.log('Loading comments');
  store.dispatch(
    commentActions.loadCommentsAction({
      comments,
    })
  );
  console.log('Loading friends');
  store.dispatch(
    friendsActions.loadFriendsAction({
      userIds: [2, 3],
    })
  );
  console.log('Loading wall posts');
  store.dispatch(
    wallActions.loadWallPostsAction({
      postIds: [1, 2, 3, 4, 5],
    })
  );
  console.log("Loading Emily's posts");
  store.dispatch(
    friendWallActions.loadFriendWallPostsAction({
      postIds: [3, 4],
      userId: 2,
    })
  );

  return (
    &lt;div className="App"&gt;
      &lt;div&gt;Store contents&lt;/div&gt;
      &lt;div&gt;
        &lt;pre&gt;{JSON.stringify(store.getState(), null, 2)}&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
<p>If we run the app we can follow in the console log how the store dispatches actions and the result in the output page. We can also follow the steps, the partial updates and the result in the React DevTools extension.</p>
<p><img src="/img/blog/2021-01_redux-normalized-store-part-2/redux-dev-tools.png" alt="Redux DevTools Extension" /></p>
<p>If you wan to dig more into the code, remember that you can check the whole source code in this branch:</p>
<p><a href="https://github.com/jguix/redux-normalized-example/tree/blogpost-part2">https://github.com/jguix/redux-normalized-example/tree/blogpost-part2</a></p>
<p>In the next post we will implement the pages and components and a mocked backend with pagination. We will also implement caching methods to avoid asking for the same data again and again.</p>
<h2 id="credits">Credits</h2>
<p>Photo by <a href="https://unsplash.com/@sigmund">Sigmund</a> on <a href="https://unsplash.com/">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2021-01_redux-normalized-store-part-2</link><guid isPermaLink="true">https://juanguijordan.com/blog/2021-01_redux-normalized-store-part-2</guid><category><![CDATA[javascript]]></category><category><![CDATA[frontend]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Tue, 26 Jan 2021 09:00:00 GMT</pubDate></item><item><title><![CDATA[Using redux with relational data (1/3)]]></title><description><![CDATA[<h2 id="part1modellingthereduxstore">Part 1. Modelling the redux store</h2>
<p>In this series of posts we will create an application using <strong>react</strong> and <strong>redux</strong>, in which we will handle relational data. In this first part we will be modelling the store.</p>
<p>Often the redux tutorials are too simple and handle a flat data structure. This is the case of the typical TODO app (to-do list), or a shopping list, etc. In these cases we usually manage a few reducers, which are independent of each other.</p>
<p>For example:</p>
<ul>
<li>The list of TODOs, including the status of each task.</li>
<li>The value of a show/hide filter, for example "hide complete".</li>
<li>The value of a sort filter, for example "sort by ascending creation date".</li>
</ul>
<p>In such a simple case, the store doesn't need to handle relationships, and it can be rendered in an object similar to the following:</p>
<pre><code class="json language-json">{
  "todos": [
    {
      "id": 1,
      "completed": true,
      "creationDate": "2020-08-07",
      "description": "Create github repo"
    },
    {
      "id": 2,
      "completed": false,
      "creationDate": "2020-08-11",
      "description": "Finish part 1 of this post"
    },
    {
      "id": 3,
      "completed": false,
      "creationDate": "2020-08-12",
      "description": "Create part 2"
    }
  ],
  "filterBy": "completed",
  "orderBy": "date-asc"
}
</code></pre>
<p>However, real applications are usually more complex. Some data is dependent on others, and there are hierarchies: one-to-one, one-to-many, and many-to-many relationships. This will present us with several challenges, both in the representation of the state in the store, and in the efficiency of communication with the backend.</p>
<p>To illustrate that, we will use the example of a social network. The main entities that we will handle are users, posts and comments. Users can create posts, and posts can contain comments from other users. Simple, isn't it?</p>
<p>In order to model this data, let's look first at some of the designs of our social network.</p>
<p>The home page of our social network will be <strong>My Wall</strong>, the page where my posts and those of all my friends are shown, with their respective comments.</p>
<p><img src="/img/blog/2020-08_redux-normalized-store-part-1/my_wall.png" alt="My Wall" /></p>
<p>There will also be a <strong>Friends</strong> page, where the users who are direct contacts of mine are listed.</p>
<p><img src="/img/blog/2020-08_redux-normalized-store-part-1/my_friends.png" alt="My Friends" /></p>
<p>From this page, if I click on one of my friends, I will visit the <strong>Friend's wall</strong>, that is, a page where their posts will appear, along with the comments of other users.</p>
<p><img src="/img/blog/2020-08_redux-normalized-store-part-1/friend.png" alt="Friend Page" /></p>
<p>Each post will include the avatar and name of the user, and the date. Each comment will also include the avatar, username and date.</p>
<p><img src="/img/blog/2020-08_redux-normalized-store-part-1/post_and_comments.png" alt="Posts and comments" /></p>
<p>Without going into the relationships or hierarchies, we can define the types of the entities as user (<code>User</code>), post (<code>Post</code>) and comment (<code>Comment</code>):</p>
<pre><code class="typescript language-typescript">// user.types.ts
export type User = {
  avatar: string;
  email: string;
  id: number;
  name: string;
};

// post.types.ts
export type Post = {
  body: string;
  date: Date;
  id: number;
};

// comment.types.ts
export type Comment = {
  body: string;
  date: Date;
  id: number;
};
</code></pre>
<p>An extremely simple representation, based on the TODO application, consists of having a reducer dedicated to each type of entity:</p>
<pre><code class="json language-json">{
  users: [
    { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
    { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
    { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
  ],
  posts: [
    {
      id: 1,
      body: "hi all",
      date: "2020-08-01",
      user: { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
    }
  ],
  comments: [
    {
      {
        id: 1,
        body: "hello!",
        date: "2020-08-02",
        user: { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
      },
      {
        id: 2,
        body: "hi there!",
        date: "2020-08-02",
        user: { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
      },
    }
  ],
}
</code></pre>
<p>If I visit the <strong>Friends</strong> page, the store holds the friends in <code>users</code>; if I enter a friend's page the store holds the posts in <code>posts</code>, and if I show a post, the comments are stored in <code>comments</code>.</p>
<p>This strategy will force me to retrieve all the posts from the backend every time I switch to the wall of a different friend. Moreover, it won't work as expected, because on the <strong>Friend</strong> and <strong>My wall</strong> pages I need to show several posts at the same time, where each post has different comments. According to the store designed above, all the posts displayed would always show the same comments.</p>
<p>To avoid this problem we could nest the comments within the posts, like this:</p>
<pre><code class="json language-json">{
  users: [
    { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
    { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
    { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
  ],
  posts: [
    {
      id: 1,
      body: "hi all",
      date: "2020-08-01",
      user: { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
      comments: [
        {
          {
            id: 1,
            body: "hello!",
            date: "2020-08-02",
            user: { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
          },
          {
            id: 2,
            body: "hi there!",
            date: "2020-08-02",
            user: { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
          },
        }
      ],
    }
  ],
}
</code></pre>
<p>However, we still have several problems. We are not caching any data, for instance, if I navigate from one friend to another and go back to the first one, I will have to reload all the posts and comments from the backend. There is also a lot of replicated data, such as users, taking up more space than necessary.</p>
<p>Ideally, you should normalize the store, as recommended in the <a href="https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape">redux documentation</a>. We could think something like this, where to each entity we have added one or several ids (<code>userId</code>, <code>postId</code>) that point to the entities with which it is related:</p>
<pre><code class="json language-json">{
  users: [
    { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
    { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
    { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
  ],
  posts: [
    {
      id: 1,
      body: "hi all",
      date: "2020-08-01",
      userId: 2,
    }
  ],
  comments: [
    {
      {
        id: 1,
        body: "hello!",
        date: "2020-08-02",
        postId: 1,
        userId: 1,
      },
      {
        id: 2,
        body: "hi there!",
        date: "2020-08-02",
        postId: 1,
        userId: 3,
      },
    }
  ],
}
</code></pre>
<p>In this way we flatten the store and avoid replicated data. However, the search for the user id associated with each post or comment, and the search for all the comments associated with a post will not be optimal, since it will force us to go through all the users or comments and filter by id. When the store grows during a session, this process will become slower and slower and will impact the user experience.</p>
<p>We can improve this by indexing each data entity, as suggested in the redux documentation.</p>
<pre><code class="json language-json">{
  "users": {
    "byId": {
      "1": {
        "id": 1,
        "name": "Josh",
        "email": "josh@gmail.com",
        "avatar": "josh.jpg"
      },
      "2": {
        "id": 2,
        "name": "Anne",
        "email": "anne@gmail.com",
        "avatar": "anne.jpg"
      },
      "3": {
        "id": 3,
        "name": "Mike",
        "email": "mike@gmail.com",
        "avatar": "mike.jpg"
      }
    }
  },
  "posts": {
    "byId": {
      "1": {
        "id": 1,
        "body": "hi all",
        "date": "2020-08-01",
        "userId": 2
      }
    }
  },
  "comments": {
    "byId": {
      "1": {
        "id": 1,
        "body": "hello!",
        "date": "2020-08-02",
        "postId": 1,
        "userId": 1
      },
      "2": {
        "id": 2,
        "body": "hi there!",
        "date": "2020-08-02",
        "postId": 1,
        "userId": 3
      }
    }
  }
}
</code></pre>
<p>Now it is much easier and faster to search for the <code>user</code> associated with a <code>post</code> or a <code>comment</code>. However, it is still difficult to get the list of <code>posts</code> by <code>user</code>, or the list of <code>comments</code> by <code>post</code>. In fact, it is now more difficult and inefficient to filter this data.</p>
<p>We are going to create relational structures that tell us which posts belong to each user (one to many), and what comments belong to each post.</p>
<pre><code class="json language-json">{
  users: {
    byId: {
      1: { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
      2: { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
      3: { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
    },
    postIdsById: {
      2: [ 1 ],
    }
  },
  posts: {
    byId: {
      1: {
        id: 1,
        body: "hi all",
        date: "2020-08-01",
        userId: 2,
      }
    },
    commentIdsById: :{
      1:[ 1, 2],
    }
  },
  comments: {
    byId: {
      1: {
        id: 1,
        body: "hello!",
        date: "2020-08-02",
        postId: 1,
        userId: 1,
      },
      2: {
        id: 2,
        body: "hi there!",
        date: "2020-08-02",
        postId: 1,
        userId: 3,
      },
    }
  },
}
</code></pre>
<p>The meaning of the reducer <code>postIdsById</code> reads as <em>"the user with id 2 has the post with id 1"</em>. The reading of <code>commentIdsById</code> would be <em>"the post with id 1 has the comments with ids 1 and 2"</em>. Now we have everything indexed and the database structure is fully normalized.</p>
<p>We only lack structures that allow us to store the ids of the posts that will be visible on each wall, either the user's or the friends', as well as the ids of the users that should appear on the friends page. We will include on the friend page a filter to sort alphabetically in ascending or descending order.</p>
<p>To separate the structures that model entities that belong to the database from the structures that model elements of the user interface, we will create 2 higher-level reducers. One called <code>entities</code> where we will store <strong>entities from the database</strong>, and another called <code>ui</code> where we will store all the <strong>elements of the user interface</strong>.</p>
<p>This is finally the store model, which avoids data replication, facilitates the search thanks to indexing, and will allow us to cache the data already loaded, since the structures associated with the user interface only store ids, and any entity already downloaded from the backend will remain in the store until we clear the browser cache.</p>
<pre><code class="json language-json">{
  entities: {
    users: {
      byId: {
        1: { id: 1, name: "Josh", email: "josh@gmail.com", avatar: "josh.jpg" },
        2: { id: 2, name: "Anne", email: "anne@gmail.com", avatar: "anne.jpg" },
        3: { id: 3, name: "Mike", email: "mike@gmail.com", avatar: "mike.jpg" },
      },
      postIdsById: {
        2: [ 1 ],
      },
    },
    posts: {
      byId: {
        1: {
          id: 1,
          body: "hi all",
          date: "2020-08-01",
          userId: 2,
        },
      },
      commentIdsById: :{
        1: [ 1, 2 ],
      },
    },
    comments: {
      byId: {
        1: {
          id: 1,
          body: "hello!",
          date: "2020-08-02",
          postId: 1,
          userId: 1,
        },
        2: {
          id: 2,
          body: "hi there!",
          date: "2020-08-02",
          postId: 1,
          userId: 3,
        },
      },
    },
  },
  ui: {
    friends: {
      orderFilter: "asc",
      userIds: [ 2, 3 ],
    },
    friendWall: {
      postIdsById: {
        2: [ 1 ],
      },
    },
    wall: {
      postIds: [ 1 ],
    },
  },
}
</code></pre>
<p>In future posts we will go through the implementation of this store and the caching methods.</p>
<h2 id="credits">Credits</h2>
<p>Photo by <a href="https://unsplash.com/@jeremybishop">Jeremy Bishop</a> on <a href="https://unsplash.com/">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2020-08_redux-normalized-store-part-1</link><guid isPermaLink="true">https://juanguijordan.com/blog/2020-08_redux-normalized-store-part-1</guid><category><![CDATA[javascript]]></category><category><![CDATA[frontend]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Tue, 03 Nov 2020 09:00:00 GMT</pubDate></item><item><title><![CDATA[Creating a Chrome extension]]></title><description><![CDATA[<p>In this post, I will show you how to create a simple <a href="https://chrome.google.com/webstore/category/extensions">Chrome extension</a>. I will also summarize what a Chrome extension can do, and I will introduce how to create more complex extensions based on modern JavaScript frameworks like React, Angular or Vue.</p>
<p>What is a Chrome extension? Google Chrome extensions are like small applications living in your browser, based on standard web technologies, such as HTML, CSS and JavaScript. They take advantage of some Chrome APIs, providing the foundations for building an app, like storage and messaging. Google Chrome extensions can interact with the web pages open in your browser tabs, but they are not really meant to. They can live on their own and provide any kind of functionality, separate from the browsing experience. You can build anything, from an agenda, to a pomodoro timer, to a web image scrapper. You can think of Chrome as the Electron platform, providing a basis for building JavaScript applications that can interact with the browsing experience.</p>
<p>Chrome extensions can stay dormant until some trigger awakes them, making some content or script to be injected, executed, or some popup shown. These scripts live in something called “Isolated Worlds” in relation with the web pages being browsed, which means that a Chrome extension can only share the DOM with a particular page, but not the script variables or functions. Chrome extensions can thus modify the DOM, inject additional CSS or JavaScript scripts which interact with the same DOM, but can not directly modify the original page CSS or JavaScript. On the other hand, the extensions can communicate with the page through messages, so you can create a page that gracefully interact with a Chrome extension.</p>
<h2 id="extensioncapabilities">Extension capabilities</h2>
<p>This is an incomplete summary of what an extension can do:</p>
<ul>
<li><strong>Show an icon</strong>. The extension icon can be modified on runtime, or show a badge over it, with a colored background and a 4 letter text in it.</li>
<li><strong>Show a popup</strong>. Clicking on the extension icon can trigger a popup with content.</li>
<li><strong>Show a secondary menu</strong>. Right clicking on the extension icon can trigger a secondary menu.</li>
<li><strong>Respond to shortcuts</strong>. Keyboard shortcuts can be associated to extension actions (i.e. CTRL+SHIFT+V).</li>
<li><strong>Respond to actions in the URL bar</strong> (the so called omnibox). Text shortcuts can be used in the omnibox to trigger actions in the extension (i.e. “myext+<TAB>").</li>
<li><strong>Respond to visiting some web page</strong>. For instance, modifying the icon state or popup content.
Modify the content of a web site. For instance, modifying the DOM by a content script or applying additional CSS files.</li>
<li><strong>Have an Options page</strong> for the extension configuration.</li>
<li><strong>Replace the History page, Bookmarks page or New Tab page</strong> of Google Chrome.</li>
<li><strong>Exchanging messages</strong> with a web site or with itself. A extension can use messaging to talk to some web page being browsed, or to communicate between parts of the extension itself.</li>
<li><strong>Store information</strong> in local storage, Chrome storage (storage which is synchronized across different devices where the user is logged in) or any storage native to JS, for instance sessionStorage.</li>
<li><strong>Show notifications</strong> as a toast.</li>
<li><strong>Use several APIs provided by Google Chrome</strong>.</li>
<li><strong>Be free or paid</strong>. When creating a paid extension, you can choose to use the Chrome store or your own payment means.</li>
</ul>
<h2 id="thebasics">The basics</h2>
<p>The only mandatory file of a Chrome extension is the manifest. It has to be placed in the root directory, and it communicates the extension metadata, permissions and other files involved.</p>
<p>The manifest format has a lot of options, which can be ckecked in this page (https://developer.chrome.com/extensions/manifest), but we will focus on the most important ones. Let’s introduce the Cat detector extension manifest:​</p>
<pre><code class="json language-json">{
  "name": "Cat detector",
  "description": "Spots cats in the page you are browsing",
  "manifest_version": 2,
  "version": "1.0",
  "background": {
    "persistent": false,
    "scripts": ["background.js"]
  },
  "content_scripts": [
    {
      "matches": ["&lt;all_urls&gt;"],
      "js": ["content.js"]
    }
  ],
  "browser_action": {
    "default_popup": "popup.html"
  },
  "icons": {
    "16": "images/footprint-16.png",
    "32": "images/footprint-32.png",
    "48": "images/footprint-48.png",
    "128": "images/footprint-128.png"
  },
  "permissions": ["activeTab"]
}
</code></pre>
<p>The manifest declares some capabilities that will be used by the extension:</p>
<ul>
<li>It declares a background script. Background scripts can activate at any time, but don't have direct access to the tabs content.</li>
<li>It declares a content script. Content scripts get injected in the same page that is being browsed and have access to the content. A matches expression is used to determine when the script is injected. In this case we chose <code>&lt;all urls&gt;</code>, meaning it will be injected in any web page.</li>
<li>It declares a browser action, meaning a extension that is able to work independently of the current browsed page. If we wanted to create a extension that only activates when some conditions are met in the page you are browsing, we would use a "page action”. The reason we chose browser action is that cats can be seen almost everywhere on the internet. A second reason is that we want to display a badge over the extension icon, and that is only possible using a browser action.</li>
<li>Inside the browser action, it declares a popup that will be open on clicking on the extension icon.</li>
<li>It declares icons. The smaller ones used for the browser icon, depending on the display resolution, and the bigger ones used in the extensions menu of Chrome and the Chrome Store.</li>
</ul>
<h2 id="oursampleextension">Our sample extension</h2>
<p>Now, getting to the point of this post. This page action uses a background script that, on page load, calls sends a message to the content script, which in turn counts the number of times the words “cat”, “kitten” or “kitty” appear in our page. After receiving a response, the background task displays a badge over the icon to communicate the number of kittens spot. On clicking on the extension icon, a popup will be shown showing a happy kitten image together with the counter.</p>
<p>Let’s present our extension file structure:</p>
<pre><code>-audios
 |-meow_0.mp3
 |-meow_1.mp3
 |-meow_2.mp3
 |-meow_3.mp3
 |-meow_4.mp3
 |-meow_5.mp3
 |-meow_6.mp3
-images
 |-footprint-16.png
 |-footprint-32.png
 |-footprint-48.png
 |-footprint-128.png
-background.js
-content.js
-manifest.js
-popup.html
-popup.js
</code></pre>
<p>It includes the extension icons, some audio files, the manifest, the background script, the content script, and the popup html and js files.</p>
<p>This is how the background script looks like. Comments have been included to guide you through the important stuff:</p>
<pre><code>const maxMeows = 6;

// The extension listens to the onUpdated event, and executes when the page is loaded
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) =&gt; {
  if (changeInfo.status === "complete" &amp;&amp; tab.active) {
    detectCats(tabId);
  }
});

// It executes the cat detection as well when we switch tabs on the active tab
chrome.tabs.onActivated.addListener((activeTab) =&gt; detectCats(activeTab.tabId));

const detectCats = (tabId) =&gt; {
  // Here we clear the badge
  chrome.browserAction.setBadgeText({ text: "" });
  // Then we send a message to the content script, together with a callback
  chrome.tabs.sendMessage(tabId, { text: "cat_count" }, onCatCount);
};

// This is the callback called by the content script
const onCatCount = (catNumber) =&gt; {
  if (!catNumber) {
    deactivateIcon();
  } else {
    // When cats are detected, show an animation on the badge
    animateBadge(catNumber);
  }
};

const deactivateIcon = () =&gt; {
  // Here we detect what the active tab is and disable the action
  chrome.tabs.query({ active: true, currentWindow: true }, (activeTab) =&gt; {
    chrome.browserAction.disable(activeTab[0].id);
  });
};

const animateBadge = (catNumber) =&gt; {
  // Limit meows, we don't want 1000 sounds to be played
  let i = catNumber - maxMeows &gt; 0 ? catNumber - maxMeows : 1;
  let j = 0;
  // Cats will meow at random times
  for (; i &lt;= catNumber - 1; i++, j++) {
    updateBadge(i, j * Math.random() * 400);
  }
  // Last cat should come last, let's give it the highest delay
  updateBadge(catNumber, j * 500);
};

const updateBadge = (catIndex, delay) =&gt; {
  // After some specified delay display a number on the badge and play a meow sound
  setTimeout(() =&gt; {
    (
      new Audio(chrome.runtime.getURL(`audios/meow_${catIndex % 7}.mp3`))
    ).play();
    chrome.browserAction.setBadgeText({ text: catIndex.toString() });
  }, delay);
};
</code></pre>
<p>The content script basically receives the <code>cat_count</code> message and responds to it. Some logic has been included to count the cats with a regex expression:</p>
<pre><code>chrome.runtime.onMessage.addListener((msg, sender, sendResponse) =&gt; {
  if (msg.text === "cat_count") {
    sendResponse(countCats());
  }
});

const countCats = () =&gt; {
  var content =
    document.body["innerText" in document.body ? "innerText" : "textContent"];
  content = removeScriptsFromContent(content);
  var regex = /(cat|cats|kitten|kittens|kitty|kitties)[\s.,]/gi;

  return content.match(regex)?.length || 0;
};

const removeScriptsFromContent = (strCode) =&gt; {
  return strCode.replace(/&lt;script.*?&gt;.*?&lt;\/script&gt;/gim, "");
};
</code></pre>
<p>The popup html file just displays an image and declares the javascript file:</p>
<pre><code>&lt;html&gt;
  &lt;body&gt;
    &lt;img id="cat_image" /&gt;
    &lt;script src="popup.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>The popup js file executes a function on load which in turn sends a message to the content script to count cats again. This is because popups do not live until they are open, so if some update on the popup needs to be done, it is the popup who needs to start the action:</p>
<pre><code>window.onload = () =&gt; {
  chrome.tabs.query({ active: true, currentWindow: true }, (activeTab) =&gt; {
    const tabId = activeTab[0].id;
    chrome.tabs.sendMessage(tabId, { text: "cat_count" }, onCatCount);
  });
};

const onCatCount = (catNumber) =&gt; {
  document.getElementById(
    "cat_image"
  ).src = `https://cataas.com/c/s/${catNumber}%20happy%20cats%20detected?t=sq&amp;width=350`;
};
</code></pre>
<p>Tadaaaa, this is the result of the cat detector extension in action:</p>
<p><img src="/img/blog/2020-05_creating-a-chrome-extension/cat_extension.png" alt="Cat extension" /></p>
<h2 id="testinglocallyourextension">Testing locally our extension</h2>
<p>If you want to test your extension in your local machine, you just need to go to the menu item More Tools —&gt; Extensions, then click on Load Unpacked, and select the folder where your manifest and the rest of the files are.</p>
<p><img src="/img/blog/2020-05_creating-a-chrome-extension/load_extension.png" alt="Loading the extension for testing" /></p>
<h2 id="debugging">Debugging</h2>
<p>Debugging gets particularly complex since every bit of a extension has to be inspected in a different way.</p>
<p>Regarding the background scripts, they are inspected in the extensions. To open the dev tools you need to click on the background page link in the extension details.</p>
<p><img src="/img/blog/2020-05_creating-a-chrome-extension/extension_info.png" alt="Opening the extension dev tools" /></p>
<p>Content scripts are inspected in the web page that you are browsing, since they are injected to the page. They are shown in a <strong>Content Scripts</strong> tab.</p>
<p><img src="/img/blog/2020-05_creating-a-chrome-extension/debugging_content_scripts.png" alt="Debugging content scripts" /></p>
<p>I could not found the way to inspect popup scripts, even the console logs got lost somewhere, so showing an alert was the only way to check that the popup was alive and doing stuff.</p>
<h2 id="publishing">Publishing</h2>
<p>To publish a Google Chrome extension you need to register as a Chrome developer, pay \$5 and fill in some information about your extension name, description and images or videos. The process is very similar than the one followed to publish an app in Google Play. After submitting your extension for approval, you need to wait for a response. Negative responses are quite fast -my first extension was rejected for no reason, and I had to send an email to ask for a human review-, positive ones can take a few hours or days.</p>
<h2 id="goingfurther">Going further</h2>
<p>The Chrome developer site for extensions provides a great number of sample extensions. These are simple extensions tackling very specific features that can help you learn build extensions.</p>
<p>https://developer.chrome.com/extensions/samples</p>
<p>There are many boilerplate projects out there to help you develop more complex extensions using React, Angular or Vue. Take the following links as a starting point:</p>
<ul>
<li>https://github.com/lxieyang/chrome-extension-boilerplate-react</li>
<li>https://github.com/larscom/ng-chrome-extension</li>
<li>https://github.com/Kocal/vue-web-extension</li>
</ul>
<h2 id="recap">Recap</h2>
<p>Creating Chrome extensions can be fun, and you can also find many productive scenarios for them. Developing extensions is easy if you know basic web technologies as HTML, CSS and JavaScript. We showed you the basics of a Chrome extension and guided you through the creation of a simple extension.</p>
<p>If you want to check the full extension code, please go to this <a href="https://github.com/jguix/chrome-cat-detector">github repository</a>.</p>
<p>Can you imagine something that could be delivered as a Chrome extension? We would like to hear about your thoughts.</p>
<h2 id="credits">Credits</h2>
<p>Photo by Markus Winkler on <a href="https://unsplash.com/">Unsplash</a>.</p>]]></description><link>https://juanguijordan.com/blog/2020-05_creating-a-chrome-extension</link><guid isPermaLink="true">https://juanguijordan.com/blog/2020-05_creating-a-chrome-extension</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Mon, 01 Jun 2020 09:00:00 GMT</pubDate></item><item><title><![CDATA[Circular Design SPRINT]]></title><description><![CDATA[<p>In this post I tell you the experience of participating in a <strong>Design SPRINT</strong>, and how Ecoembes used the Design SPRINT methodology to explore new ideas in the context of circular economy and recycling.</p>
<p>In order to do that, they recruited through scholarships an eclectic group of professionals, including entrepreneurs, marketing, design and technology professionals, among which I am included. During 5 days in July 2018, we worked together in <a href="https://www.thecircularlab.com">The Circular Lab</a>, an innovation space of Ecoembes located in Logroño, particularly prepared for creative and collaborative work.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/the_circular_lab_1-1-1024x668.jpg" alt="The Circular Lab" /></p>
<p>The scholarship consisted of a course on Design SPRINT methodology, during which we made a real <strong>SPRINT</strong> for Ecoembes. Taught by <a href="https://www.uxerschool.com">UXER School</a>, we applied Design SPRINT to the world of recycling, and in just 5 days we were able to propose and develop innovative ideas that solve problems in a business that we did not know initially.</p>
<h2 id="executivesummary">Executive Summary</h2>
<p>This will be a long article, for which I have decided to create a summary so that the reader can understand the global idea, and then decide if he wants to go into all the details.</p>
<p><a href="https://www.gv.com/sprint"><strong>Design SPRINT</strong></a> -or just SPRINT- is a surprisingly productive methodology, which allows to obtain excellent results in a short period of time.</p>
<p>It can be applied to the development of a product or service at the beginning of a project, but also to the development of a functionality of an already existing product or service, or to the improvement of any process. It is a flexible methodology that has been applied successfully in many areas.</p>
<p>Individual production and collective decision making are encouraged. This promotes, on the one hand, the generation of more open ideas. When thinking and producing we will do that individually, so that we do not receive negative feedback that restrains us or limits us. On the other hand, decision making is collective, using a flat hierarchy, which makes us support and engage even with ideas that we did not generate ourselves, but with which we agree.</p>
<p>In my opinion, the success of the process is determined by several factors. In the first place, it is important to form a multidisciplinary team, which will provide us with different points of view in the generation of ideas. Another important aspect of the methodology is the short deadlines: most tasks have a very limited term of 5, 10 or 15 minutes, which makes us work under pressure, forcing us to quickly choose and discard ideas.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-reloj.jpg" alt="The famous Time Timer helps keep activities in term" /></p>
<p>Another important aspect is to leave the egos aside, to do without the superheroes -focus on the collective work instead of giving all the prominence to the gurus or experts- and be able to give up to your own ideas -when the team decides that an idea is not going to be used, we must not press to include it again.</p>
<p>To lead the process, set the guidelines, foster to prevail the collective spirit and unravel the blockages there is the figure of the facilitator. In this case the facilitator was Javier Larrea from UXER SCHOOL.</p>
<p>Seen in retrospect, the process feels like an initially messy puzzle, in which little by little pieces are fitting together, almost automatically.</p>
<p>Finally, it should be clarified that <strong>Design SPRINT</strong> is a methodology adaptable to each project and organization, therefore some processes may differ from what we find in the <a href="https://www.gv.com/sprint/#book">official book</a> or what we found in other SPRINTs.</p>
<h2 id="designsprintinanutshell">Design SPRINT in a nutshell</h2>
<p>Design SPRINT is a methodology that typically takes place over 5 days.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/design-sprint-resumen.png" alt="Design SPRINT" /></p>
<h3 id="day1map">Day 1. Map</h3>
<p>We define the problem, articulating assumptions, identifying the consumer and achieving that all stakeholders are aligned on the same objective and with the same information.</p>
<h3 id="day2sketch">Day 2. Sketch</h3>
<p>We explore multiple ways of solving the problem, regardless of whether it is viable or not. This freedom to explore and be creative can often give us very novel concepts and ideas.</p>
<h3 id="day3decide">Day 3. Decide</h3>
<p>By not having time to prototype all ideas, it is necessary to have a process to decide which is the best idea and which ones we should abandon. Sometimes a single version will be chosen, while others we will decide to validate a few alternatives.</p>
<h3 id="day4prototype">Day 4. Prototype</h3>
<p>We want to build a prototype of medium fidelity, pretty much a facade, but we do not have content, or information architecture, or wireframes… We must work together to achieve a believable prototype that allows us gather quality information from testing.</p>
<h3 id="day5test">Day 5. Test</h3>
<p>Finally the day came! The aim here is to validate (or not to validate) the product ideas with real users, discover errors in the concept design, understand the users and, ultimately, create a product that people want to use.</p>
<h2 id="day1map-1">Day 1. Map</h2>
<h3 id="creationofteams">Creation of teams</h3>
<p>The participants were divided into 3 groups, previously formed by the organizers. Each group was made up of a mix of profiles -designers, marketers, entrepreneurs, engineers-, also belonging to different age groups.</p>
<p>Each participant made a brief presentation of who he is, what he is doing and why he signed up for the Circular Design SPRINT.</p>
<h3 id="challenge">Challenge</h3>
<p>The client presented us with the challenge, that is, a result that the client wants to obtain. This should be the focus of the solutions that we will create in the <strong>SPRINT</strong>.</p>
<blockquote>
  <p>Ecoembes Challenge: How can we encourage and motivate citizens to better recycle domestic packaging?</p>
</blockquote>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-desafio.jpg" alt="Ecoembes Challenge" /></p>
<p>The challenge could be focused on both citizens as well as the <em>HORECA</em> channel (HOtels, REstaurants and CAtering).</p>
<p>Then several activities were carried out in order to approach the context of the challenge: the world of recycling.</p>
<h3 id="interviews">Interviews</h3>
<p>In pairs, we carried out two interviews among the participants, trying to find out what their consumption habits were, as well as their environmental awareness and recycling patterns.</p>
<h3 id="presentationoftheclient">Presentation of the client</h3>
<p>Introduction to the origin, work and objectives of Ecoembes, by Zacarías Torbado.</p>
<h3 id="stakeholdersmap">Stakeholders map</h3>
<p>In a graph with 3 concentric circles we had to place the stakeholders related to the recycling process, in the following way:</p>
<ul>
<li>In the inner circle we had to put the internal stakeholders, that is, the direct users: citizens or restaurants in the case of HORECA.</li>
<li>In the intermediate circle went the direct stakeholders, those who deal directly with the user.</li>
<li>In the outer circle went the indirect ones, those who do not deal directly with the user.</li>
</ul>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-stakeholders-1.jpg" alt="Sticking sticky notes on the stakeholders map" /></p>
<p>Each participant had to add sticky notes with the stakeholders that came to his mind, without discussing it with the others. In this step the amount should prevail over quality, regardless of whether two sticky notes had almost the same content. It took approximately 10 minutes.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-stakeholders-2.jpg" alt="Stakeholders map" /></p>
<h3 id="context">Context</h3>
<p>This is the moment in which experts on the client's side help to understand the context of the problem to be solved. Three presentations were made by Ecoembes, in which we were told about the operation of waste separation plants, and previous research activities in Spain and other countries on improvements in the process of collection, separation of waste and recycling (payment by generation, incentive to recycling, tracking bags through RFID, smartag, NFC, etc.).</p>
<h3 id="stakeholdersmapreview">Stakeholders map review</h3>
<p>After knowing the context, the stakeholder map was reviewed, adding those that were missing. Then they were grouped by type -producer, generator, collector, processor, transformator-, arranging them radially, dividing the circles like a cheese.</p>
<h3 id="nbsphowmightwe">&nbsp;How Might We</h3>
<p>This is a very important activity on the first day of the <strong>SPRINT</strong>. We are going to start exploring ideas openly. Each participant must formulate, in sticky notes, questions starting with "How Might We…?". That is, how could we improve this or that, motivate the users to do this or that thing, and so on. Again, without interfering each other, and giving more importance on quantity over quality.</p>
<p>They are then arranged on a large paper and are sorted and grouped vertically by affinity.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-hmw-1.jpg" alt="How Might We…?" /></p>
<p>Afterwards, categories are created and similar sticky notes are placed underneath categories, putting one on top of another the ones that match exactly. Once grouped, we have an idea of the most repeated questions and the topics that we have given more importance to.</p>
<p>Then each person has 3 votes in the form of stickers. The votes must be placed on the board at the same time, in order not to influence others.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-hmw-3.jpg" alt="How Might We by categories" /></p>
<p>The sticky notes that have obtained votes are passed to the stakeholder map, placing them in the corresponding quadrant, according to the categories created.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia1-stakeholders-3.jpg" alt="Stakeholders map + How Might We" /></p>
<p>After ordering the stakeholders, it was decided on what type of user and stakeholders we were going to work with. In my group, we selected the HORECA channel (HOtels, REstaurants and CAtering), and the so called waste GENERATORS quadrant.</p>
<h3 id="userinterviews">User interviews</h3>
<p>A user interview script was prepared. These interviews should allow us to validate our first hypotheses.</p>
<p>These hypotheses included the type of average user that we intended to serve, which we decided would be <strong>restaurants with between 2 and 6 employees who had problems to recycle containers, due to lack of motivation, time or space</strong>.</p>
<p>The objective is not to direct the interview, nor to try to sell them a solution, but to find out their motivations and frustrations related to the recycling of domestic packaging. Finally we can ask some questions about the solution we have in mind.</p>
<p>The interview should not take more than 10 minutes.</p>
<p>In the afternoon we conduct the interviews, on the street or by Skype/telephone.</p>
<p>Each participant made 1-2 interviews, the objective being a total of 6 or more, a number that is considered representative. Among these 6 there will usually be 3-4 average users, 1 end up sample user (large restaurants) and 1 end down sample user (bars with only one employee).</p>
<h2 id="da2divergir">Día 2. Divergir</h2>
<h3 id="generate_persona_">Generate <em>persona</em></h3>
<p>The first exercise was to collect and synthesize the information from the previous day's interviews. The tool used was an Excel sheet, where all the responses of each of the users were collected, classified and then patterns were detected. Finally the frustrations of the user, their motivations and the verbatim (literal phrases full of emotions, anger, anger, etc., ideas with power) were identified.</p>
<p>This information was passed to a synthesis matrix, ordering the most repeated phrases and patterns in:</p>
<ul>
<li>Behavior patterns.</li>
<li>Motivations (Gains).</li>
<li>Frustrations (Pains).</li>
<li>Verbatims.</li>
</ul>
<p>After detecting the most repeated patterns, the person was generated, with following structure:</p>
<ul>
<li>Name and basic demographic data.</li>
<li>History.</li>
<li>Needs.</li>
<li>Reasons/origins for that needs.</li>
</ul>
<p>The model should look like this sentence (our persona was named Mario Kempes after the nickname of a bar owner from my quarter):</p>
<blockquote>
  <p>Mario Kempes is a 35-year-old chef who works in a bar that has 3 employees. He recycles oil and glass because they get paid for it and someone comes to pick it up, but he does not recycle plastics or cardboard for lack of economic incentives and space inside the bar. He needs to be paid, to be fined or getting the space issue solved in order to recycle more.</p>
</blockquote>
<p>After analyzing the interviews, we verified that our initial assumptions were not validated, and our initial idea -a kind of label for responsible restaurants regarding the disposal and recycling of waste, which would serve to reward those who recycle the most- did not convince the owners of restaurants, so that we should pivot towards new solutions.</p>
<h3 id="lightningdemos">Lightning demos</h3>
<p>Searching for projects, prototypes, products or services already developed, whose general idea is similar to the one chosen by the team, as a source of inspiration.</p>
<h3 id="brainstorming">Brainstorming</h3>
<p>During the stipulated time (about 10 minutes), each team member individually generated all the ideas that came to his mind, in sticky notes and under the following premises:</p>
<ul>
<li>Quantity should prevail over quality.</li>
<li>Visuals should prevail over text.</li>
<li>Each idea should be expressed in approximately 6 words.</li>
<li>Ambitious ideas.</li>
<li>Do not judge.</li>
<li>You can build on other's ideas.</li>
</ul>
<p>Once generated, each one reads aloud his sticky notes to the rest, and doubts are clarified.</p>
<p>They are then arranged on the board and ordered.</p>
<ul>
<li>They are put one on another when they say exactly the same.</li>
<li>They are grouped by theme.</li>
<li>Above each group of related sticky notes, a diagonal sticky note is used as a title.</li>
</ul>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia2-brainstorming-1.jpg" alt="Brainstorming" /></p>
<p>It's time to vote! Each member of the team takes 3 stickers to vote for 3 different ideas. The ideas that don't receive any votes are discarded.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia2-brainstorming-2.jpg" alt="Voting" /></p>
<p>Among the ideas that received votes, a few are selected with which we will work, and the rest are discarded. It is not necessary to discard the least voted, although in principle it is logical, but the group can decide to incorporate some idea that has received few votes but that makes sense along with the rest. These ideas are arranged on the board, where we can see the <em>big picture</em> of our future solution.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia2-brainstorming-4.jpg" alt="Stakeholders map + voted ideas from brainstorming" /></p>
<h3 id="crazy8">Crazy 8</h3>
<p>Each member of the team had to take a folio and fold it in 8 quadrants. In each of these quadrants we have to draw a step of the outline of the solution to developed. In this exercise, every minute we write or draw a quadrant. At the end of the 8 minutes you should have a sketch of the prototype.</p>
<p>This was my <strong>crazy 8</strong> for the idea that we decided in the previous step.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia2-crazy8.jpg" alt="Crazy 8" /></p>
<h3 id="individualprototype">Individual prototype</h3>
<p>Each member of the team, for approximately 1 hour, had to make a prototype of the solution to be developed. It should be done on paper, using one or several sheets, with text, diagrams, drawings and sticky notes.</p>
<p>When the time was over, the prototype was handed over to the facilitator, who the next day arranged it in the form of an Art Museum on the board, for its exhibition.</p>
<h2 id="nbspday3decide">&nbsp;Day 3. Decide</h2>
<h3 id="artmuseum">Art Museum</h3>
<p>In each group board, the individual prototypes were exhibited. The members of the group read to themselves each proposal, without knowing who had made it.</p>
<p>One by one, it was revealed who designed each proposal and everyone could ask questions to clarify doubts.</p>
<p>Next, each member of the team had to take 5 stickers to vote on the aspects of each prototype that they liked the most. The procedure to follow is thinking first and then voting at the same time to avoid influencing others.</p>
<p>Subsequently, each member of the team took a larger blue sticker and cast a vote on their preferred idea. You also should think first and vote later, all at once.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia3-art-museum-1.jpg" alt="Art Museum and votes" /></p>
<h3 id="individualpitch">Individual pitch</h3>
<p>Each member of the team had to present their idea to the client in a minute and a half.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia3-pitch-1.jpg" alt="Individual pitch" /></p>
<p>Once all the proposals were presented and after a time of reflection, the client (called <strong>decisor</strong> in the Design SPRINT methodology) indicated which aspects he valued positively of each proposal and signaled with yellow stickers what were the 2 or 3 ideas that he wanted to include in the final prototype.</p>
<h3 id="userjourney">User journey</h3>
<p>Individually, and taking as input the most voted points of the prototypes and the customer feedback, each member had to generate a user journey in 8 steps. Using 8 sticky notes, in each one we write a phrase summarizing a step of the user journey of our product or service. Conceptually, we distribute them in 3 phases:</p>
<ul>
<li><em>Before</em>: steps that are taken before using the product or service</li>
<li><em>During</em>: steps that occur during use</li>
<li><em>After</em>: steps that occur after use</li>
</ul>
<p>Once the individual user journeys are worked out, on the board, we distribute in 8 columns the user journeys of all the members of the team. Initially each user journey will use the 8 columns, along a row.</p>
<p>Then we order them, grouping similar steps or steps that identify the same action, and placing them under the one that best summarizes it. We must have a user journey with 8 steps, and in each column we will only have a few sticky notes (one or two) for the different ideas that have arisen for this step.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia3-user-journey.jpg" alt="User Journey" /></p>
<h3 id="userjourneypitch">User journey pitch</h3>
<p>A member designated by the team had to make a new one and a half minute pitch describing the user journey.</p>
<h3 id="nbspprototypedraft">&nbsp;Prototype draft</h3>
<p>Team members had to work on creating a new draft of the prototype, incorporating the received feedback and the generated user journey. At this point you can distribute the work among team members.</p>
<h2 id="day4prototype-1">Day 4. Prototype</h2>
<h3 id="roledesignation">Role designation</h3>
<p>The team had to designate several roles for the realization of the prototype, where a person could assume several roles:</p>
<ul>
<li><em>Designers</em>: graphic design of product, presentation, landing page or application mockups.</li>
<li><em>Creators of content</em>: images and texts for presentation, landing pages or application mockups.</li>
<li><em>Copys</em>: texts for calls to action and other creative texts.</li>
<li><em>Stitcher</em>: the one that is in charge of assembling the pieces, and makes sure that what others produce makes sense together.</li>
</ul>
<h3 id="prototyping">Prototyping</h3>
<p>The members of the team had to work on the creation of the prototype, individually, in subgroups or as deemed appropriate. Finally the stitcher had to be in charge of the coordination and union of the pieces.</p>
<p>Said prototype is only a facade of the product or service to be designed, in no case is it intended to implement a product exhaustively, since time is extremely limited. The objective of this prototype is to be able to validate our assumptions through the tests that will be carried out the next day.</p>
<p>In the case of my team, the prototype had to portray a plastic collection service in the restaurants. This service included the use of a mobile app, but this app was not the central part of the application, so we decided to make a commercial presentation instead of a navigable prototype.</p>
<p><img src="/img/blog/2019-05_circular-design-sprint/dia4-prototipo.png" alt="Prototype" /></p>
<p>Other teams estimated making physical prototypes by means of boxes, paper, etc., since they had to simulate electronic devices that do not exist.</p>
<h2 id="nbspday5test">&nbsp;Day 5. Test</h2>
<h3 id="validationinterviewscript">Validation interview script</h3>
<p>In the first place, it was necessary to write a script for an interview for the final user, including how he will be addressed, in case of cold-door interviews.</p>
<p>Once again, the interviews should seek validation of the product, not its acceptance by the user.</p>
<ul>
<li>Does our solution meet your needs?</li>
<li>Are you able to use our interface / service?</li>
<li>What do you like or do not like about what we have done?</li>
<li>What would you like to improve?</li>
</ul>
<p>Consequently, this the methodology will look for:</p>
<ul>
<li>Use open questions instead of directed questions.</li>
<li>If there is a usable or clickable prototype, let the user interact with it, find out if he understands it, and find his blockages or frustrations regarding the interaction.</li>
<li>Provide the minimum context explanation before facing the user to the prototype, instead of telling everything, to see if he understands it, and avoid conditioning him.</li>
</ul>
<p>In our case, there was no clickable prototype, as it was more of a service than the application itself, so we chose to show the full presentation and find out later what he thought of the solution.</p>
<h3 id="validationinterviews">Validation interviews</h3>
<p>In order to conduct interviews, depending on whether they are cold-weather or previously arranged, you will have to go outside or use an interview room, or Skype.</p>
<p>The ideal case would be to arrange a series of face-to-face interviews with end users, and to have a room in which only one person speaks with the user, without taking notes, in order to maintain visual contact. From the outside, other people would observe the interview, including the screen that the user is handling if that is the case, and they would take notes of everything relevant of what the user says and what he actually does. Ideally, everything would be recorded on video to be available for later review.</p>
<p>Alternatives to this ideal situation include conducting the interview by Skype and recording it, or conducting the interview in person, 2 or more people, of which one will speak with the user without losing visual contact, while others will record in audio/video (if the person can be self-conscious, audio may be better, since the recording is not perceived) and write down comments.</p>
<p>The number of validation interviews is about 10, among which we must target our target user (persona) at least 80%.</p>
<h3 id="validationconclusionslessonslearned">Validation conclusions. Lessons learned</h3>
<p>The team meets again and patterns are extracted from the interviews. For this we will classify the interviewed users according to their profile and we will group the received answers.</p>
<p>From this learning we will draw conclusions about which parts of the solution can work and which do not, as well as the solution on a global level.</p>
<ul>
<li>Does our proposal make sense for users?</li>
<li>Do you know how to interact with her?</li>
<li>Can we improve it? How?</li>
<li>Should we keep with this approach or discard it?</li>
</ul>
<h3 id="finalpitch">Final pitch</h3>
<p>The team had to prepare a final pitch to present to the client the prototype, along with the lessons learned from the validation. This final pitch should last 5 minutes.</p>
<p>The pitch was made to the client, who in turn provided feedback to the teams.</p>
<h2 id="conclusions">Conclusions</h2>
<p>The final impression was that, in a very short space of time a high quality result was achieved, where a lot of creativity and original solutions were put into play. At several points, it was necessary to change of direction, when the initial assumptions were not validated, and it was possible to do that without too much resistance coming from the authors of these initial ideas. Apparently, the ideas did not have a single author and, in some way, all the members of the team felt involved and made their contribution, both in the generation of ideas and in decision-making.</p>
<p>It is a rather surprising process from the inside, since at the beginning we come up with a lot of disparate ideas, that are gradually sorted out and discarded, under a lot of time pressure, until finally everything starts to converge in a way that seems natural.</p>
<p>Also, due to the philosophy of exploration without censorship, the solutions start being very ambitious and not feasible, but as the process progresses some ideas are canceled, recombined with others or degraded solutions are found for the more science-fiction ideas, so that the final solution is feasible. This allows us to get to put into practice ideas that initially we would have discarded because they seemed impossible.</p>]]></description><link>https://juanguijordan.com/blog/2019-05_circular-design-sprint</link><guid isPermaLink="true">https://juanguijordan.com/blog/2019-05_circular-design-sprint</guid><category><![CDATA[design-sprint]]></category><category><![CDATA[ux]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Tue, 25 Jun 2019 09:00:00 GMT</pubDate></item><item><title><![CDATA[Using Stencil Built Web Components with Ionic]]></title><description><![CDATA[<p>This post aims at providing clear instructions on how to use components created and compiled with Stencil on an Ionic application.
I will guide you in the process of making your web component available in your Ionic templates,
without the need of registering them in the npm registry or adding ugly script tags to your index file.</p>
<h2 id="motivation">Motivation</h2>
<p>Being created by the <a href="http://ionicframework.com/">Ionic Framework team</a>,
one would expect that using Stencil web components in Ionic projects would be,
if not automatic and integrated in the framework by means of some CLI command,
at least well documented.</p>
<p>Well, that it not the case, since the Ionic guys provide <a href="https://stenciljs.com/docs/framework-integration">framework integration instructions</a> for Angular,
React, Vue and Ember, but they do not provide them for Ionic.
Maybe I neglected some obvious thing, but I had to do some research to get my Stencil components working on an Ionic project,
and the effort was big enough to make me think about creating a post of it,
hoping that it may help someone.</p>
<h2 id="requirements">Requirements</h2>
<p>As a requirement, you need to create a Stencil component, a task for which you can find proper documentation in the Stencil site. The Stencil component doesn't need either to be registered in the npm registry.</p>
<h2 id="integrationprocess">Integration process</h2>
<p>If we integrate web components that are registered in npm, the process is simpler. Let's face in this section the case in which we developed a custom component, but we are not publishing it in the npm register. We are aiming at a clean integration without script tags in the <code>index.html</code> file.</p>
<p>The process takes three steps.</p>
<ul>
<li>First we build the component and copy the distribution files to our project.</li>
<li>Then we tell the Angular side of things how to use the component.</li>
<li>Last, we tell the Ionic side of things to include the component when it builds the bundle. The way we talk to Angular (really Ionic-Angular) depends on whether we are <em>eagerly</em> loading pages, or <em>lazily</em> loading them.</li>
</ul>
<h3 id="step1buildandcopycomponent">Step 1. Build and copy component</h3>
<p>Build the component and copy the contents of the dist folder to a folder in our project.
In this example we chose the folder <code>@img/lib/components/my-google-maps</code>.</p>
<h3 id="step2importintoappmodulets">Step 2. Import into app.module.ts</h3>
<p>First, you need to import the <code>CUSTOM_ELEMENTS_SCHEMA</code>, and add it to the <code>schemas</code> section of the <code>@NgModule</code>. If you import <code>CUSTOM_ELEMENTS_SCHEMA</code> into one of your page modules, the Angular compiler will accept elements it does not recognize (otherwise, it will throw an error). If you are lazy loading, you need to import this schema into each page module where you want to use the web component. If you are eagerly loading, you only need to import the schema into <code>app.module.ts</code>.</p>
<p>Then, add an import to your <code>dist/mycomponent</code> folder. This import statement does not load the entire web component. It only loads a small piece of code that then allows Ionic to load the full web component later, when a template requests it.</p>
<p>When you've performed both steps, your <code>app.module.ts</code> should look like this if you are eagerly loading.</p>
<pre><code class="typescript language-typescript">import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core'; // add this import
import '@img/lib/components/my-google-maps/dist/mycomponent'; // add this import

@NgModule({
  declarations: [],
  imports: [],
  bootstrap: [],
  entryComponents: [],
  providers: [],
  schemas: [CUSTOM_ELEMENTS_SCHEMA], // add this line
})
export class AppModule {}
</code></pre>
<p>If you are lazy loading, import just the web component in <code>app.module.ts</code>, and just the schema in the individual lazily loaded modules.</p>
<h3 id="step3tellionicappscriptstoincludethecomponentinthebuild">Step 3. Tell ionic-app-scripts to include the component in the build</h3>
<p>We will create a <code>copy.config.js</code> file that will define some rules to copy the web component to our final build. A good practice is to create it in a config folder, to separate it from other standard files like <code>package.json</code> or <code>ionic.config.json</code>.</p>
<p>This file can tell ionic app-scripts to include extra content when it builds an Ionic app. If you are creating the file, put it in a folder named <code>config</code> that is at the same directory level as your <code>src</code> folder. In the first place, let's declare the file in <code>package.json</code>. This will tell the app-scripts to use this file. Add the following field to your <code>package.json</code>:</p>
<pre><code class="json language-json">"config": {
    "ionic_copy": "./config/copy.config.js"
}
</code></pre>
<p>Then, put this inside <code>config\copy.config.js</code>:</p>
<pre><code class="javascript language-javascript">module.exports = {
  copyTimeAgoWebComponent: {
    src: [
      '{{ROOT}}/src/img/lib/components/my-google-maps/dist/mycomponent**/*',
    ],
    dest: '{{BUILD}}',
  },
};
</code></pre>
<p>Once you've made those changes, app-scripts will know how to include the web component in your builds.
You can now use your Stencil web components in your Ionic templates as any other web component.</p>]]></description><link>https://juanguijordan.com/blog/2018-08_ionic-stencil-integration</link><guid isPermaLink="true">https://juanguijordan.com/blog/2018-08_ionic-stencil-integration</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Wed, 12 Sep 2018 10:00:00 GMT</pubDate></item><item><title><![CDATA[Versioning features in an angular app]]></title><description><![CDATA[<p>Imagine a scenario where your app needs to show different versions of a component or services to different groups of users.
If it sounds a bit farfetched, take the following scenario that was proposed to our development team in some real project:</p>
<ul>
<li>The app is downloaded from <strong>Google Play/App Store</strong>, and will be deployed in different countries, using the same app ID.</li>
<li>Different countries have different regulations as to whether the app can display user photographies, specific fields, and so on.
Also, some features should be totally disabled in some countries.</li>
<li>The app will keep growing in functionality, but not necessarily at the same time for all countries:
some countries may decide not to upgrade some feature, or upgrade it later;
some countries may take more time to review if some particular new feature follows their privacy regulations…</li>
</ul>
<p>The naive approach of having <code>ngIf</code> directives all over the place can work for the simpler cases
but it would be hard to maintain and would also clutter our beautiful templates.
Also, components using different services when switching from one version to another would be very difficult to maintain.</p>
<p>So we came up to the following approach, to cope with all those situations:</p>
<ul>
<li>Create a directive to show/hide parts of a template depending on the country and version.
That would be like an extension of <code>ngIf</code> with our <code>country</code> and <code>version</code> parameters,
and would give an answer to simple problems like hiding a whole feature in some countries,
or hiding a particular field for some countries/versions.</li>
<li>Create a directive that returns a dynamic component, depending on the <code>country</code> and <code>version</code> parameters.
This directive would be used for more general cases,
where a component version can provide very different functionality from another version.</li>
</ul>
<p>To illustrate this post, we created an app. Our app proudly shows some country data,
like a country flag, area and population.
We made contact with governments all over the world and kindly asked them to join our non-profit revolutionary app,
providing some basic data:</p>
<ul>
<li>Country name</li>
<li>Area</li>
<li>Population</li>
</ul>
<p>Some of these countries have really severe regulations and wanted to join the app,
but without revealing their area and population initially,
until their lawyers would determine if this data could be displayed.
So we designed the first version of the app with a single screen,
where the user would select the country from a select combo box,
and a component with two subcomponents displaying the country data:</p>
<ul>
<li>A header component for the country name</li>
<li>A content component for the data</li>
</ul>
<p>The content component should be optional, and will display depending on the country’s regulations.</p>
<p><img src="/img/blog/2018-04_versioning-features-in-an-angular-app/features_v1.png" alt="Design of the first version of the components" /></p>
<p>These are some screenshots of the app at this point:</p>
<p><img src="/img/blog/2018-04_versioning-features-in-an-angular-app/features_v1_screenshots.png" alt="Screenshots of the first version of the app" /></p>
<p>After the kick off, some users were so excited that started to ask for some new features:</p>
<ul>
<li>They wanted to get the country flag displayed in the header</li>
<li>Some more data like country capital and wait for it… the national anthem, of course</li>
</ul>
<p>The development team agreed that, given that some countries still had not provided their area and population,
it was reasonable to think that some of them would not provide instantly their flag, capital and anthem.
So we decided to version the header and content components, so we could give them a smooth path to upgrade their data,
while still looking good in the app, showing the old components instead of new components with empty fields.</p>
<p><img src="/img/blog/2018-04_versioning-features-in-an-angular-app/features_v2.png" alt="Design of the final version of the components" /></p>
<p>These are some screenshots of the final version of the app:</p>
<p><img src="/img/blog/2018-04_versioning-features-in-an-angular-app/features_v2_screenshots.png" alt="Screenshots of the final version of the app" /></p>
<p>Our app builds on two directives, as we said.
The first one will show/hide an element depending on the feature availability for a certain country,
where the features will be <code>COUNTRY_HEADER</code> and <code>COUNTRY_CONTENT</code>.
This directive will get the feature availability from a service, the so called <code>CountryConfigService</code>.</p>
<pre><code class="typescript language-typescript">import {
  CountryConfigDictionary,
  DEFAULT_COUNTRY_CONFIG,
  FeatureVersionDictionary,
} from './country-config.model';

@Injectable()
export class CountryConfigService {
  private config: CountryConfigDictionary = DEFAULT_COUNTRY_CONFIG;
  getCountryFeatures(countryCode: string): FeatureVersionDictionary {
    return this.config[countryCode].features;
  }

  isFeatureEnabled(feature: string, countryCode: string): boolean {
    const countryFeatures = this.getCountryFeatures(countryCode);
    return countryFeatures.hasOwnProperty(feature);
  }

  getFeatureVersion(feature: string, countryCode: string): number {
    const countryFeatures = this.getCountryFeatures(countryCode);
    return countryFeatures[feature];
  }
}
</code></pre>
<p>The <code>config</code> is an object following a <code>CountryConfigDictionary</code> model
that lets us define which version of the <code>COUNTRY_HEADER</code> and <code>COUNTRY_CONTENT</code> components,
if any, is using each country:</p>
<pre><code class="typescript language-typescript">export const DEFAULT_COUNTRY_CONFIG: CountryConfigDictionary = {
  es: {
    features: {
      COUNTRY_HEADER: 2,
      COUNTRY_CONTENT: 2,
    },
  },
  fr: {
    features: {
      COUNTRY_HEADER: 2,
      COUNTRY_CONTENT: 2,
    },
  },
  it: {
    features: {
      COUNTRY_HEADER: 2,
      COUNTRY_CONTENT: 1,
    },
  },
  pt: {
    features: {
      COUNTRY_HEADER: 1,
      COUNTRY_CONTENT: 1,
    },
  },
  uk: {
    features: {
      COUNTRY_HEADER: 1,
    },
  },
};
</code></pre>
<h2 id="thefeatureifdirective">The FeatureIf directive</h2>
<p>With that in mind, let’s see the <code>FeatureIf</code> directive.
It will display an element if the feature is enabled for the country.
Optionally, we can define the minimum version implemented by the country,
meaning that if the country uses a lower version, the element will be hidden.
I will skip the standard imports to save space in the listing:</p>
<pre><code class="typescript language-typescript">import { CountryConfigService } from '../../services/country-config/country-config.service';

@Directive({
  selector: '[appFeatureIf]',
})
export class FeatureIfDirective implements OnChanges {
  private _featureName: string;
  private _countryCode: string;
  private _minVersion = 0;
  private _else = false;
  private _hasView: boolean;

  @Input() set appFeatureIf(featureName: string) {
    this._featureName = featureName;
  }

  @Input() set appFeatureIfCountryCode(value: string) {
    this._countryCode = value;
  }

  @Input() set appFeatureIfVersion(value: number) {
    this._minVersion = value;
  }

  @Input() set appFeatureIfElse(value: boolean) {
    this._else = value;
  }

  constructor(
    private templateRef: TemplateRef&lt;any&gt;,
    private viewContainerRef: ViewContainerRef,
    private countryConfigService: CountryConfigService
  ) {}

  ngOnChanges(changes: SimpleChanges): void {
    if (changes) {
      this.applyChanges();
    }
  }

  private applyChanges(): void {
    const featureEnabled = this.countryConfigService.isFeatureEnabled(
      this._featureName,
      this._countryCode
    );
    const featureVersion =
      this.countryConfigService.getFeatureVersion(
        this._featureName,
        this._countryCode
      ) || 0;
    const enabled: boolean =
      featureEnabled &amp;&amp; featureVersion &gt;= this._minVersion;
    const displayed: boolean =
      (enabled &amp;&amp; !this._else) || (!enabled &amp;&amp; this._else);
    this.embedTemplate(displayed);
  }

  private embedTemplate(enabled): void {
    if (enabled &amp;&amp; !this._hasView) {
      this.viewContainerRef.createEmbeddedView(this.templateRef);
      this._hasView = true;
    } else if (!enabled &amp;&amp; this._hasView) {
      this.viewContainerRef.clear();
      this._hasView = false;
    }
  }
}
</code></pre>
<p>This structural directive makes use of 4 parameters: <code>featureName</code>, <code>countryCode</code>, <code>featureVersion</code> and <code>else</code>.
Pay attention on how we define input properties in a structural directive:</p>
<ul>
<li>The first input takes the name of the very same directive: <code>appFeatureIf</code>.
We use a setter to internally save it as <code>_featureName</code>.</li>
<li>The rest of the inputs take the name of the directive plus the name of the parameter.
For instance, the input <code>appFeatureIfCountryCode</code> references the directive parameter <code>countryCode</code>.
We also use here a setter to map the input to the private variable <code>_countryCode</code>.</li>
</ul>
<p>Please remark below how the directive is used in a template.
The first parameter doesn’t need a key, while the rest is passed with <code>"key: value"</code> tuples, separated by a semicolon (<code>;</code>).</p>
<pre><code class="html language-html">&lt;div *appFeatureIf="'COUNTRY_HEADER';countryCode:code;version:2"&gt;
  Show only for countries implementing the COUNTRY_HEADER feature with version
  &gt;= 2
&lt;/div&gt;

&lt;div *appFeatureIf="'COUNTRY_HEADER';countryCode:code;version:2; else:'true'"&gt;
  Show otherwise
&lt;/div&gt;
</code></pre>
<p>What the directive basically does is:</p>
<ul>
<li>Registers for changes in any of the inputs.</li>
<li>When the directive is instantiated or any of the input changes, executes <code>applyChanges()</code>.</li>
<li>Computes if the feature is enabled according to <code>featureName</code>, <code>countryCode</code> and <code>minVersion</code>.</li>
<li>Computes if the element has to be displayed.
If the <code>else</code> parameter is defined and <code>true</code>, then it will be displayed if the feature is disabled.</li>
<li>Executes <code>embedTemplate()</code>, which creates the embedded view into the view container if the element should be displayed,
or clears the view container otherwise.</li>
</ul>
<p>We use this directive in two cases in our app.
In the header, we use it to hide the flag for countries implementing <code>COUNTRY_HEADER</code> version 1.</p>
<pre><code class="html language-html">&lt;div
  *appFeatureIf="'COUNTRY_HEADER';countryCode:country.code;
  version:2"
  class="flag {{country.code}}"
&gt;&lt;/div&gt;
</code></pre>
<p>In the parent component, we use the directive with the <code>else</code> parameter set to <code>true</code>,
to display an informative text when the content component is not available.</p>
<pre><code class="html language-html">&lt;div
  class="no-feature"
  *appFeatureIf="'COUNTRY_CONTENT';
  countryCode:country.code;else:'true'"
&gt;
  This feature is not yet available in {{country.name}}.
&lt;/div&gt;
</code></pre>
<h2 id="thefeatureversiondirective">The FeatureVersion directive</h2>
<p>Our second directive will allow us to dynamically inject a component or another, depending on some parameters.</p>
<pre><code class="typescript language-typescript">import { CountryConfigService } from '../../services/country-config/country-config.service';
import { DynamicComponentService } from '../../services/dynamic-component/dynamic-component.service';
import { DynamicComponent } from '../../services/dynamic-component/dynamic-component.model';

@Directive({
  selector: '[appFeatureVersion]',
})
export class FeatureVersionDirective implements OnChanges {
  private _featureName: string;
  private _countryCode: string;
  private _data: any;
  private componentRef: ComponentRef&lt;DynamicComponent&gt;;

  @Input() set appFeatureVersion(featureName: string) {
    this._featureName = featureName;
  }

  @Input()
  set appFeatureVersionCountryCode(value: string) {
    this._countryCode = value;
  }

  @Input()
  set appFeatureVersionData(value: any) {
    this._data = value;
  }

  constructor(
    private viewContainerRef: ViewContainerRef,
    private countryConfigService: CountryConfigService,
    private dynamicComponentService: DynamicComponentService,
    private componentFactoryResolver: ComponentFactoryResolver
  ) {}

  ngOnChanges(changes: SimpleChanges): void {
    if (changes) {
      this.applyChanges();
    }
  }

  private applyChanges(): void {
    const featureEnabled = this.countryConfigService.isFeatureEnabled(
      this._featureName,
      this._countryCode
    );
    const featureVersion =
      this.countryConfigService.getFeatureVersion(
        this._featureName,
        this._countryCode
      ) || 0;
    const dynamicComponent = this.dynamicComponentService.getComponent(
      this._featureName,
      featureVersion
    );
    this.clearViewContainer();
    if (featureEnabled &amp;&amp; dynamicComponent) {
      this.embedComponent(dynamicComponent);
      this.injectComponentData();
    }
  }

  private clearViewContainer(): void {
    this.viewContainerRef.clear();
  }

  private embedComponent(component: Type&lt;DynamicComponent&gt;): void {
    const componentFactory =
      this.componentFactoryResolver.resolveComponentFactory(component);
    this.componentRef = this.viewContainerRef.createComponent(componentFactory);
  }

  private injectComponentData(): void {
    this.componentRef.instance.data = this._data;
  }
}
</code></pre>
<p>This time, the directive takes three parameters: <code>featureName</code>, <code>countryCode</code> and <code>data</code>.
The <code>data</code> parameter will be used to pass data to our dynamic component.
Since different components may have different inputs,
we took the approach of receiving any external data through this <code>data</code> object.
Dynamic components may also receive external data through services, as we will see later.</p>
<p>So basically, what this directive does is:</p>
<ul>
<li>Registers for changes in any of the inputs.</li>
<li>When the directive is instantiated or any of the input changes, executes <code>applyChanges()</code>.</li>
<li>Computes if the feature is enabled according to feature name and country code.</li>
<li>Gets the dynamic component type for the feature name and version from the <code>DynamicComponentService</code>.</li>
<li>Clears the view container.</li>
<li>If a dynamic component type was retrieved successfully, executes <code>embedTemplate()</code>,
which resolves a factory for this type of component and creates the embedded view into the view container.</li>
<li>Finally, it injects the data object into the dynamically instantiated component.</li>
</ul>
<p>Let’s see the code for those <code>DynamicComponent</code> and <code>DynamicComponentService</code> classes.</p>
<p>The <code>DynamicComponent</code> is just a class with a public <code>data</code> property.
We will also create a dictionary interface and a constant with the current dynamic component classes
(country content version 1 and 2) that will be used by the service.</p>
<pre><code class="typescript language-typescript">import { CountryContentV1Component } from '../../../country/components/country-content/v1/country-content.v1.component';
import { CountryContentV2Component } from '../../../country/components/country-content/v2/country-content.v2.component';

export class DynamicComponent {
  data: any;
}

export interface DynamicComponentDictionary {
  [key: string]: {
    [key: number]: Type&lt;DynamicComponent&gt;;
  };
}

export const DEFAULT_DYNAMIC_COMPONENT_DICTIONARY: DynamicComponentDictionary =
  {
    COUNTRY_CONTENT: {
      1: CountryContentV1Component,
      2: CountryContentV2Component,
    },
  };
</code></pre>
<p>The <code>DynamicComponentService</code> simply returns the appropriate component class,
depending on the <code>featureName</code> and <code>version</code> parameters.</p>
<pre><code class="typescript language-typescript">import {
  DEFAULT_DYNAMIC_COMPONENT_DICTIONARY,
  DynamicComponent,
  DynamicComponentDictionary,
} from './dynamic-component.model';

@Injectable()
export class DynamicComponentService {
  private componentDictionary: DynamicComponentDictionary =
    DEFAULT_DYNAMIC_COMPONENT_DICTIONARY;

  getComponent(featureName: string, version: number): Type&lt;DynamicComponent&gt; {
    const selectedComponent = this.componentDictionary[featureName]
      ? this.componentDictionary[featureName][version]
      : undefined;
    return selectedComponent;
  }
}
</code></pre>
<p>Let’s see how this directive is used in the parent component.</p>
<pre><code class="html language-html">&lt;ng-template
  *appFeatureVersion="'COUNTRY_CONTENT';
  countryCode:country.code;data:{country: country}"
&gt;
&lt;/ng-template&gt;
</code></pre>
<p>This is the code for the <code>CountryContentV1Component</code> class.</p>
<pre><code class="typescript language-typescript">import { DynamicComponent } from '../../../../shared/services/dynamic-component/dynamic-component.model';
import { Country } from '../../../services/country.model';

@Component({
  selector: 'app-country-content-v1',
  templateUrl: './country-content.v1.component.html',
  styleUrls: ['./country-content.v1.component.scss'],
})
export class CountryContentV1Component implements DynamicComponent {
  data: { country: Country };
}
</code></pre>
<p>And this is how the template uses the <code>data</code> property to display the country data.</p>
<pre><code class="html language-html">&lt;div class="country-content"&gt;
  &lt;div class="data-row"&gt;
    &lt;span class="data-label"&gt; Area: &lt;/span&gt;
    &lt;span class="data-value"&gt; {{data.country.area | number}} &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class="data-row"&gt;
    &lt;span class="data-label"&gt; Population: &lt;/span&gt;
    &lt;span class="data-value"&gt; {{data.country.population | number}} &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>You can see a demo of the application here:<br />
https://stackblitz.com/edit/component-version-demo</p>
<h2 id="versionedservices">Versioned services</h2>
<p>The situation can get a bit more complicated if services are also versioned.
Let’s imagine that the first version of the service providing country data just included the country name,
area and population, and that a new version should be created to include the new data,
while still providing the old version for backward compatibility.</p>
<p>In this case we can inject the corresponding service version in the versioned components.
We won’t be using the <code>data</code> property from <code>DynamicComponent</code>, but will get the data from the service instead.
We could also use <em>injection tokens</em> to dynamically inject the versioned service depending on certain conditions.</p>
<p>The following demo is a simple approach using versioned services:<br />
https://stackblitz.com/edit/component-version-demo-services</p>
<h2 id="finalconsiderations">Final considerations</h2>
<p>The demo app is probably too simple for that kind of solution.
We could still smartly use some <code>ngIf</code> and <code>ngTemplate</code> stuff to get to the same solution.
But think of a case where the user doesn’t select the country from a combo box,
but the country gets auto detected from your device settings,
and think of a more complicated UI with a dashboard with several widgets that should be displayed or hidden,
or have different content according to the country, and then this approach will make much more sense.</p>
<p>This post is long enough to get into more details.
If you have suggestions to enhance it, please include them in your comments&nbsp;:)</p>]]></description><link>https://juanguijordan.com/blog/2018-04_versioning-features-in-an-angular-app</link><guid isPermaLink="true">https://juanguijordan.com/blog/2018-04_versioning-features-in-an-angular-app</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Tue, 24 Apr 2018 09:00:00 GMT</pubDate></item><item><title><![CDATA[Deploying an Angular CLI project on Github Pages and Stackblitz]]></title><description><![CDATA[<p>Can’t wait to show to the world your proof of concept, side project, idea…?
This 5-line bash recipe will put your work on the showcase in a matter of seconds.</p>
<p>So you just finished creating the coolest project with <a href="https://cli.angular.io/">Angular CLI</a> and want to share it with your colleagues, or perhaps write a post about it, but you want to skip the pain to your colleagues of checking out the code, installing dependencies and launching the app — I know, it almost can’t get any easier nowadays — and you don’t own a web server, or perhaps you are as lazy as your colleagues and don’t feel like putting much effort on deploying your code anywhere.</p>
<p>Well, <a href="https://pages.github.com/">Github Pages</a> to the rescue!</p>
<h2 id="githubpages">GitHub Pages</h2>
<p>I am assuming that you already created your project with Angular CLI, so your project is already versioned with git.
Let’s assume too that you already have a <strong>GitHub account</strong> with some <code>NICKNAME</code>.
Head yourself to GitHub and create a new project, let’s call it <code>MY_PROJECT</code>.
Don’t put any files in it, you can come back later and add the <code>README</code> and the desired license,
but for now it will be easier if you just leave it blank.</p>
<p>Then, connect your local git repository with the new remote repository and push the changes:</p>
<pre><code class="bash language-bash">git remote add origin https://github.com/NICKNAME/MY_PROJECT.git
git push origin master
</code></pre>
<p>Now, if you already knew about GitHub Pages, you’d be tempted to manually activate them on the <code>index.html</code> file of your project.
<strong>DON’T DO THAT! It won’t work!!</strong></p>
<p>Your project still needs to be built for production,
then a <code>dist</code> folder will be created from which you could serve your GitHub pages but <strong>DON’T! It won’t work!!!</strong></p>
<p>It looks like GitHub Pages is not suited for SPAs, since it redirects any paths in your app to a 404 page.
But some really nice guys developed <a href="https://www.npmjs.com/package/angular-cli-ghpages">angular-cli-ghpages</a>.
This npm package will fill the gaps and make your app work in GitHub Pages.</p>
<p>Install it with:</p>
<pre><code class="bash language-bash">npm install -g angular-cli-ghpages
</code></pre>
<p>Then execute these 2 commands:</p>
<pre><code class="bash language-bash">ng build --prod --base-href "https://NICKNAME.github.io/MY_PROJECT/"
angular-cli-ghpages
</code></pre>
<p>The second command has a bunch of options, but they are all optional as the word <code>option</code> states,
and you don’t need much more to get your app up and running on GitHub Pages. Enjoy!</p>
<p>Well, certainly you’ll need the URL of your app to share it with the world.
This URL is exactly the one that we used on the <code>ng build</code> command:<br />
<a href="#">https://NICKNAME.github.io/MY_PROJECT/</a></p>
<h3 id="deployingionicprojects">Deploying Ionic projects</h3>
<p>Update: 2018-05-07</p>
<p>What about Ionic projects.
They are deployed to <code>www</code> instead of the <code>dist</code> folder, and they use Ionic CLI instead of Angular CLI,
so a couple of changes will need to be done.</p>
<pre><code class="bash language-bash">ionic build --prod
</code></pre>
<p>The <code>--base-href</code> is not available in Ionic CLI (not that I'm aware of),
so you will need to open the <code>index.html</code> file and write the base tag on your own, after the build is finished.
You can put it after the title tag, for instance:</p>
<pre><code class="html language-html">&lt;title&gt;Ionic App&lt;/title&gt;
&lt;base href="https://NICKNAME.github.io/MY_PROJECT/" /&gt;
&lt;meta
  name="viewport"
  content="viewport-fit=cover, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"
/&gt;
</code></pre>
<p>Now, as I said, the output of the build is not the default for Angular CLI, which would be the <code>dist</code> folder.
Use the <code>--dir</code> flag to specify the <code>www</code> folder as the source for GitHub Pages.</p>
<pre><code class="bash language-bash">angular-cli-ghpages --dir www
</code></pre>
<h2 id="stackblitz">Stackblitz</h2>
<p>Now for the <a href="https://stackblitz.com/">Stackblitz</a> part of the post… wouldn’t it be nice to enable our colleagues or followers, to actually interact with our code and see the impact of the modifications in almost-real-time?</p>
<p>The guys from Stackblitz have created this sort of online IDE where you can create projects and see the build at the same time.
It’s like <strong>JSfiddler</strong> on steroids!</p>
<p><img src="/img/blog/2018-03_angular-cli-github-pages-stackblitz/stackblitz.png" alt="Stackblitz" /></p>
<p>Even simpler than registering on Stackblitz, creating a project and uploading your project files,
this one line trick will load your GitHub project on the Stackblitz IDE.</p>
<p>Just share this URL, using again your GitHub nickname and project name:<br />
<a href="#">https://stackblitz.com/github/NICKNAME/MY_PROJECT</a></p>
<p>This is valid also for branches, tags or specific commits. Just use the following scheme for the URL:<br />
<a href="#">https://stackblitz.com/github/NICKNAME/MY_PROJECT/tree/{TAG|BRANCH|COMMIT}</a></p>
<p>I hope this post helped you to release your projects in a place where they can be seen, enjoyed and edited by others.</p>]]></description><link>https://juanguijordan.com/blog/2018-03_angular-cli-github-pages-stackblitz</link><guid isPermaLink="true">https://juanguijordan.com/blog/2018-03_angular-cli-github-pages-stackblitz</guid><category><![CDATA[javascript]]></category><dc:creator><![CDATA[Juangui Jordán]]></dc:creator><pubDate>Mon, 26 Mar 2018 10:00:00 GMT</pubDate></item></channel></rss>